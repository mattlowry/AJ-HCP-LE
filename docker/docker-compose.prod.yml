version: '3.8'

services:
  # Load balancer
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Health check port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - frontend_build:/var/www/html:ro
    depends_on:
      - backend1
      - backend2
      - frontend1
    restart: unless-stopped
    networks:
      - frontend_network
      - backend_network

  # Backend instances
  backend1:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=postgresql://fsm_user:${DB_PASSWORD}@postgres:5432/fsm_db
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=fsm_core.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=aj-long-electric.com,www.aj-long-electric.com,nginx
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend2:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=postgresql://fsm_user:${DB_PASSWORD}@postgres:5432/fsm_db
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=fsm_core.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=aj-long-electric.com,www.aj-long-electric.com,nginx
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend3:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=postgresql://fsm_user:${DB_PASSWORD}@postgres:5432/fsm_db
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=fsm_core.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=aj-long-electric.com,www.aj-long-electric.com,nginx
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend instances
  frontend1:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    environment:
      - REACT_APP_API_URL=https://aj-long-electric.com/api
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    volumes:
      - frontend_build:/app/build:ro
    restart: unless-stopped
    networks:
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  frontend2:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    environment:
      - REACT_APP_API_URL=https://aj-long-electric.com/api
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    volumes:
      - frontend_build:/app/build:ro
    restart: unless-stopped
    networks:
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database with replication
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=fsm_db
      - POSTGRES_USER=fsm_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    restart: unless-stopped
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - monitoring_network

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - logging_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - logging_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - logging_network

  # Backup service
  backup:
    image: postgres:15-alpine
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/backup.sh"]
    depends_on:
      - postgres
    restart: "no"
    networks:
      - backend_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  frontend_build:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge
  monitoring_network:
    driver: bridge
  logging_network:
    driver: bridge