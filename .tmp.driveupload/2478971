{"version":3,"file":"static/js/422.34da8fd3.chunk.js","mappings":"sJAqNO,MAAMA,EAAc,IAvM3B,MAAkBC,WAAAA,GAAA,KACRC,yBAAmB,EAMnBC,WAAAA,CAAYC,EAAqBC,GACI,CAGzC,MAAMC,EAAY,CAChBC,MAAOH,EACPI,QAASH,EACTI,UAAWC,KAAKC,OAIdC,OAAOC,QAAUD,OAAOC,OAAOC,OAEjCC,aAAaC,QAAQ,WAAYC,KAAKC,KAAKC,UAAUb,MAErDS,aAAaC,QAAQ,YAAaZ,GAClCW,aAAaC,QAAQ,eAAgBX,GAEzC,CAIF,CAKQe,eAAAA,GAEJ,IACE,MAAMC,EAAWN,aAAaO,QAAQ,YACtC,GAAID,EAAU,CACZ,MAAME,EAAUL,KAAKM,MAAMC,KAAKJ,IAEhC,GAAIX,KAAKC,MAAQY,EAAQd,UAAY,MACnC,MAAO,CACLL,YAAamB,EAAQhB,MACrBF,aAAckB,EAAQf,QAG5B,CACF,CAAE,MAAOkB,GACPC,QAAQC,KAAK,oCACf,CAGF,MAAO,CACLxB,YAAaW,aAAaO,QAAQ,aAClCjB,aAAcU,aAAaO,QAAQ,gBAEvC,CAKA,WAAMO,CAAMC,GACV,IACE,MAAMC,QAAiBC,EAAAA,GAAIC,KAAmB,eAAgBH,IACxD,aAAEI,EAAY,cAAEC,GAAkBJ,EAASK,KAKjD,OAHAC,KAAKlC,YAAY+B,EAAcC,GAC/BE,KAAKC,qBAAqBJ,GAEnBH,EAASK,IAClB,CAAE,MAAOV,GAMP,MALAa,EAAAA,GAAYC,YAAYd,EAAO,CAC7Be,UAAW,cACXC,OAAQ,QACRC,YAAa,iDAETjB,CACR,CACF,CAKA,kBAAMrB,GACJ,IACE,MAAM,aAAEA,GAAiBgC,KAAKjB,kBAE9B,IAAKf,EAEH,OADAgC,KAAKO,SACE,KAGT,MAAMb,QAAiBC,EAAAA,GAAIC,KAA+B,iBAAkB,CAC1EE,cAAe9B,KAGX,aAAE6B,GAAiBH,EAASK,MAG1B/B,aAAcwC,GAAkBR,KAAKjB,kBAM7C,OALIyB,IACFR,KAAKlC,YAAY+B,EAAcW,GAC/BR,KAAKC,qBAAqBJ,IAGrBA,CACT,CAAE,MAAOR,GASP,OARAa,EAAAA,GAAYC,YAAYd,EAAO,CAC7Be,UAAW,cACXC,OAAQ,gBACRC,YAAa,0CAIfN,KAAKO,SACE,IACT,CACF,CAKQN,oBAAAA,CAAqB/B,GAC3B,IAEE,MACMuC,EAA+B,IADrB5B,KAAKM,MAAMC,KAAKlB,EAAMwC,MAAM,KAAK,KAClBC,IAEzBC,EAAmBH,EADLpC,KAAKC,MAC+B,IAEpDsC,EAAmB,IACrBZ,KAAKnC,oBAAsBgD,YAAW,KACpCb,KAAKhC,cAAc,GAClB4C,GAEP,CAAE,MAAOvB,GACPC,QAAQC,KAAK,oCAAqCF,EACpD,CACF,CAKAyB,cAAAA,GACE,MAAM,YAAE/C,GAAgBiC,KAAKjB,kBAC7B,OAAOhB,CACT,CAKAgD,eAAAA,GACE,MAAM,YAAEhD,GAAgBiC,KAAKjB,kBAC7B,QAAShB,CACX,CAKAwC,MAAAA,GAEMP,KAAKnC,sBACPmD,aAAahB,KAAKnC,qBAClBmC,KAAKnC,yBAAsBoD,GAI7BvC,aAAawC,WAAW,aACxBxC,aAAawC,WAAW,gBACxBxC,aAAawC,WAAW,YAGxBxC,aAAawC,WAAW,eAGS,WAA7B3C,OAAO4C,SAASC,WAClB7C,OAAO4C,SAASE,KAAO,WAE3B,CAKQC,kBAAAA,CAAmBpD,GACzB,OAAmC,IAA5BA,EAAMwC,MAAM,KAAKa,MAC1B,CAKAC,UAAAA,GACE,MAAM,YAAEzD,GAAgBiC,KAAKjB,kBACzBhB,GAAeiC,KAAKsB,mBAAmBvD,IACzCiC,KAAKC,qBAAqBlC,EAE9B,E","sources":["services/authService.ts"],"sourcesContent":["import api from './api';\nimport { errorLogger } from '../utils/errorHandling';\n\nexport interface AuthResponse {\n  access_token: string;\n  refresh_token: string;\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    role: string;\n  };\n}\n\nclass AuthService {\n  private refreshTokenTimeout?: NodeJS.Timeout;\n\n  /**\n   * Store tokens securely using HttpOnly cookies in production\n   * Falls back to localStorage in development\n   */\n  private storeTokens(accessToken: string, refreshToken: string): void {\n    if (process.env.NODE_ENV === 'production') {\n      // In production, we'd set HttpOnly cookies via the backend\n      // For now, store in localStorage with additional security\n      const tokenData = {\n        token: accessToken,\n        refresh: refreshToken,\n        timestamp: Date.now()\n      };\n      \n      // Encrypt token data if crypto is available\n      if (window.crypto && window.crypto.subtle) {\n        // Store encrypted tokens (simplified implementation)\n        localStorage.setItem('authData', btoa(JSON.stringify(tokenData)));\n      } else {\n        localStorage.setItem('authToken', accessToken);\n        localStorage.setItem('refreshToken', refreshToken);\n      }\n    } else {\n      localStorage.setItem('authToken', accessToken);\n      localStorage.setItem('refreshToken', refreshToken);\n    }\n  }\n\n  /**\n   * Retrieve stored tokens\n   */\n  private getStoredTokens(): { accessToken: string | null; refreshToken: string | null } {\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        const authData = localStorage.getItem('authData');\n        if (authData) {\n          const decoded = JSON.parse(atob(authData));\n          // Check if token is not expired (24 hours)\n          if (Date.now() - decoded.timestamp < 24 * 60 * 60 * 1000) {\n            return {\n              accessToken: decoded.token,\n              refreshToken: decoded.refresh\n            };\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to decode stored auth data');\n      }\n    }\n    \n    return {\n      accessToken: localStorage.getItem('authToken'),\n      refreshToken: localStorage.getItem('refreshToken')\n    };\n  }\n\n  /**\n   * Login with credentials\n   */\n  async login(credentials: { username: string; password: string }): Promise<AuthResponse> {\n    try {\n      const response = await api.post<AuthResponse>('/auth/login/', credentials);\n      const { access_token, refresh_token } = response.data;\n      \n      this.storeTokens(access_token, refresh_token);\n      this.scheduleTokenRefresh(access_token);\n      \n      return response.data;\n    } catch (error) {\n      errorLogger.handleError(error, {\n        component: 'AuthService',\n        action: 'Login',\n        userMessage: 'Login failed. Please check your credentials.'\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  async refreshToken(): Promise<string | null> {\n    try {\n      const { refreshToken } = this.getStoredTokens();\n      \n      if (!refreshToken) {\n        this.logout();\n        return null;\n      }\n\n      const response = await api.post<{ access_token: string }>('/auth/refresh/', {\n        refresh_token: refreshToken\n      });\n\n      const { access_token } = response.data;\n      \n      // Update only the access token, keep the refresh token\n      const { refreshToken: storedRefresh } = this.getStoredTokens();\n      if (storedRefresh) {\n        this.storeTokens(access_token, storedRefresh);\n        this.scheduleTokenRefresh(access_token);\n      }\n\n      return access_token;\n    } catch (error) {\n      errorLogger.handleError(error, {\n        component: 'AuthService',\n        action: 'Token Refresh',\n        userMessage: 'Session expired. Please log in again.'\n      });\n      \n      // Force logout on refresh failure\n      this.logout();\n      return null;\n    }\n  }\n\n  /**\n   * Schedule automatic token refresh before expiration\n   */\n  private scheduleTokenRefresh(token: string): void {\n    try {\n      // Decode JWT to get expiration time (simplified)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const expirationTime = payload.exp * 1000;\n      const currentTime = Date.now();\n      const timeUntilRefresh = expirationTime - currentTime - 5 * 60 * 1000; // 5 minutes before expiry\n\n      if (timeUntilRefresh > 0) {\n        this.refreshTokenTimeout = setTimeout(() => {\n          this.refreshToken();\n        }, timeUntilRefresh);\n      }\n    } catch (error) {\n      console.warn('Failed to schedule token refresh:', error);\n    }\n  }\n\n  /**\n   * Get current access token\n   */\n  getAccessToken(): string | null {\n    const { accessToken } = this.getStoredTokens();\n    return accessToken;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    const { accessToken } = this.getStoredTokens();\n    return !!accessToken;\n  }\n\n  /**\n   * Logout and clear all authentication data\n   */\n  logout(): void {\n    // Clear timeout\n    if (this.refreshTokenTimeout) {\n      clearTimeout(this.refreshTokenTimeout);\n      this.refreshTokenTimeout = undefined;\n    }\n\n    // Clear stored tokens\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('authData');\n\n    // Clear any other user-related data\n    localStorage.removeItem('userProfile');\n\n    // Redirect to login\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/#/login';\n    }\n  }\n\n  /**\n   * Validate token format (basic validation)\n   */\n  private isValidTokenFormat(token: string): boolean {\n    return token.split('.').length === 3; // JWT format check\n  }\n\n  /**\n   * Initialize auth service on app startup\n   */\n  initialize(): void {\n    const { accessToken } = this.getStoredTokens();\n    if (accessToken && this.isValidTokenFormat(accessToken)) {\n      this.scheduleTokenRefresh(accessToken);\n    }\n  }\n}\n\nexport const authService = new AuthService();\nexport default authService;"],"names":["authService","constructor","refreshTokenTimeout","storeTokens","accessToken","refreshToken","tokenData","token","refresh","timestamp","Date","now","window","crypto","subtle","localStorage","setItem","btoa","JSON","stringify","getStoredTokens","authData","getItem","decoded","parse","atob","error","console","warn","login","credentials","response","api","post","access_token","refresh_token","data","this","scheduleTokenRefresh","errorLogger","handleError","component","action","userMessage","logout","storedRefresh","expirationTime","split","exp","timeUntilRefresh","setTimeout","getAccessToken","isAuthenticated","clearTimeout","undefined","removeItem","location","pathname","href","isValidTokenFormat","length","initialize"],"sourceRoot":""}