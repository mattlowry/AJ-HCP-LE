{"version":3,"file":"static/js/260.41c7ee01.chunk.js","mappings":"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","sources":["services/GoogleMapsService.tsx","components/NewCustomerForm.tsx","services/api.ts"],"sourcesContent":["import React from 'react';\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\n\n// Google Maps configuration\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '';\n\ninterface MapProps {\n  center: google.maps.LatLngLiteral;\n  zoom: number;\n  children?: React.ReactNode;\n  onAddressSelect?: (address: string, coordinates: google.maps.LatLngLiteral) => void;\n}\n\ninterface MarkerProps {\n  position: google.maps.LatLngLiteral;\n  map?: google.maps.Map;\n}\n\n// Map component\nconst Map: React.FC<MapProps> = ({ center, zoom, children, onAddressSelect }) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const [map, setMap] = React.useState<google.maps.Map>();\n\n  React.useEffect(() => {\n    if (ref.current && !map) {\n      const newMap = new window.google.maps.Map(ref.current, {\n        center,\n        zoom,\n        styles: [\n          {\n            featureType: 'poi',\n            elementType: 'labels',\n            stylers: [{ visibility: 'off' }]\n          }\n        ]\n      });\n\n      // Add click listener for address selection\n      if (onAddressSelect) {\n        const geocoder = new google.maps.Geocoder();\n        \n        newMap.addListener('click', (event: google.maps.MapMouseEvent) => {\n          if (event.latLng) {\n            geocoder.geocode(\n              { location: event.latLng },\n              (results, status) => {\n                if (status === 'OK' && results && results[0]) {\n                  const address = results[0].formatted_address;\n                  const coordinates = {\n                    lat: event.latLng!.lat(),\n                    lng: event.latLng!.lng()\n                  };\n                  onAddressSelect(address, coordinates);\n                }\n              }\n            );\n          }\n        });\n      }\n\n      setMap(newMap);\n    }\n  }, [ref, map, center, zoom, onAddressSelect]);\n\n  return (\n    <div ref={ref} style={{ width: '100%', height: '300px' }}>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child as any, { map });\n        }\n      })}\n    </div>\n  );\n};\n\n// Marker component\nconst Marker: React.FC<MarkerProps> = ({ position, map }) => {\n  const [marker, setMarker] = React.useState<google.maps.Marker>();\n\n  React.useEffect(() => {\n    if (!marker && map) {\n      setMarker(new google.maps.Marker({ position, map }));\n    }\n\n    return () => {\n      if (marker) {\n        marker.setMap(null);\n      }\n    };\n  }, [marker, position, map]);\n\n  React.useEffect(() => {\n    if (marker) {\n      marker.setPosition(position);\n    }\n  }, [marker, position]);\n\n  return null;\n};\n\n// Render function for map loading states\nconst render = (status: Status) => {\n  switch (status) {\n    case Status.LOADING:\n      return <div style={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>Loading map...</div>;\n    case Status.FAILURE:\n      return <div style={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>Error loading map</div>;\n    case Status.SUCCESS:\n      return <div>Map loaded successfully</div>;\n  }\n};\n\n// Address search function\nexport const searchAddress = async (address: string): Promise<google.maps.LatLngLiteral | null> => {\n  if (!window.google) return null;\n  \n  const geocoder = new google.maps.Geocoder();\n  \n  return new Promise((resolve) => {\n    geocoder.geocode({ address }, (results, status) => {\n      if (status === 'OK' && results && results[0]) {\n        const location = results[0].geometry.location;\n        resolve({\n          lat: location.lat(),\n          lng: location.lng()\n        });\n      } else {\n        resolve(null);\n      }\n    });\n  });\n};\n\n// Main Google Maps wrapper component\nexport const GoogleMapsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  if (!GOOGLE_MAPS_API_KEY) {\n    return (\n      <div style={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center', border: '1px solid #ccc' }}>\n        Google Maps API key not configured\n      </div>\n    );\n  }\n\n  return (\n    <Wrapper apiKey={GOOGLE_MAPS_API_KEY} render={render}>\n      {children}\n    </Wrapper>\n  );\n};\n\nexport { Map, Marker };","import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Paper,\n  Divider,\n  FormControlLabel,\n  Checkbox,\n  Radio,\n  RadioGroup,\n  Alert,\n  Snackbar,\n  CircularProgress\n} from '@mui/material';\nimport {\n  ArrowBack as ArrowBackIcon,\n  Save as SaveIcon,\n  Add as AddIcon,\n  Phone as PhoneIcon,\n  Email as EmailIcon,\n  LocationOn as LocationIcon,\n  Notes as NotesIcon\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport { customerApi } from '../services/api';\nimport { GoogleMapsProvider, Map, Marker, searchAddress } from '../services/GoogleMapsService';\n\ninterface NewCustomerFormData {\n  first_name: string;\n  last_name: string;\n  display_name: string;\n  email: string;\n  mobile_phone: string;\n  home_phone: string;\n  work_phone: string;\n  company: string;\n  role: 'homeowner' | 'business';\n  street: string;\n  unit: string;\n  city: string;\n  state: string;\n  zip: string;\n  address_notes: string;\n  notes: string;\n  send_notifications: boolean;\n  do_not_service: boolean;\n}\n\nconst NewCustomerForm: React.FC = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // Map state\n  const [mapCenter, setMapCenter] = useState({ lat: 40.7128, lng: -74.0060 }); // Default to NYC\n  const [markerPosition, setMarkerPosition] = useState({ lat: 40.7128, lng: -74.0060 });\n  \n  const [formData, setFormData] = useState<NewCustomerFormData>({\n    first_name: '',\n    last_name: '',\n    display_name: '',\n    email: '',\n    mobile_phone: '',\n    home_phone: '',\n    work_phone: '',\n    company: '',\n    role: 'homeowner',\n    street: '',\n    unit: '',\n    city: '',\n    state: '',\n    zip: '',\n    address_notes: '',\n    notes: '',\n    send_notifications: true,\n    do_not_service: false\n  });\n\n  const [errors, setErrors] = useState<Partial<Record<keyof NewCustomerFormData, string>>>({});\n\n  const handleInputChange = (field: keyof NewCustomerFormData, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear error for this field\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n    \n    // Auto-update display name\n    if (field === 'first_name' || field === 'last_name') {\n      const firstName = field === 'first_name' ? value as string : formData.first_name;\n      const lastName = field === 'last_name' ? value as string : formData.last_name;\n      setFormData(prev => ({\n        ...prev,\n        display_name: `${firstName} ${lastName}`.trim()\n      }));\n    }\n  };\n\n  const handleAddressSearch = async () => {\n    const fullAddress = `${formData.street} ${formData.unit}, ${formData.city}, ${formData.state} ${formData.zip}`.trim();\n    if (fullAddress.length > 5) {\n      const coordinates = await searchAddress(fullAddress);\n      if (coordinates) {\n        setMapCenter(coordinates);\n        setMarkerPosition(coordinates);\n      }\n    }\n  };\n\n  const handleMapAddressSelect = (address: string, coordinates: google.maps.LatLngLiteral) => {\n    // Parse the address and update form fields\n    const parts = address.split(', ');\n    if (parts.length >= 3) {\n      const streetPart = parts[0];\n      const cityPart = parts[parts.length - 3];\n      const stateZipPart = parts[parts.length - 2];\n      \n      const stateZipMatch = stateZipPart.match(/^(.+?)\\s+(\\d{5}(-\\d{4})?)$/);\n      \n      setFormData(prev => ({\n        ...prev,\n        street: streetPart,\n        city: cityPart,\n        state: stateZipMatch ? stateZipMatch[1] : '',\n        zip: stateZipMatch ? stateZipMatch[2] : ''\n      }));\n    }\n    \n    setMarkerPosition(coordinates);\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof NewCustomerFormData, string>> = {};\n    \n    if (!formData.first_name.trim()) newErrors.first_name = 'First name is required';\n    if (!formData.last_name.trim()) newErrors.last_name = 'Last name is required';\n    if (!formData.email.trim()) newErrors.email = 'Email is required';\n    if (!formData.mobile_phone.trim() && !formData.home_phone.trim() && !formData.work_phone.trim()) {\n      newErrors.mobile_phone = 'At least one phone number is required';\n    }\n    if (!formData.street.trim()) newErrors.street = 'Street address is required';\n    if (!formData.city.trim()) newErrors.city = 'City is required';\n    if (!formData.state.trim()) newErrors.state = 'State is required';\n    if (!formData.zip.trim()) newErrors.zip = 'ZIP code is required';\n    \n    // Email format validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (formData.email && !emailRegex.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSave = async () => {\n    if (!validateForm()) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Transform data to match backend API\n      const customerData = {\n        first_name: formData.first_name,\n        last_name: formData.last_name,\n        email: formData.email,\n        phone: formData.mobile_phone || formData.home_phone || formData.work_phone,\n        customer_type: formData.role === 'business' ? 'commercial' as const : 'residential' as const,\n        street_address: `${formData.street}${formData.unit ? ` ${formData.unit}` : ''}`,\n        city: formData.city,\n        state: formData.state,\n        zip_code: formData.zip,\n        company_name: formData.role === 'business' ? formData.company : '',\n        preferred_contact_method: 'email' as const,\n        notes: formData.notes\n      };\n      \n      const response = await customerApi.create(customerData);\n      setSuccess('Customer created successfully!');\n      \n      // Navigate to customer detail page after short delay\n      setTimeout(() => {\n        navigate(`/customers/${response.data.id}`);\n      }, 1500);\n      \n    } catch (err: any) {\n      console.error('Error creating customer:', err);\n      setError(err.response?.data?.message || 'Failed to create customer');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    navigate('/customers');\n  };\n\n  React.useEffect(() => {\n    // Search address when relevant fields change\n    const timeoutId = setTimeout(() => {\n      if (formData.street && formData.city && formData.state) {\n        handleAddressSearch();\n      }\n    }, 1000);\n    \n    return () => clearTimeout(timeoutId);\n  }, [formData.street, formData.city, formData.state, formData.zip]);\n\n  return (\n    <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\n        <Alert severity=\"error\" onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      </Snackbar>\n      <Snackbar open={!!success} autoHideDuration={6000} onClose={() => setSuccess(null)}>\n        <Alert severity=\"success\" onClose={() => setSuccess(null)}>\n          {success}\n        </Alert>\n      </Snackbar>\n\n      {/* Header */}\n      <Box display=\"flex\" alignItems=\"center\" mb={3}>\n        <IconButton onClick={handleCancel} sx={{ mr: 2 }}>\n          <ArrowBackIcon />\n        </IconButton>\n        <Typography variant=\"h4\" component=\"h1\" sx={{ flexGrow: 1 }}>\n          Add new customer\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          onClick={handleCancel}\n          sx={{ mr: 2 }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          startIcon={loading ? <CircularProgress size={20} /> : <SaveIcon />}\n          onClick={handleSave}\n          disabled={loading}\n        >\n          {loading ? 'Saving...' : 'Save'}\n        </Button>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Left Column - Form Fields */}\n        <Grid item xs={12} md={8}>\n          {/* Contact Info Section */}\n          <Card sx={{ mb: 3 }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={3}>\n                <Box\n                  sx={{\n                    width: 40,\n                    height: 40,\n                    borderRadius: '50%',\n                    bgcolor: 'primary.main',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    mr: 2\n                  }}\n                >\n                  <EmailIcon sx={{ color: 'white' }} />\n                </Box>\n                <Typography variant=\"h6\">Contact info</Typography>\n              </Box>\n\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    label=\"First name\"\n                    value={formData.first_name}\n                    onChange={(e) => handleInputChange('first_name', e.target.value)}\n                    error={!!errors.first_name}\n                    helperText={errors.first_name}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Last name\"\n                    value={formData.last_name}\n                    onChange={(e) => handleInputChange('last_name', e.target.value)}\n                    error={!!errors.last_name}\n                    helperText={errors.last_name}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Mobile phone\"\n                    value={formData.mobile_phone}\n                    onChange={(e) => handleInputChange('mobile_phone', e.target.value)}\n                    error={!!errors.mobile_phone}\n                    helperText={errors.mobile_phone}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Company\"\n                    value={formData.company}\n                    onChange={(e) => handleInputChange('company', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Display name (shown on invoices)\"\n                    value={formData.display_name}\n                    onChange={(e) => handleInputChange('display_name', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Home phone\"\n                    value={formData.home_phone}\n                    onChange={(e) => handleInputChange('home_phone', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Box>\n                    <Typography variant=\"body2\" sx={{ mb: 1 }}>Role</Typography>\n                    <RadioGroup\n                      row\n                      value={formData.role}\n                      onChange={(e) => handleInputChange('role', e.target.value as 'homeowner' | 'business')}\n                    >\n                      <FormControlLabel value=\"homeowner\" control={<Radio />} label=\"Homeowner\" />\n                      <FormControlLabel value=\"business\" control={<Radio />} label=\"Business\" />\n                    </RadioGroup>\n                  </Box>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    error={!!errors.email}\n                    helperText={errors.email}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Work phone\"\n                    value={formData.work_phone}\n                    onChange={(e) => handleInputChange('work_phone', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Box sx={{ pt: 2 }}>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={formData.do_not_service}\n                          onChange={(e) => handleInputChange('do_not_service', e.target.checked)}\n                        />\n                      }\n                      label={\n                        <Box>\n                          <Typography variant=\"body2\">Mark as \"Do not service\"</Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Notifications will be turned off and it won't be possible to schedule a job or estimate.\n                          </Typography>\n                        </Box>\n                      }\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n\n              <Box sx={{ mt: 2 }}>\n                <Button startIcon={<AddIcon />} size=\"small\">\n                  Email\n                </Button>\n                <Button startIcon={<AddIcon />} size=\"small\" sx={{ ml: 2 }}>\n                  Phone\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n\n          {/* Address Section */}\n          <Card sx={{ mb: 3 }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={3}>\n                <Box\n                  sx={{\n                    width: 40,\n                    height: 40,\n                    borderRadius: '50%',\n                    bgcolor: 'primary.main',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    mr: 2\n                  }}\n                >\n                  <LocationIcon sx={{ color: 'white' }} />\n                </Box>\n                <Typography variant=\"h6\">Address</Typography>\n              </Box>\n\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Street\"\n                    value={formData.street}\n                    onChange={(e) => handleInputChange('street', e.target.value)}\n                    error={!!errors.street}\n                    helperText={errors.street}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <TextField\n                    fullWidth\n                    label=\"Unit\"\n                    value={formData.unit}\n                    onChange={(e) => handleInputChange('unit', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <TextField\n                    fullWidth\n                    label=\"City\"\n                    value={formData.city}\n                    onChange={(e) => handleInputChange('city', e.target.value)}\n                    error={!!errors.city}\n                    helperText={errors.city}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} sm={2}>\n                  <FormControl fullWidth error={!!errors.state}>\n                    <InputLabel>State</InputLabel>\n                    <Select\n                      value={formData.state}\n                      label=\"State\"\n                      onChange={(e) => handleInputChange('state', e.target.value)}\n                    >\n                      <MenuItem value=\"NY\">NY</MenuItem>\n                      <MenuItem value=\"NJ\">NJ</MenuItem>\n                      <MenuItem value=\"CT\">CT</MenuItem>\n                      <MenuItem value=\"PA\">PA</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={2}>\n                  <TextField\n                    fullWidth\n                    label=\"Zip\"\n                    value={formData.zip}\n                    onChange={(e) => handleInputChange('zip', e.target.value)}\n                    error={!!errors.zip}\n                    helperText={errors.zip}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Address Notes\"\n                    multiline\n                    rows={2}\n                    value={formData.address_notes}\n                    onChange={(e) => handleInputChange('address_notes', e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n\n              <Box sx={{ mt: 2 }}>\n                <Button startIcon={<AddIcon />} size=\"small\">\n                  Address\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n\n          {/* Notes Section */}\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={3}>\n                <Box\n                  sx={{\n                    width: 40,\n                    height: 40,\n                    borderRadius: '50%',\n                    bgcolor: 'primary.main',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    mr: 2\n                  }}\n                >\n                  <NotesIcon sx={{ color: 'white' }} />\n                </Box>\n                <Typography variant=\"h6\">Notes</Typography>\n              </Box>\n\n              <TextField\n                fullWidth\n                multiline\n                rows={4}\n                value={formData.notes}\n                onChange={(e) => handleInputChange('notes', e.target.value)}\n                placeholder=\"Add notes about this customer...\"\n              />\n\n              <Box sx={{ mt: 2 }}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={formData.send_notifications}\n                      onChange={(e) => handleInputChange('send_notifications', e.target.checked)}\n                    />\n                  }\n                  label=\"Send notifications\"\n                />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Right Column - Map */}\n        <Grid item xs={12} md={4}>\n          <Box sx={{ position: 'sticky', top: 20 }}>\n            <Paper sx={{ p: 2, height: 400 }}>\n              <GoogleMapsProvider>\n                <Map\n                  center={mapCenter}\n                  zoom={15}\n                  onAddressSelect={handleMapAddressSelect}\n                >\n                  <Marker position={markerPosition} />\n                </Map>\n              </GoogleMapsProvider>\n            </Paper>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default NewCustomerForm;","import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport { errorLogger, withErrorHandling, ErrorType } from '../utils/errorHandling';\nimport { Customer, CustomerListItem, Property, CustomerContact, CustomerReview } from '../types/customer';\nimport { Job, JobListItem } from '../types/job';\nimport { Invoice, Estimate, Payment } from '../types/billing';\nimport { Item, Category, Supplier, StockMovement, PurchaseOrder } from '../types/inventory';\nimport { Appointment, TechnicianAvailability, ScheduleConflict } from '../types/scheduling';\n\n// Extend the axios config to include metadata\ninterface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {\n  metadata?: {\n    startTime: number;\n  };\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor for adding auth tokens, performance monitoring, and logging\napi.interceptors.request.use(\n  (config: ExtendedAxiosRequestConfig) => {\n    // Add performance timing metadata\n    config.metadata = { startTime: performance.now() };\n    \n    // Add auth token from secure auth service\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    // Add security headers\n    config.headers['X-Requested-With'] = 'XMLHttpRequest';\n    \n    // Add CSRF protection if available\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Log API requests in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🌐 API Request: ${config.method?.toUpperCase()} ${config.url}`, {\n        params: config.params,\n        data: config.data\n      });\n    }\n\n    return config;\n  },\n  (error) => {\n    errorLogger.handleError(error, {\n      component: 'APIService',\n      action: 'Request Interceptor',\n      userMessage: 'Failed to prepare API request'\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling, performance monitoring, and logging\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    // Calculate request duration for performance monitoring\n    const config = response.config as ExtendedAxiosRequestConfig;\n    const duration = performance.now() - (config.metadata?.startTime || 0);\n    \n    // Log slow requests\n    if (duration > 2000) {\n      console.warn(`⚠️ Slow API call: ${response.config.method?.toUpperCase()} ${response.config.url} took ${Math.round(duration)}ms`);\n      \n      // Log slow requests for production monitoring\n      if (process.env.NODE_ENV === 'production') {\n        errorLogger.handleError(new Error('Slow API response'), {\n          component: 'APIService',\n          action: `Slow Response: ${response.config.method?.toUpperCase()} ${response.config.url}`,\n          userMessage: 'API response was slower than expected'\n        });\n      }\n    }\n\n    // Log successful responses in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url} (${Math.round(duration)}ms)`, {\n        status: response.status,\n        data: response.data\n      });\n    }\n    \n    return response;\n  },\n  async (error: AxiosError) => {\n    // Handle different types of errors\n    const errorDetails = errorLogger.handleError(error, {\n      component: 'APIService',\n      action: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,\n      userMessage: getErrorMessage(error)\n    });\n\n    // Handle specific error cases\n    if (error.response?.status === 401) {\n      // Try to refresh token before giving up\n      const { authService } = await import('./authService');\n      const newToken = await authService.refreshToken();\n      \n      if (newToken && error.config) {\n        // Retry the original request with new token\n        error.config.headers.Authorization = `Bearer ${newToken}`;\n        return api.request(error.config);\n      } else {\n        // Refresh failed, logout user\n        authService.logout();\n      }\n    }\n\n    // Handle rate limiting with exponential backoff\n    if (error.response?.status === 429) {\n      const retryAfter = error.response.headers['retry-after'];\n      const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000;\n      \n      console.warn(`Rate limited. Retrying after ${delay}ms`);\n      \n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (error.config) {\n            api.request(error.config).then(resolve).catch(reject);\n          } else {\n            reject(error);\n          }\n        }, delay);\n      });\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get user-friendly error messages\nconst getErrorMessage = (error: AxiosError): string => {\n  if (!error.response) {\n    return 'Network connection error. Please check your internet connection.';\n  }\n\n  const status = error.response.status;\n  const data = error.response.data as any;\n\n  switch (status) {\n    case 400:\n      return data?.message || 'Invalid request. Please check your input.';\n    case 401:\n      return 'Your session has expired. Please log in again.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 422:\n      return data?.message || 'Please check your input and try again.';\n    case 429:\n      return 'Too many requests. Please wait a moment and try again.';\n    case 500:\n      return 'Server error occurred. Our team has been notified.';\n    case 502:\n    case 503:\n    case 504:\n      return 'Service temporarily unavailable. Please try again later.';\n    default:\n      return data?.message || 'An unexpected error occurred. Please try again.';\n  }\n};\n\n// Enhanced API wrapper with error handling\nconst createApiMethod = <T>(apiCall: () => Promise<AxiosResponse<T>>, context: string) => {\n  return withErrorHandling(apiCall, {\n    component: 'APIService',\n    action: context\n  });\n};\n\n// Customer API\nexport const customerApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerListItem[] } }> =>\n    api.get('/customers/', { params }),\n  \n  getById: (id: number): Promise<{ data: Customer }> =>\n    api.get(`/customers/${id}/`),\n  \n  create: (customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.post('/customers/', customer),\n  \n  update: (id: number, customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.put(`/customers/${id}/`, customer),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/customers/${id}/`),\n  \n  getProperties: (id: number): Promise<{ data: Property[] }> =>\n    api.get(`/customers/${id}/properties/`),\n  \n  addProperty: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post(`/customers/${id}/add_property/`, property),\n  \n  getContacts: (id: number): Promise<{ data: CustomerContact[] }> =>\n    api.get(`/customers/${id}/contacts/`),\n  \n  addContact: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.post(`/customers/${id}/add_contact/`, contact),\n  \n  getReviews: (id: number): Promise<{ data: CustomerReview[] }> =>\n    api.get(`/customers/${id}/reviews/`),\n  \n  addReview: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.post(`/customers/${id}/add_review/`, review),\n};\n\n// Property API\nexport const propertyApi = {\n  getAll: (params?: any): Promise<{ data: { results: Property[] } }> =>\n    api.get('/properties/', { params }),\n  \n  getById: (id: number): Promise<{ data: Property }> =>\n    api.get(`/properties/${id}/`),\n  \n  create: (property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post('/properties/', property),\n  \n  update: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.put(`/properties/${id}/`, property),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/properties/${id}/`),\n};\n\n// Contact API\nexport const contactApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerContact[] } }> =>\n    api.get('/contacts/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerContact }> =>\n    api.get(`/contacts/${id}/`),\n  \n  update: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.put(`/contacts/${id}/`, contact),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/contacts/${id}/`),\n};\n\n// Review API\nexport const reviewApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerReview[] } }> =>\n    api.get('/reviews/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerReview }> =>\n    api.get(`/reviews/${id}/`),\n  \n  update: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.put(`/reviews/${id}/`, review),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/reviews/${id}/`),\n};\n\n// Job API\nexport const jobApi = {\n  getAll: (params?: any): Promise<{ data: { results: JobListItem[] } }> =>\n    api.get('/jobs/', { params }),\n  \n  getById: (id: number): Promise<{ data: Job }> =>\n    api.get(`/jobs/${id}/`),\n  \n  create: (job: Partial<Job>): Promise<{ data: Job }> =>\n    api.post('/jobs/', job),\n  \n  update: (id: number, job: Partial<Job>): Promise<{ data: Job }> =>\n    api.put(`/jobs/${id}/`, job),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/jobs/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/update_status/`, { status }),\n  \n  assignTechnicians: (id: number, technician_ids: number[]): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/assign_technicians/`, { technician_ids }),\n};\n\n// Technician API\nexport const technicianApi = {\n  getAll: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/', { params }),\n  \n  getAvailable: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/available/', { params }),\n  \n  getById: (id: number): Promise<{ data: any }> =>\n    api.get(`/jobs/technicians/${id}/`),\n};\n\n// Billing API\nexport const billingApi = {\n  // Invoice endpoints\n  getInvoices: (params?: any): Promise<{ data: { results: Invoice[] } }> =>\n    api.get('/billing/invoices/', { params }),\n  \n  getInvoiceById: (id: number): Promise<{ data: Invoice }> =>\n    api.get(`/billing/invoices/${id}/`),\n  \n  createInvoice: (invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.post('/billing/invoices/', invoice),\n  \n  updateInvoice: (id: number, invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.put(`/billing/invoices/${id}/`, invoice),\n  \n  deleteInvoice: (id: number): Promise<void> =>\n    api.delete(`/billing/invoices/${id}/`),\n  \n  sendInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/invoices/${id}/send/`),\n  \n  // Estimate endpoints\n  getEstimates: (params?: any): Promise<{ data: { results: Estimate[] } }> =>\n    api.get('/billing/estimates/', { params }),\n  \n  getEstimateById: (id: number): Promise<{ data: Estimate }> =>\n    api.get(`/billing/estimates/${id}/`),\n  \n  createEstimate: (estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.post('/billing/estimates/', estimate),\n  \n  updateEstimate: (id: number, estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.put(`/billing/estimates/${id}/`, estimate),\n  \n  deleteEstimate: (id: number): Promise<void> =>\n    api.delete(`/billing/estimates/${id}/`),\n  \n  convertToInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/estimates/${id}/convert_to_invoice/`),\n  \n  // Payment endpoints\n  getPayments: (params?: any): Promise<{ data: { results: Payment[] } }> =>\n    api.get('/billing/payments/', { params }),\n  \n  createPayment: (payment: Partial<Payment>): Promise<{ data: Payment }> =>\n    api.post('/billing/payments/', payment),\n};\n\n// Inventory API\nexport const inventoryApi = {\n  // Item endpoints\n  getItems: (params?: any): Promise<{ data: { results: Item[] } }> =>\n    api.get('/inventory/items/', { params }),\n  \n  getItemById: (id: number): Promise<{ data: Item }> =>\n    api.get(`/inventory/items/${id}/`),\n  \n  createItem: (item: Partial<Item>): Promise<{ data: Item }> =>\n    api.post('/inventory/items/', item),\n  \n  updateItem: (id: number, item: Partial<Item>): Promise<{ data: Item }> =>\n    api.put(`/inventory/items/${id}/`, item),\n  \n  deleteItem: (id: number): Promise<void> =>\n    api.delete(`/inventory/items/${id}/`),\n  \n  adjustStock: (id: number, quantity: number, reason: string): Promise<{ data: Item }> =>\n    api.post(`/inventory/items/${id}/adjust_stock/`, { quantity, reason }),\n  \n  // Category endpoints\n  getCategories: (): Promise<{ data: Category[] }> =>\n    api.get('/inventory/categories/'),\n  \n  createCategory: (category: Partial<Category>): Promise<{ data: Category }> =>\n    api.post('/inventory/categories/', category),\n  \n  // Supplier endpoints\n  getSuppliers: (): Promise<{ data: Supplier[] }> =>\n    api.get('/inventory/suppliers/'),\n  \n  createSupplier: (supplier: Partial<Supplier>): Promise<{ data: Supplier }> =>\n    api.post('/inventory/suppliers/', supplier),\n  \n  // Stock movement endpoints\n  getStockMovements: (params?: any): Promise<{ data: { results: StockMovement[] } }> =>\n    api.get('/inventory/stock-movements/', { params }),\n  \n  // Purchase order endpoints\n  getPurchaseOrders: (params?: any): Promise<{ data: { results: PurchaseOrder[] } }> =>\n    api.get('/inventory/purchase-orders/', { params }),\n  \n  createPurchaseOrder: (po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.post('/inventory/purchase-orders/', po),\n  \n  updatePurchaseOrder: (id: number, po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.put(`/inventory/purchase-orders/${id}/`, po),\n};\n\n// Scheduling API\nexport const schedulingApi = {\n  // Appointment endpoints\n  getAppointments: (params?: any): Promise<{ data: { results: Appointment[] } }> =>\n    api.get('/scheduling/appointments/', { params }),\n  \n  getAppointmentById: (id: number): Promise<{ data: Appointment }> =>\n    api.get(`/scheduling/appointments/${id}/`),\n  \n  createAppointment: (appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.post('/scheduling/appointments/', appointment),\n  \n  updateAppointment: (id: number, appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.put(`/scheduling/appointments/${id}/`, appointment),\n  \n  deleteAppointment: (id: number): Promise<void> =>\n    api.delete(`/scheduling/appointments/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Appointment }> =>\n    api.patch(`/scheduling/appointments/${id}/update_status/`, { status }),\n  \n  // Technician availability endpoints\n  getTechnicianAvailability: (params?: any): Promise<{ data: { results: TechnicianAvailability[] } }> =>\n    api.get('/scheduling/technician-availability/', { params }),\n  \n  createAvailability: (availability: Partial<TechnicianAvailability>): Promise<{ data: TechnicianAvailability }> =>\n    api.post('/scheduling/technician-availability/', availability),\n  \n  // Schedule conflict endpoints\n  getScheduleConflicts: (): Promise<{ data: { results: ScheduleConflict[] } }> =>\n    api.get('/scheduling/schedule-conflicts/'),\n  \n  resolveConflict: (id: number, notes: string): Promise<{ data: ScheduleConflict }> =>\n    api.patch(`/scheduling/schedule-conflicts/${id}/resolve/`, { resolution_notes: notes }),\n};\n\n// Analytics API\nexport const analyticsApi = {\n  getBusinessOverview: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/business_overview/'),\n  \n  getFinancialSummary: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/financial_summary/'),\n  \n  getOperationalMetrics: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/operational_metrics/'),\n  \n  getCustomerInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/customer_insights/'),\n  \n  getInventoryInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/inventory_insights/'),\n};\n\nexport default api;"],"names":["GOOGLE_MAPS_API_KEY","process","REACT_APP_GOOGLE_MAPS_API_KEY","Map","_ref","center","zoom","children","onAddressSelect","ref","React","map","setMap","current","newMap","window","google","maps","styles","featureType","elementType","stylers","visibility","geocoder","Geocoder","addListener","event","latLng","geocode","location","results","status","address","formatted_address","coordinates","lat","lng","_jsx","style","width","height","child","Marker","_ref2","position","marker","setMarker","setPosition","render","Status","LOADING","display","alignItems","justifyContent","FAILURE","SUCCESS","GoogleMapsProvider","_ref3","Wrapper","apiKey","border","NewCustomerForm","navigate","useNavigate","loading","setLoading","useState","error","setError","success","setSuccess","mapCenter","setMapCenter","markerPosition","setMarkerPosition","formData","setFormData","first_name","last_name","display_name","email","mobile_phone","home_phone","work_phone","company","role","street","unit","city","state","zip","address_notes","notes","send_notifications","do_not_service","errors","setErrors","handleInputChange","field","value","prev","_objectSpread","newErrors","firstName","lastName","concat","trim","handleAddressSearch","async","fullAddress","length","Promise","resolve","geometry","searchAddress","handleCancel","timeoutId","setTimeout","clearTimeout","_jsxs","Box","sx","maxWidth","mx","p","Snackbar","open","autoHideDuration","onClose","Alert","severity","mb","IconButton","onClick","mr","ArrowBackIcon","Typography","variant","component","flexGrow","Button","startIcon","CircularProgress","size","SaveIcon","validateForm","test","Object","keys","customerData","phone","customer_type","street_address","zip_code","company_name","preferred_contact_method","response","customerApi","create","data","id","err","_err$response","_err$response$data","console","message","disabled","Grid","container","spacing","item","xs","md","Card","CardContent","borderRadius","bgcolor","EmailIcon","color","sm","TextField","fullWidth","label","onChange","e","target","helperText","required","RadioGroup","row","FormControlLabel","control","Radio","type","pt","Checkbox","checked","mt","AddIcon","ml","LocationIcon","FormControl","InputLabel","Select","MenuItem","multiline","rows","NotesIcon","placeholder","top","Paper","handleMapAddressSelect","parts","split","streetPart","cityPart","stateZipMatch","match","api","axios","baseURL","headers","timeout","interceptors","request","use","config","_document$querySelect","metadata","startTime","performance","now","token","localStorage","getItem","Authorization","csrfToken","document","querySelector","getAttribute","errorLogger","handleError","action","userMessage","reject","_config$metadata","duration","_response$config$meth","_response$config$meth2","warn","method","toUpperCase","url","Math","round","Error","_error$config","_error$config$method","_error$config2","_error$response","_error$response2","getErrorMessage","authService","newToken","refreshToken","logout","retryAfter","delay","parseInt","then","catch","getAll","params","get","getById","customer","post","update","put","delete","getProperties","addProperty","property","getContacts","addContact","contact","getReviews","addReview","review","propertyApi","jobApi","job","updateStatus","patch","assignTechnicians","technician_ids","technicianApi","getAvailable","inventoryApi","getItems","getItemById","createItem","updateItem","deleteItem","adjustStock","quantity","reason","getCategories","createCategory","category","getSuppliers","createSupplier","supplier","getStockMovements","getPurchaseOrders","createPurchaseOrder","po","updatePurchaseOrder","analyticsApi","getBusinessOverview","getFinancialSummary","getOperationalMetrics","getCustomerInsights","getInventoryInsights"],"sourceRoot":""}