{"version":3,"file":"static/js/817.4befa285.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","../node_modules/@mui/material/InputAdornment/InputAdornment.js","components/ValidatedTextField.tsx","components/ValidationDemo.tsx","utils/validation.ts"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _span;\nconst _excluded = [\"children\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  height: '0.01em',\n  // Fix IE11 flexbox alignment. To remove at some point.\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active\n}, ownerState.variant === 'filled' && {\n  // Styles applied to the root element if `variant=\"filled\"`.\n  [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n    marginTop: 16\n  }\n}, ownerState.position === 'start' && {\n  // Styles applied to the root element if `position=\"start\"`.\n  marginRight: 8\n}, ownerState.position === 'end' && {\n  // Styles applied to the root element if `position=\"end\"`.\n  marginLeft: 8\n}, ownerState.disablePointerEvents === true && {\n  // Styles applied to the root element if `disablePointerEvents={true}`.\n  pointerEvents: 'none'\n}));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n      children,\n      className,\n      component = 'div',\n      disablePointerEvents = false,\n      disableTypography = false,\n      position,\n      variant: variantProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = _extends({}, props, {\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, _extends({\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? ( /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        }))) : null, children]\n      })\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","import React from 'react';\nimport { TextField, TextFieldProps, InputAdornment } from '@mui/material';\nimport { validateField, ValidationRule, formatPhoneNumber, formatCurrency } from '../utils/validation';\n\ninterface ValidatedTextFieldProps extends Omit<TextFieldProps, 'error'> {\n  validationRules?: ValidationRule | ValidationRule[];\n  onValidationChange?: (field: string, isValid: boolean, error?: string) => void;\n  fieldName?: string;\n  formatType?: 'phone' | 'currency' | 'none';\n  showValidationIcon?: boolean;\n}\n\nconst ValidatedTextField: React.FC<ValidatedTextFieldProps> = ({\n  validationRules,\n  onValidationChange,\n  fieldName = '',\n  formatType = 'none',\n  showValidationIcon = false,\n  value,\n  onChange,\n  onBlur,\n  ...textFieldProps\n}) => {\n  const [error, setError] = React.useState<string | null>(null);\n  const [touched, setTouched] = React.useState(false);\n\n  const validateValue = React.useCallback((val: any) => {\n    if (!validationRules) return null;\n    \n    // Handle array of validation rules\n    if (Array.isArray(validationRules)) {\n      for (const rule of validationRules) {\n        const error = validateField(val, rule);\n        if (error) return error;\n      }\n      return null;\n    }\n    \n    // Handle single validation rule\n    return validateField(val, validationRules);\n  }, [validationRules]);\n\n  const formatValue = (val: string, type: string): string => {\n    switch (type) {\n      case 'phone':\n        return formatPhoneNumber(val);\n      case 'currency':\n        // Only format on blur, not during typing\n        return val;\n      default:\n        return val;\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let newValue = event.target.value;\n    \n    // Apply real-time formatting for some types\n    if (formatType === 'phone') {\n      newValue = formatValue(newValue, formatType);\n      event.target.value = newValue;\n    }\n\n    // Validate if field has been touched\n    if (touched) {\n      const validationError = validateValue(newValue);\n      setError(validationError);\n      \n      if (onValidationChange && fieldName) {\n        onValidationChange(fieldName, !validationError, validationError || undefined);\n      }\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    setTouched(true);\n    \n    let newValue = event.target.value;\n    \n    // Apply formatting on blur\n    if (formatType === 'currency' && newValue) {\n      const numValue = parseFloat(newValue);\n      if (!isNaN(numValue)) {\n        newValue = numValue.toFixed(2);\n        event.target.value = newValue;\n      }\n    }\n\n    const validationError = validateValue(newValue);\n    setError(validationError);\n    \n    if (onValidationChange && fieldName) {\n      onValidationChange(fieldName, !validationError, validationError || undefined);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const getInputAdornment = () => {\n    if (formatType === 'currency') {\n      return {\n        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n      };\n    }\n    \n    if (showValidationIcon && touched) {\n      return {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            {error ? '❌' : '✅'}\n          </InputAdornment>\n        )\n      };\n    }\n    \n    return {};\n  };\n\n  return (\n    <TextField\n      {...textFieldProps}\n      value={value}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      error={touched && !!error}\n      helperText={touched && error ? error : textFieldProps.helperText}\n      InputProps={{\n        ...textFieldProps.InputProps,\n        ...getInputAdornment()\n      }}\n    />\n  );\n};\n\nexport default ValidatedTextField;","import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText\n} from '@mui/material';\nimport ValidatedTextField from './ValidatedTextField';\nimport { validateForm, commonValidationRules } from '../utils/validation';\n\nconst ValidationDemo: React.FC = () => {\n  const [formData, setFormData] = useState({\n    customerName: '',\n    email: '',\n    phone: '',\n    address: '',\n    currency: '',\n    duration: '',\n    password: '',\n    confirmPassword: '',\n    priority: 'medium',\n    description: ''\n  });\n\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [validationResults, setValidationResults] = useState<Record<string, boolean>>({});\n  const [submitAttempted, setSubmitAttempted] = useState(false);\n\n  const handleFieldChange = (fieldName: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [fieldName]: event.target.value\n    }));\n  };\n\n  const handleValidationChange = (field: string, isValid: boolean, error?: string) => {\n    setValidationResults(prev => ({\n      ...prev,\n      [field]: isValid\n    }));\n\n    if (error) {\n      setFormErrors(prev => ({\n        ...prev,\n        [field]: error\n      }));\n    } else {\n      setFormErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  const handleSubmit = () => {\n    setSubmitAttempted(true);\n\n    const validationRules = {\n      customerName: commonValidationRules.customerName,\n      email: commonValidationRules.email(),\n      phone: commonValidationRules.phone(),\n      address: commonValidationRules.address,\n      currency: commonValidationRules.currency,\n      duration: commonValidationRules.duration,\n      password: commonValidationRules.strongPassword,\n      confirmPassword: {\n        required: true,\n        custom: (value: string) => {\n          if (value !== formData.password) {\n            return 'Passwords do not match';\n          }\n          return null;\n        }\n      },\n      description: commonValidationRules.description,\n      priority: { required: true }\n    };\n\n    const result = validateForm(formData, validationRules);\n    setFormErrors(result.errors);\n\n    if (result.isValid) {\n      alert('Form is valid! ✅\\n\\nData:\\n' + JSON.stringify(formData, null, 2));\n    } else {\n      alert('Form has errors! ❌\\n\\nPlease fix the following:\\n' + Object.values(result.errors).join('\\n'));\n    }\n  };\n\n  const getOverallValidation = () => {\n    const totalFields = Object.keys(validationResults).length;\n    const validFields = Object.values(validationResults).filter(Boolean).length;\n    \n    return {\n      percentage: totalFields > 0 ? Math.round((validFields / totalFields) * 100) : 0,\n      validCount: validFields,\n      totalCount: totalFields\n    };\n  };\n\n  const validation = getOverallValidation();\n\n  return (\n    <Box sx={{ p: 3, height: '100vh', overflow: 'auto' }}>\n      <Typography variant=\"h4\" gutterBottom>\n        🔍 Form Validation Demo\n      </Typography>\n      \n      <Typography variant=\"body1\" color=\"textSecondary\" paragraph>\n        This form demonstrates comprehensive validation patterns including real-time validation, \n        formatting, and error handling. All validation rules are reusable across the application.\n      </Typography>\n\n      {/* Validation Summary */}\n      <Card sx={{ mb: 3, bgcolor: validation.percentage === 100 ? 'success.light' : 'warning.light' }}>\n        <CardContent>\n          <Typography variant=\"h6\">\n            Validation Status: {validation.validCount}/{validation.totalCount} fields valid ({validation.percentage}%)\n          </Typography>\n          {submitAttempted && Object.keys(formErrors).length > 0 && (\n            <Alert severity=\"error\" sx={{ mt: 2 }}>\n              {Object.keys(formErrors).length} validation error(s) found. Please check the form below.\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      <Grid container spacing={3}>\n        {/* Personal Information */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Personal Information\n          </Typography>\n          <Divider sx={{ mb: 2 }} />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Customer Name *\"\n            value={formData.customerName}\n            onChange={handleFieldChange('customerName')}\n            validationRules={commonValidationRules.customerName}\n            onValidationChange={handleValidationChange}\n            fieldName=\"customerName\"\n            showValidationIcon\n            helperText=\"Enter customer's full name (2-100 characters)\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Email Address *\"\n            type=\"email\"\n            value={formData.email}\n            onChange={handleFieldChange('email')}\n            validationRules={commonValidationRules.email()}\n            onValidationChange={handleValidationChange}\n            fieldName=\"email\"\n            showValidationIcon\n            helperText=\"Valid email format required\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Phone Number *\"\n            value={formData.phone}\n            onChange={handleFieldChange('phone')}\n            validationRules={commonValidationRules.phone()}\n            onValidationChange={handleValidationChange}\n            fieldName=\"phone\"\n            formatType=\"phone\"\n            showValidationIcon\n            helperText=\"US phone format: (555) 123-4567\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth error={submitAttempted && !formData.priority}>\n            <InputLabel>Priority *</InputLabel>\n            <Select\n              value={formData.priority}\n              label=\"Priority *\"\n              onChange={(e) => setFormData(prev => ({ ...prev, priority: e.target.value }))}\n            >\n              <MenuItem value=\"low\">Low</MenuItem>\n              <MenuItem value=\"medium\">Medium</MenuItem>\n              <MenuItem value=\"high\">High</MenuItem>\n              <MenuItem value=\"emergency\">Emergency</MenuItem>\n            </Select>\n            {submitAttempted && !formData.priority && (\n              <FormHelperText>Priority is required</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Address *\"\n            value={formData.address}\n            onChange={handleFieldChange('address')}\n            validationRules={commonValidationRules.address}\n            onValidationChange={handleValidationChange}\n            fieldName=\"address\"\n            showValidationIcon\n            helperText=\"Complete street address (minimum 10 characters) - e.g., '123 Main Street'\"\n          />\n        </Grid>\n\n        {/* Financial Information */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\n            Financial & Time Information\n          </Typography>\n          <Divider sx={{ mb: 2 }} />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Amount *\"\n            type=\"number\"\n            value={formData.currency}\n            onChange={handleFieldChange('currency')}\n            validationRules={commonValidationRules.currency}\n            onValidationChange={handleValidationChange}\n            fieldName=\"currency\"\n            formatType=\"currency\"\n            showValidationIcon\n            helperText=\"Enter amount (minimum $0.00)\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Duration (hours) *\"\n            type=\"number\"\n            value={formData.duration}\n            onChange={handleFieldChange('duration')}\n            validationRules={commonValidationRules.duration}\n            onValidationChange={handleValidationChange}\n            fieldName=\"duration\"\n            showValidationIcon\n            helperText=\"Duration in hours (0.5 - 24)\"\n            inputProps={{ min: 0.5, max: 24, step: 0.5 }}\n          />\n        </Grid>\n\n        {/* Security Information */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\n            Security Information\n          </Typography>\n          <Divider sx={{ mb: 2 }} />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Password *\"\n            type=\"password\"\n            value={formData.password}\n            onChange={handleFieldChange('password')}\n            validationRules={commonValidationRules.strongPassword}\n            onValidationChange={handleValidationChange}\n            fieldName=\"password\"\n            showValidationIcon\n            helperText=\"Strong password: 8+ chars, uppercase, lowercase, number, special char\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <ValidatedTextField\n            fullWidth\n            label=\"Confirm Password *\"\n            type=\"password\"\n            value={formData.confirmPassword}\n            onChange={handleFieldChange('confirmPassword')}\n            validationRules={{\n              required: true,\n              custom: (value: string) => {\n                if (value !== formData.password) {\n                  return 'Passwords do not match';\n                }\n                return null;\n              }\n            }}\n            onValidationChange={handleValidationChange}\n            fieldName=\"confirmPassword\"\n            showValidationIcon\n            helperText=\"Must match the password above\"\n          />\n        </Grid>\n\n        {/* Description */}\n        <Grid item xs={12}>\n          <ValidatedTextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Description *\"\n            value={formData.description}\n            onChange={handleFieldChange('description')}\n            validationRules={commonValidationRules.description}\n            onValidationChange={handleValidationChange}\n            fieldName=\"description\"\n            showValidationIcon\n            helperText=\"Detailed description (10-1000 characters)\"\n          />\n        </Grid>\n\n        {/* Submit Button */}\n        <Grid item xs={12}>\n          <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              onClick={handleSubmit}\n              color={validation.percentage === 100 ? 'success' : 'primary'}\n            >\n              {validation.percentage === 100 ? '✅ Submit Valid Form' : '🔍 Validate Form'}\n            </Button>\n            \n            <Button\n              variant=\"outlined\"\n              size=\"large\"\n              onClick={() => {\n                setFormData({\n                  customerName: '',\n                  email: '',\n                  phone: '',\n                  address: '',\n                  currency: '',\n                  duration: '',\n                  password: '',\n                  confirmPassword: '',\n                  priority: 'medium',\n                  description: ''\n                });\n                setFormErrors({});\n                setValidationResults({});\n                setSubmitAttempted(false);\n              }}\n            >\n              🔄 Reset Form\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ValidationDemo;","import React from 'react';\n\nexport interface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: RegExp;\n  min?: number;\n  max?: number;\n  custom?: (value: any) => string | null;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: Record<string, string>;\n}\n\nexport const validateField = (value: any, rules: ValidationRule): string | null => {\n  if (rules.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\n    return 'This field is required';\n  }\n\n  if (!value) return null;\n\n  if (rules.minLength && typeof value === 'string' && value.length < rules.minLength) {\n    return `Must be at least ${rules.minLength} characters`;\n  }\n\n  if (rules.maxLength && typeof value === 'string' && value.length > rules.maxLength) {\n    return `Must be no more than ${rules.maxLength} characters`;\n  }\n\n  if (rules.pattern && typeof value === 'string' && !rules.pattern.test(value)) {\n    return 'Invalid format';\n  }\n\n  if (rules.min && typeof value === 'number' && value < rules.min) {\n    return `Must be at least ${rules.min}`;\n  }\n\n  if (rules.max && typeof value === 'number' && value > rules.max) {\n    return `Must be no more than ${rules.max}`;\n  }\n\n  if (rules.custom) {\n    return rules.custom(value);\n  }\n\n  return null;\n};\n\nexport const validateForm = (data: Record<string, any>, rules: Record<string, ValidationRule>): ValidationResult => {\n  const errors: Record<string, string> = {};\n\n  for (const [field, fieldRules] of Object.entries(rules)) {\n    const error = validateField(data[field], fieldRules);\n    if (error) {\n      errors[field] = error;\n    }\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Common validation patterns\nexport const validationPatterns = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  phone: /^[\\+]?[1-9][\\d]{0,15}$/,\n  phoneUS: /^(\\+1)?[\\s\\-]?\\(?([0-9]{3})\\)?[\\s\\-]?([0-9]{3})[\\s\\-]?([0-9]{4})$/,\n  postalCode: /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/,\n  zipCode: /^\\d{5}(-\\d{4})?$/,\n  url: /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  currency: /^\\d+(\\.\\d{1,2})?$/,\n  jobNumber: /^JOB-\\d{4}-\\d{4}$/,\n  invoiceNumber: /^INV-\\d{4}-\\d{4}$/,\n  strongPassword: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/\n};\n\n// Helper functions to create validation rules\nexport const commonValidationRules = {\n  required: (message?: string): ValidationRule => ({\n    required: true,\n    custom: (value: any) => {\n      if (!value || (typeof value === 'string' && value.trim() === '')) {\n        return message || 'This field is required';\n      }\n      return null;\n    }\n  }),\n  \n  minLength: (length: number, message?: string): ValidationRule => ({\n    minLength: length,\n    custom: (value: string) => {\n      if (value && value.length < length) {\n        return message || `Must be at least ${length} characters`;\n      }\n      return null;\n    }\n  }),\n  \n  maxLength: (length: number, message?: string): ValidationRule => ({\n    maxLength: length,\n    custom: (value: string) => {\n      if (value && value.length > length) {\n        return message || `Must be no more than ${length} characters`;\n      }\n      return null;\n    }\n  }),\n  \n  email: (message?: string): ValidationRule => ({\n    pattern: validationPatterns.email,\n    custom: (value: string) => {\n      if (value && !validationPatterns.email.test(value)) {\n        return message || 'Please enter a valid email address';\n      }\n      return null;\n    }\n  }),\n  \n  phone: (message?: string): ValidationRule => ({\n    pattern: validationPatterns.phoneUS,\n    custom: (value: string) => {\n      if (value && !validationPatterns.phoneUS.test(value)) {\n        return message || 'Please enter a valid phone number (e.g., (555) 123-4567)';\n      }\n      return null;\n    }\n  }),\n\n  // Pre-defined validation rule objects\n  emailRule: { \n    required: true, \n    pattern: validationPatterns.email,\n    custom: (value: string) => {\n      if (value && !validationPatterns.email.test(value)) {\n        return 'Please enter a valid email address';\n      }\n      return null;\n    }\n  },\n  phoneRule: { \n    required: true, \n    pattern: validationPatterns.phoneUS,\n    custom: (value: string) => {\n      if (value && !validationPatterns.phoneUS.test(value)) {\n        return 'Please enter a valid phone number (e.g., (555) 123-4567)';\n      }\n      return null;\n    }\n  },\n  currencyRule: {\n    required: true,\n    min: 0,\n    custom: (value: number) => {\n      if (value !== undefined && value < 0) {\n        return 'Amount cannot be negative';\n      }\n      return null;\n    }\n  },\n  \n  // Backward compatibility aliases\n  currency: {\n    required: true,\n    min: 0,\n    custom: (value: number) => {\n      if (value !== undefined && value < 0) {\n        return 'Amount cannot be negative';\n      }\n      return null;\n    }\n  },\n  duration: {\n    required: true,\n    min: 0.5,\n    max: 24,\n    custom: (value: number) => {\n      if (value !== undefined && (value < 0.5 || value > 24)) {\n        return 'Duration must be between 0.5 and 24 hours';\n      }\n      return null;\n    }\n  },\n  postalCode: {\n    pattern: validationPatterns.postalCode,\n    custom: (value: string) => {\n      if (value && !validationPatterns.postalCode.test(value) && !validationPatterns.zipCode.test(value)) {\n        return 'Please enter a valid postal/zip code';\n      }\n      return null;\n    }\n  },\n  strongPassword: {\n    required: true,\n    minLength: 8,\n    pattern: validationPatterns.strongPassword,\n    custom: (value: string) => {\n      if (value && !validationPatterns.strongPassword.test(value)) {\n        return 'Password must contain at least 8 characters with uppercase, lowercase, number, and special character';\n      }\n      return null;\n    }\n  },\n  customerName: {\n    required: true,\n    minLength: 2,\n    maxLength: 100,\n    custom: (value: string) => {\n      if (value && value.trim().length < 2) {\n        return 'Name must be at least 2 characters';\n      }\n      return null;\n    }\n  },\n  address: {\n    required: true,\n    minLength: 10,\n    maxLength: 255,\n    custom: (value: string) => {\n      if (value && value.trim().length < 10) {\n        return 'Please enter a complete address';\n      }\n      return null;\n    }\n  },\n  description: {\n    required: true,\n    minLength: 10,\n    maxLength: 1000,\n    custom: (value: string) => {\n      if (value && value.trim().length < 10) {\n        return 'Description must be at least 10 characters';\n      }\n      return null;\n    }\n  }\n};\n\n// Utility functions for specific validations\nexport const validateEmailFormat = (email: string): boolean => {\n  return validationPatterns.email.test(email);\n};\n\nexport const validatePhoneFormat = (phone: string): boolean => {\n  return validationPatterns.phoneUS.test(phone);\n};\n\nexport const validateCurrencyFormat = (amount: string): boolean => {\n  return validationPatterns.currency.test(amount);\n};\n\nexport const formatPhoneNumber = (phone: string): string => {\n  const digits = phone.replace(/\\D/g, '');\n  if (digits.length === 10) {\n    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n  }\n  if (digits.length === 11 && digits[0] === '1') {\n    return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n  }\n  return phone;\n};\n\nexport const formatCurrency = (amount: number | string): string => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(numAmount);\n};\n\n// Real-time validation hook\nexport const useFormValidation = (initialData: Record<string, any>, validationRules: Record<string, ValidationRule>) => {\n  const [data, setData] = React.useState(initialData);\n  const [errors, setErrors] = React.useState<Record<string, string>>({});\n  const [touched, setTouched] = React.useState<Record<string, boolean>>({});\n\n  const validateSingleField = (field: string, value: any) => {\n    const rule = validationRules[field];\n    if (!rule) return null;\n    return validateField(value, rule);\n  };\n\n  const handleChange = (field: string, value: any) => {\n    setData(prev => ({ ...prev, [field]: value }));\n    \n    // Real-time validation\n    if (touched[field]) {\n      const error = validateSingleField(field, value);\n      setErrors(prev => {\n        if (error) {\n          return { ...prev, [field]: error };\n        } else {\n          const newErrors = { ...prev };\n          delete newErrors[field];\n          return newErrors;\n        }\n      });\n    }\n  };\n\n  const handleBlur = (field: string) => {\n    setTouched(prev => ({ ...prev, [field]: true }));\n    const error = validateSingleField(field, data[field]);\n    if (error) {\n      setErrors(prev => ({ ...prev, [field]: error }));\n    }\n  };\n\n  const validateAll = (): boolean => {\n    const result = validateForm(data, validationRules);\n    setErrors(result.errors);\n    setTouched(Object.keys(validationRules).reduce((acc, key) => ({ ...acc, [key]: true }), {}));\n    return result.isValid;\n  };\n\n  const reset = () => {\n    setData(initialData);\n    setErrors({});\n    setTouched({});\n  };\n\n  return {\n    data,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    validateAll,\n    reset,\n    isValid: Object.keys(errors).length === 0\n  };\n};"],"names":["getInputAdornmentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_span","_excluded","InputAdornmentRoot","styled","name","overridesResolver","props","styles","ownerState","root","concat","capitalize","position","disablePointerEvents","variant","_ref","theme","_extends","display","height","maxHeight","alignItems","whiteSpace","color","vars","palette","action","active","inputAdornmentClasses","positionStart","hiddenLabel","marginTop","marginRight","marginLeft","pointerEvents","React","inProps","ref","useDefaultProps","children","className","component","disableTypography","variantProp","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","size","classes","slots","composeClasses","useUtilityClasses","_jsx","FormControlContext","Provider","value","as","clsx","_jsxs","Typography","validationRules","onValidationChange","fieldName","formatType","showValidationIcon","onChange","onBlur","textFieldProps","_objectWithoutProperties","error","setError","touched","setTouched","validateValue","val","Array","isArray","rule","validateField","TextField","_objectSpread","event","newValue","target","formatValue","formatPhoneNumber","validationError","undefined","numValue","parseFloat","isNaN","toFixed","helperText","InputProps","startAdornment","InputAdornment","endAdornment","ValidationDemo","formData","setFormData","useState","customerName","email","phone","address","currency","duration","password","confirmPassword","priority","description","formErrors","setFormErrors","validationResults","setValidationResults","submitAttempted","setSubmitAttempted","handleFieldChange","prev","handleValidationChange","field","isValid","newErrors","validation","getOverallValidation","totalFields","Object","keys","length","validFields","values","filter","Boolean","percentage","Math","round","validCount","totalCount","Box","sx","p","overflow","gutterBottom","paragraph","Card","mb","bgcolor","CardContent","Alert","severity","mt","Grid","container","spacing","item","xs","Divider","md","ValidatedTextField","fullWidth","label","commonValidationRules","type","FormControl","InputLabel","Select","e","MenuItem","FormHelperText","inputProps","min","max","step","strongPassword","required","custom","multiline","rows","gap","Button","onClick","handleSubmit","result","validateForm","errors","alert","JSON","stringify","join","rules","trim","minLength","maxLength","pattern","test","data","fieldRules","entries","validationPatterns","phoneUS","postalCode","zipCode","url","alphanumeric","jobNumber","invoiceNumber","message","emailRule","phoneRule","currencyRule","digits","replace","slice"],"sourceRoot":""}