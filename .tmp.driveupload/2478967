{"version":3,"file":"static/js/757.aa78ab1e.chunk.js","mappings":"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","sources":["services/api.ts","utils/validation.ts","components/SchedulingCalendar.tsx"],"sourcesContent":["import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport { errorLogger, withErrorHandling, ErrorType } from '../utils/errorHandling';\nimport { Customer, CustomerListItem, Property, CustomerContact, CustomerReview } from '../types/customer';\nimport { Job, JobListItem } from '../types/job';\nimport { Invoice, Estimate, Payment } from '../types/billing';\nimport { Item, Category, Supplier, StockMovement, PurchaseOrder } from '../types/inventory';\nimport { Appointment, TechnicianAvailability, ScheduleConflict } from '../types/scheduling';\n\n// Extend the axios config to include metadata\ninterface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {\n  metadata?: {\n    startTime: number;\n  };\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor for adding auth tokens, performance monitoring, and logging\napi.interceptors.request.use(\n  (config: ExtendedAxiosRequestConfig) => {\n    // Add performance timing metadata\n    config.metadata = { startTime: performance.now() };\n    \n    // Add auth token from secure auth service\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    // Add security headers\n    config.headers['X-Requested-With'] = 'XMLHttpRequest';\n    \n    // Add CSRF protection if available\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Log API requests in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🌐 API Request: ${config.method?.toUpperCase()} ${config.url}`, {\n        params: config.params,\n        data: config.data\n      });\n    }\n\n    return config;\n  },\n  (error) => {\n    errorLogger.handleError(error, {\n      component: 'APIService',\n      action: 'Request Interceptor',\n      userMessage: 'Failed to prepare API request'\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling, performance monitoring, and logging\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    // Calculate request duration for performance monitoring\n    const config = response.config as ExtendedAxiosRequestConfig;\n    const duration = performance.now() - (config.metadata?.startTime || 0);\n    \n    // Log slow requests\n    if (duration > 2000) {\n      console.warn(`⚠️ Slow API call: ${response.config.method?.toUpperCase()} ${response.config.url} took ${Math.round(duration)}ms`);\n      \n      // Log slow requests for production monitoring\n      if (process.env.NODE_ENV === 'production') {\n        errorLogger.handleError(new Error('Slow API response'), {\n          component: 'APIService',\n          action: `Slow Response: ${response.config.method?.toUpperCase()} ${response.config.url}`,\n          userMessage: 'API response was slower than expected'\n        });\n      }\n    }\n\n    // Log successful responses in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url} (${Math.round(duration)}ms)`, {\n        status: response.status,\n        data: response.data\n      });\n    }\n    \n    return response;\n  },\n  async (error: AxiosError) => {\n    // Handle different types of errors\n    const errorDetails = errorLogger.handleError(error, {\n      component: 'APIService',\n      action: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,\n      userMessage: getErrorMessage(error)\n    });\n\n    // Handle specific error cases\n    if (error.response?.status === 401) {\n      // Try to refresh token before giving up\n      const { authService } = await import('./authService');\n      const newToken = await authService.refreshToken();\n      \n      if (newToken && error.config) {\n        // Retry the original request with new token\n        error.config.headers.Authorization = `Bearer ${newToken}`;\n        return api.request(error.config);\n      } else {\n        // Refresh failed, logout user\n        authService.logout();\n      }\n    }\n\n    // Handle rate limiting with exponential backoff\n    if (error.response?.status === 429) {\n      const retryAfter = error.response.headers['retry-after'];\n      const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000;\n      \n      console.warn(`Rate limited. Retrying after ${delay}ms`);\n      \n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (error.config) {\n            api.request(error.config).then(resolve).catch(reject);\n          } else {\n            reject(error);\n          }\n        }, delay);\n      });\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get user-friendly error messages\nconst getErrorMessage = (error: AxiosError): string => {\n  if (!error.response) {\n    return 'Network connection error. Please check your internet connection.';\n  }\n\n  const status = error.response.status;\n  const data = error.response.data as any;\n\n  switch (status) {\n    case 400:\n      return data?.message || 'Invalid request. Please check your input.';\n    case 401:\n      return 'Your session has expired. Please log in again.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 422:\n      return data?.message || 'Please check your input and try again.';\n    case 429:\n      return 'Too many requests. Please wait a moment and try again.';\n    case 500:\n      return 'Server error occurred. Our team has been notified.';\n    case 502:\n    case 503:\n    case 504:\n      return 'Service temporarily unavailable. Please try again later.';\n    default:\n      return data?.message || 'An unexpected error occurred. Please try again.';\n  }\n};\n\n// Enhanced API wrapper with error handling\nconst createApiMethod = <T>(apiCall: () => Promise<AxiosResponse<T>>, context: string) => {\n  return withErrorHandling(apiCall, {\n    component: 'APIService',\n    action: context\n  });\n};\n\n// Customer API\nexport const customerApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerListItem[] } }> =>\n    api.get('/customers/', { params }),\n  \n  getById: (id: number): Promise<{ data: Customer }> =>\n    api.get(`/customers/${id}/`),\n  \n  create: (customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.post('/customers/', customer),\n  \n  update: (id: number, customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.put(`/customers/${id}/`, customer),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/customers/${id}/`),\n  \n  getProperties: (id: number): Promise<{ data: Property[] }> =>\n    api.get(`/customers/${id}/properties/`),\n  \n  addProperty: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post(`/customers/${id}/add_property/`, property),\n  \n  getContacts: (id: number): Promise<{ data: CustomerContact[] }> =>\n    api.get(`/customers/${id}/contacts/`),\n  \n  addContact: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.post(`/customers/${id}/add_contact/`, contact),\n  \n  getReviews: (id: number): Promise<{ data: CustomerReview[] }> =>\n    api.get(`/customers/${id}/reviews/`),\n  \n  addReview: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.post(`/customers/${id}/add_review/`, review),\n};\n\n// Property API\nexport const propertyApi = {\n  getAll: (params?: any): Promise<{ data: { results: Property[] } }> =>\n    api.get('/properties/', { params }),\n  \n  getById: (id: number): Promise<{ data: Property }> =>\n    api.get(`/properties/${id}/`),\n  \n  create: (property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post('/properties/', property),\n  \n  update: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.put(`/properties/${id}/`, property),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/properties/${id}/`),\n};\n\n// Contact API\nexport const contactApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerContact[] } }> =>\n    api.get('/contacts/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerContact }> =>\n    api.get(`/contacts/${id}/`),\n  \n  update: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.put(`/contacts/${id}/`, contact),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/contacts/${id}/`),\n};\n\n// Review API\nexport const reviewApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerReview[] } }> =>\n    api.get('/reviews/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerReview }> =>\n    api.get(`/reviews/${id}/`),\n  \n  update: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.put(`/reviews/${id}/`, review),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/reviews/${id}/`),\n};\n\n// Job API\nexport const jobApi = {\n  getAll: (params?: any): Promise<{ data: { results: JobListItem[] } }> =>\n    api.get('/jobs/', { params }),\n  \n  getById: (id: number): Promise<{ data: Job }> =>\n    api.get(`/jobs/${id}/`),\n  \n  create: (job: Partial<Job>): Promise<{ data: Job }> =>\n    api.post('/jobs/', job),\n  \n  update: (id: number, job: Partial<Job>): Promise<{ data: Job }> =>\n    api.put(`/jobs/${id}/`, job),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/jobs/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/update_status/`, { status }),\n  \n  assignTechnicians: (id: number, technician_ids: number[]): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/assign_technicians/`, { technician_ids }),\n};\n\n// Technician API\nexport const technicianApi = {\n  getAll: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/', { params }),\n  \n  getAvailable: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/available/', { params }),\n  \n  getById: (id: number): Promise<{ data: any }> =>\n    api.get(`/jobs/technicians/${id}/`),\n};\n\n// Billing API\nexport const billingApi = {\n  // Invoice endpoints\n  getInvoices: (params?: any): Promise<{ data: { results: Invoice[] } }> =>\n    api.get('/billing/invoices/', { params }),\n  \n  getInvoiceById: (id: number): Promise<{ data: Invoice }> =>\n    api.get(`/billing/invoices/${id}/`),\n  \n  createInvoice: (invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.post('/billing/invoices/', invoice),\n  \n  updateInvoice: (id: number, invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.put(`/billing/invoices/${id}/`, invoice),\n  \n  deleteInvoice: (id: number): Promise<void> =>\n    api.delete(`/billing/invoices/${id}/`),\n  \n  sendInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/invoices/${id}/send/`),\n  \n  // Estimate endpoints\n  getEstimates: (params?: any): Promise<{ data: { results: Estimate[] } }> =>\n    api.get('/billing/estimates/', { params }),\n  \n  getEstimateById: (id: number): Promise<{ data: Estimate }> =>\n    api.get(`/billing/estimates/${id}/`),\n  \n  createEstimate: (estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.post('/billing/estimates/', estimate),\n  \n  updateEstimate: (id: number, estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.put(`/billing/estimates/${id}/`, estimate),\n  \n  deleteEstimate: (id: number): Promise<void> =>\n    api.delete(`/billing/estimates/${id}/`),\n  \n  convertToInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/estimates/${id}/convert_to_invoice/`),\n  \n  // Payment endpoints\n  getPayments: (params?: any): Promise<{ data: { results: Payment[] } }> =>\n    api.get('/billing/payments/', { params }),\n  \n  createPayment: (payment: Partial<Payment>): Promise<{ data: Payment }> =>\n    api.post('/billing/payments/', payment),\n};\n\n// Inventory API\nexport const inventoryApi = {\n  // Item endpoints\n  getItems: (params?: any): Promise<{ data: { results: Item[] } }> =>\n    api.get('/inventory/items/', { params }),\n  \n  getItemById: (id: number): Promise<{ data: Item }> =>\n    api.get(`/inventory/items/${id}/`),\n  \n  createItem: (item: Partial<Item>): Promise<{ data: Item }> =>\n    api.post('/inventory/items/', item),\n  \n  updateItem: (id: number, item: Partial<Item>): Promise<{ data: Item }> =>\n    api.put(`/inventory/items/${id}/`, item),\n  \n  deleteItem: (id: number): Promise<void> =>\n    api.delete(`/inventory/items/${id}/`),\n  \n  adjustStock: (id: number, quantity: number, reason: string): Promise<{ data: Item }> =>\n    api.post(`/inventory/items/${id}/adjust_stock/`, { quantity, reason }),\n  \n  // Category endpoints\n  getCategories: (): Promise<{ data: Category[] }> =>\n    api.get('/inventory/categories/'),\n  \n  createCategory: (category: Partial<Category>): Promise<{ data: Category }> =>\n    api.post('/inventory/categories/', category),\n  \n  // Supplier endpoints\n  getSuppliers: (): Promise<{ data: Supplier[] }> =>\n    api.get('/inventory/suppliers/'),\n  \n  createSupplier: (supplier: Partial<Supplier>): Promise<{ data: Supplier }> =>\n    api.post('/inventory/suppliers/', supplier),\n  \n  // Stock movement endpoints\n  getStockMovements: (params?: any): Promise<{ data: { results: StockMovement[] } }> =>\n    api.get('/inventory/stock-movements/', { params }),\n  \n  // Purchase order endpoints\n  getPurchaseOrders: (params?: any): Promise<{ data: { results: PurchaseOrder[] } }> =>\n    api.get('/inventory/purchase-orders/', { params }),\n  \n  createPurchaseOrder: (po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.post('/inventory/purchase-orders/', po),\n  \n  updatePurchaseOrder: (id: number, po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.put(`/inventory/purchase-orders/${id}/`, po),\n};\n\n// Scheduling API\nexport const schedulingApi = {\n  // Appointment endpoints\n  getAppointments: (params?: any): Promise<{ data: { results: Appointment[] } }> =>\n    api.get('/scheduling/appointments/', { params }),\n  \n  getAppointmentById: (id: number): Promise<{ data: Appointment }> =>\n    api.get(`/scheduling/appointments/${id}/`),\n  \n  createAppointment: (appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.post('/scheduling/appointments/', appointment),\n  \n  updateAppointment: (id: number, appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.put(`/scheduling/appointments/${id}/`, appointment),\n  \n  deleteAppointment: (id: number): Promise<void> =>\n    api.delete(`/scheduling/appointments/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Appointment }> =>\n    api.patch(`/scheduling/appointments/${id}/update_status/`, { status }),\n  \n  // Technician availability endpoints\n  getTechnicianAvailability: (params?: any): Promise<{ data: { results: TechnicianAvailability[] } }> =>\n    api.get('/scheduling/technician-availability/', { params }),\n  \n  createAvailability: (availability: Partial<TechnicianAvailability>): Promise<{ data: TechnicianAvailability }> =>\n    api.post('/scheduling/technician-availability/', availability),\n  \n  // Schedule conflict endpoints\n  getScheduleConflicts: (): Promise<{ data: { results: ScheduleConflict[] } }> =>\n    api.get('/scheduling/schedule-conflicts/'),\n  \n  resolveConflict: (id: number, notes: string): Promise<{ data: ScheduleConflict }> =>\n    api.patch(`/scheduling/schedule-conflicts/${id}/resolve/`, { resolution_notes: notes }),\n};\n\n// Analytics API\nexport const analyticsApi = {\n  getBusinessOverview: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/business_overview/'),\n  \n  getFinancialSummary: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/financial_summary/'),\n  \n  getOperationalMetrics: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/operational_metrics/'),\n  \n  getCustomerInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/customer_insights/'),\n  \n  getInventoryInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/inventory_insights/'),\n};\n\nexport default api;","import React from 'react';\n\nexport interface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: RegExp;\n  min?: number;\n  max?: number;\n  custom?: (value: any) => string | null;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: Record<string, string>;\n}\n\nexport const validateField = (value: any, rules: ValidationRule): string | null => {\n  if (rules.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\n    return 'This field is required';\n  }\n\n  if (!value) return null;\n\n  if (rules.minLength && typeof value === 'string' && value.length < rules.minLength) {\n    return `Must be at least ${rules.minLength} characters`;\n  }\n\n  if (rules.maxLength && typeof value === 'string' && value.length > rules.maxLength) {\n    return `Must be no more than ${rules.maxLength} characters`;\n  }\n\n  if (rules.pattern && typeof value === 'string' && !rules.pattern.test(value)) {\n    return 'Invalid format';\n  }\n\n  if (rules.min && typeof value === 'number' && value < rules.min) {\n    return `Must be at least ${rules.min}`;\n  }\n\n  if (rules.max && typeof value === 'number' && value > rules.max) {\n    return `Must be no more than ${rules.max}`;\n  }\n\n  if (rules.custom) {\n    return rules.custom(value);\n  }\n\n  return null;\n};\n\nexport const validateForm = (data: Record<string, any>, rules: Record<string, ValidationRule>): ValidationResult => {\n  const errors: Record<string, string> = {};\n\n  for (const [field, fieldRules] of Object.entries(rules)) {\n    const error = validateField(data[field], fieldRules);\n    if (error) {\n      errors[field] = error;\n    }\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Common validation patterns\nexport const validationPatterns = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  phone: /^[\\+]?[1-9][\\d]{0,15}$/,\n  phoneUS: /^(\\+1)?[\\s\\-]?\\(?([0-9]{3})\\)?[\\s\\-]?([0-9]{3})[\\s\\-]?([0-9]{4})$/,\n  postalCode: /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/,\n  zipCode: /^\\d{5}(-\\d{4})?$/,\n  url: /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  currency: /^\\d+(\\.\\d{1,2})?$/,\n  jobNumber: /^JOB-\\d{4}-\\d{4}$/,\n  invoiceNumber: /^INV-\\d{4}-\\d{4}$/,\n  strongPassword: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/\n};\n\n// Helper functions to create validation rules\nexport const commonValidationRules = {\n  required: (message?: string): ValidationRule => ({\n    required: true,\n    custom: (value: any) => {\n      if (!value || (typeof value === 'string' && value.trim() === '')) {\n        return message || 'This field is required';\n      }\n      return null;\n    }\n  }),\n  \n  minLength: (length: number, message?: string): ValidationRule => ({\n    minLength: length,\n    custom: (value: string) => {\n      if (value && value.length < length) {\n        return message || `Must be at least ${length} characters`;\n      }\n      return null;\n    }\n  }),\n  \n  maxLength: (length: number, message?: string): ValidationRule => ({\n    maxLength: length,\n    custom: (value: string) => {\n      if (value && value.length > length) {\n        return message || `Must be no more than ${length} characters`;\n      }\n      return null;\n    }\n  }),\n  \n  email: (message?: string): ValidationRule => ({\n    pattern: validationPatterns.email,\n    custom: (value: string) => {\n      if (value && !validationPatterns.email.test(value)) {\n        return message || 'Please enter a valid email address';\n      }\n      return null;\n    }\n  }),\n  \n  phone: (message?: string): ValidationRule => ({\n    pattern: validationPatterns.phoneUS,\n    custom: (value: string) => {\n      if (value && !validationPatterns.phoneUS.test(value)) {\n        return message || 'Please enter a valid phone number (e.g., (555) 123-4567)';\n      }\n      return null;\n    }\n  }),\n\n  // Pre-defined validation rule objects\n  emailRule: { \n    required: true, \n    pattern: validationPatterns.email,\n    custom: (value: string) => {\n      if (value && !validationPatterns.email.test(value)) {\n        return 'Please enter a valid email address';\n      }\n      return null;\n    }\n  },\n  phoneRule: { \n    required: true, \n    pattern: validationPatterns.phoneUS,\n    custom: (value: string) => {\n      if (value && !validationPatterns.phoneUS.test(value)) {\n        return 'Please enter a valid phone number (e.g., (555) 123-4567)';\n      }\n      return null;\n    }\n  },\n  currencyRule: {\n    required: true,\n    min: 0,\n    custom: (value: number) => {\n      if (value !== undefined && value < 0) {\n        return 'Amount cannot be negative';\n      }\n      return null;\n    }\n  },\n  \n  // Backward compatibility aliases\n  currency: {\n    required: true,\n    min: 0,\n    custom: (value: number) => {\n      if (value !== undefined && value < 0) {\n        return 'Amount cannot be negative';\n      }\n      return null;\n    }\n  },\n  duration: {\n    required: true,\n    min: 0.5,\n    max: 24,\n    custom: (value: number) => {\n      if (value !== undefined && (value < 0.5 || value > 24)) {\n        return 'Duration must be between 0.5 and 24 hours';\n      }\n      return null;\n    }\n  },\n  postalCode: {\n    pattern: validationPatterns.postalCode,\n    custom: (value: string) => {\n      if (value && !validationPatterns.postalCode.test(value) && !validationPatterns.zipCode.test(value)) {\n        return 'Please enter a valid postal/zip code';\n      }\n      return null;\n    }\n  },\n  strongPassword: {\n    required: true,\n    minLength: 8,\n    pattern: validationPatterns.strongPassword,\n    custom: (value: string) => {\n      if (value && !validationPatterns.strongPassword.test(value)) {\n        return 'Password must contain at least 8 characters with uppercase, lowercase, number, and special character';\n      }\n      return null;\n    }\n  },\n  customerName: {\n    required: true,\n    minLength: 2,\n    maxLength: 100,\n    custom: (value: string) => {\n      if (value && value.trim().length < 2) {\n        return 'Name must be at least 2 characters';\n      }\n      return null;\n    }\n  },\n  address: {\n    required: true,\n    minLength: 10,\n    maxLength: 255,\n    custom: (value: string) => {\n      if (value && value.trim().length < 10) {\n        return 'Please enter a complete address';\n      }\n      return null;\n    }\n  },\n  description: {\n    required: true,\n    minLength: 10,\n    maxLength: 1000,\n    custom: (value: string) => {\n      if (value && value.trim().length < 10) {\n        return 'Description must be at least 10 characters';\n      }\n      return null;\n    }\n  }\n};\n\n// Utility functions for specific validations\nexport const validateEmailFormat = (email: string): boolean => {\n  return validationPatterns.email.test(email);\n};\n\nexport const validatePhoneFormat = (phone: string): boolean => {\n  return validationPatterns.phoneUS.test(phone);\n};\n\nexport const validateCurrencyFormat = (amount: string): boolean => {\n  return validationPatterns.currency.test(amount);\n};\n\nexport const formatPhoneNumber = (phone: string): string => {\n  const digits = phone.replace(/\\D/g, '');\n  if (digits.length === 10) {\n    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n  }\n  if (digits.length === 11 && digits[0] === '1') {\n    return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n  }\n  return phone;\n};\n\nexport const formatCurrency = (amount: number | string): string => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(numAmount);\n};\n\n// Real-time validation hook\nexport const useFormValidation = (initialData: Record<string, any>, validationRules: Record<string, ValidationRule>) => {\n  const [data, setData] = React.useState(initialData);\n  const [errors, setErrors] = React.useState<Record<string, string>>({});\n  const [touched, setTouched] = React.useState<Record<string, boolean>>({});\n\n  const validateSingleField = (field: string, value: any) => {\n    const rule = validationRules[field];\n    if (!rule) return null;\n    return validateField(value, rule);\n  };\n\n  const handleChange = (field: string, value: any) => {\n    setData(prev => ({ ...prev, [field]: value }));\n    \n    // Real-time validation\n    if (touched[field]) {\n      const error = validateSingleField(field, value);\n      setErrors(prev => {\n        if (error) {\n          return { ...prev, [field]: error };\n        } else {\n          const newErrors = { ...prev };\n          delete newErrors[field];\n          return newErrors;\n        }\n      });\n    }\n  };\n\n  const handleBlur = (field: string) => {\n    setTouched(prev => ({ ...prev, [field]: true }));\n    const error = validateSingleField(field, data[field]);\n    if (error) {\n      setErrors(prev => ({ ...prev, [field]: error }));\n    }\n  };\n\n  const validateAll = (): boolean => {\n    const result = validateForm(data, validationRules);\n    setErrors(result.errors);\n    setTouched(Object.keys(validationRules).reduce((acc, key) => ({ ...acc, [key]: true }), {}));\n    return result.isValid;\n  };\n\n  const reset = () => {\n    setData(initialData);\n    setErrors({});\n    setTouched({});\n  };\n\n  return {\n    data,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    validateAll,\n    reset,\n    isValid: Object.keys(errors).length === 0\n  };\n};","import React, { useState, useEffect } from 'react';\nimport { jobApi, technicianApi, customerApi, inventoryApi } from '../services/api';\nimport { validateForm, commonValidationRules } from '../utils/validation';\nimport { Item, Category } from '../types/inventory';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Grid,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Box,\n  Tabs,\n  Tab,\n  IconButton,\n  Tooltip,\n  Paper,\n  CircularProgress,\n  Alert,\n  Divider,\n  Avatar,\n  Badge,\n  ToggleButton,\n  ToggleButtonGroup,\n  Fab,\n  Zoom,\n  Stack,\n  LinearProgress,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Person as PersonIcon,\n  Today as TodayIcon,\n  ViewWeek as ViewWeekIcon,\n  ViewDay as ViewDayIcon,\n  ViewList as ViewListIcon,\n  ChevronLeft as ChevronLeftIcon,\n  ChevronRight as ChevronRightIcon,\n  AccessTime as TimeIcon,\n  Delete as DeleteIcon,\n  AddShoppingCart as AddItemIcon,\n  Inventory as InventoryIcon,\n  Email as EmailIcon,\n  Assignment as DocumentIcon,\n  CheckCircle as ApproveIcon,\n  CheckCircle as CheckCircleIcon,\n  Cancel as RejectIcon,\n  CalendarToday as CalendarIcon,\n  Schedule as ScheduleIcon,\n  Work as WorkIcon,\n  ReportProblem as EmergencyIcon,\n  FilterList as FilterIcon,\n  Search as SearchIcon,\n  Refresh as RefreshIcon,\n  TrendingUp as TrendingUpIcon,\n  PriorityHigh as HighPriorityIcon,\n  MoreVert as MoreIcon,\n} from '@mui/icons-material';\nimport {\n  DndContext,\n  DragEndEvent,\n  DragOverlay,\n  DragStartEvent,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  useDroppable,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\ninterface Job {\n  id: string;\n  job_number: string;\n  title: string;\n  customer_name: string;\n  status: 'pending' | 'scheduled' | 'on_the_way' | 'in_progress' | 'completed' | 'cancelled';\n  estimate_status?: 'draft' | 'sent' | 'viewed' | 'approved' | 'rejected' | 'expired';\n  priority: 'low' | 'medium' | 'high' | 'emergency';\n  scheduled_date: string | null;\n  scheduled_start_time: string | null;\n  scheduled_end_time: string | null;\n  assigned_technician: string | null; // Primary technician for backwards compatibility\n  assigned_technicians?: string[]; // Multiple technicians\n  estimated_duration: number;\n  service_type_name: string;\n  job_type?: 'job' | 'estimate';\n  estimated_cost?: number;\n  payment_status?: 'paid' | 'due' | 'pending';\n}\n\ninterface Technician {\n  id: string;\n  full_name: string;\n  skill_level: string;\n  is_available: boolean;\n  employee_id: string;\n}\n\ninterface TimeSlot {\n  time: string;\n  jobs: Job[];\n}\n\nconst SchedulingCalendar: React.FC = () => {\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [technicians, setTechnicians] = useState<Technician[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedDate, setSelectedDate] = useState<string>(\n    new Date().toISOString().split('T')[0]\n  );\n  const [viewMode, setViewMode] = useState<'day' | 'week' | 'list'>('week');\n  const [weekDates, setWeekDates] = useState<string[]>([]);\n  const [weekStart, setWeekStart] = useState<Date>(new Date());\n  const [technicianColors, setTechnicianColors] = useState<Record<string, string>>({});\n  const [unscheduledJobs, setUnscheduledJobs] = useState<Job[]>([]);\n  const [openJobDialog, setOpenJobDialog] = useState(false);\n  const [selectedJob, setSelectedJob] = useState<Job | null>(null);\n  const [activeJob, setActiveJob] = useState<Job | null>(null);\n  const [isCreatingJob, setIsCreatingJob] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterPriority, setFilterPriority] = useState<string>('all');\n  const [refreshing, setRefreshing] = useState(false);\n  const [newJobData, setNewJobData] = useState({\n    title: '',\n    customer_name: '',\n    service_type_name: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'emergency',\n    estimated_duration: 2,\n    description: '',\n    customer_id: null as number | null,\n    job_type: 'job' as 'job' | 'estimate',\n    labor_rate: 125,\n    material_markup: 20,\n    subtotal: 0,\n    tax_rate: 8.25,\n    total_cost: 0\n  });\n  \n  const [lineItems, setLineItems] = useState<Array<{\n    id: string;\n    description: string;\n    quantity: number;\n    unit_price: number;\n    total: number;\n    type: 'labor' | 'material' | 'service';\n  }>>([]);\n  \n  const [newLineItem, setNewLineItem] = useState({\n    description: '',\n    quantity: 1,\n    unit_price: 0,\n    type: 'labor' as 'labor' | 'material' | 'service'\n  });\n  \n  const [showMaterialsCatalog, setShowMaterialsCatalog] = useState(false);\n  const [materialSearchQuery, setMaterialSearchQuery] = useState('');\n  const [selectedMaterialQuantity, setSelectedMaterialQuantity] = useState<Record<string, number>>({});\n  \n  // Inventory-related state\n  const [inventoryItems, setInventoryItems] = useState<Item[]>([]);\n  const [inventoryCategories, setInventoryCategories] = useState<Category[]>([]);\n  const [inventoryLoading, setInventoryLoading] = useState(false);\n  const [lowStockItems, setLowStockItems] = useState<Item[]>([]);\n\n  // Helper functions for modern design\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'emergency': return '#d32f2f';\n      case 'high': return '#ed6c02';\n      case 'medium': return '#2e7d32';\n      case 'low': return '#757575';\n      default: return '#757575';\n    }\n  };\n\n  const getJobBackgroundColor = (job: Job) => {\n    switch (job.status) {\n      case 'scheduled': return '#e3f2fd';\n      case 'on_the_way': return '#fff3e0';\n      case 'in_progress': return '#e8f5e8';\n      case 'completed': return '#f3e5f5';\n      case 'cancelled': return '#ffebee';\n      default: return '#ffffff';\n    }\n  };\n\n  // Filter jobs based on search and filters\n  const filteredJobs = jobs.filter(job => {\n    const matchesSearch = !searchQuery || \n      job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      job.customer_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      job.service_type_name.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = filterStatus === 'all' || job.status === filterStatus;\n    const matchesPriority = filterPriority === 'all' || job.priority === filterPriority;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n  \n  const [showCustomerForm, setShowCustomerForm] = useState(false);\n  const [customerSearchQuery, setCustomerSearchQuery] = useState('');\n  const [availableCustomers, setAvailableCustomers] = useState<any[]>([]);\n  const [selectedCustomerProperties, setSelectedCustomerProperties] = useState<any[]>([]);\n  const [selectedPropertyId, setSelectedPropertyId] = useState<number | null>(null);\n  const [newCustomerData, setNewCustomerData] = useState({\n    first_name: '',\n    last_name: '',\n    email: '',\n    phone: '',\n    street_address: '',\n    city: '',\n    state: '',\n    zip_code: '',\n    customer_type: 'residential' as 'residential' | 'commercial'\n  });\n  \n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    })\n  );\n\n  // Generate time slots with 30-minute increments (7 AM to 7 PM)\n  const generateTimeSlots = (): TimeSlot[] => {\n    const slots: TimeSlot[] = [];\n    for (let hour = 7; hour <= 19; hour++) {\n      // Add hour:00 slot\n      slots.push({\n        time: `${hour.toString().padStart(2, '0')}:00`,\n        jobs: []\n      });\n      // Add hour:30 slot (except for the last hour)\n      if (hour < 19) {\n        slots.push({\n          time: `${hour.toString().padStart(2, '0')}:30`,\n          jobs: []\n        });\n      }\n    }\n    return slots;\n  };\n\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>(generateTimeSlots());\n\n\n  const fetchTechnicians = async () => {\n    try {\n      setError(null);\n      const response = await technicianApi.getAvailable();\n      setTechnicians(response.data);\n    } catch (error) {\n      console.error('Error fetching technicians:', error);\n      setError('Failed to load technicians');\n      \n      // Fallback to demo data only if API completely fails\n      const demoTechnicians = [\n        {\n          id: \"1\",\n          full_name: \"Mike Johnson\",\n          skill_level: \"Senior\",\n          is_available: true,\n          employee_id: \"T-101\"\n        },\n        {\n          id: \"2\",\n          full_name: \"Tom Wilson\",\n          skill_level: \"Journeyman\",\n          is_available: true,\n          employee_id: \"T-102\"\n        },\n        {\n          id: \"3\",\n          full_name: \"Steve Miller\",\n          skill_level: \"Apprentice\",\n          is_available: true,\n          employee_id: \"T-103\"\n        }\n      ];\n      \n      setTechnicians(demoTechnicians);\n    }\n  };\n\n  // Fetch inventory items for materials catalog\n  const fetchInventoryItems = async () => {\n    try {\n      setInventoryLoading(true);\n      setError(null);\n      \n      const itemsResponse = await inventoryApi.getItems({ is_active: true });\n      const categoriesResponse = await inventoryApi.getCategories();\n      \n      setInventoryItems(itemsResponse.data.results);\n      setInventoryCategories(categoriesResponse.data);\n      \n      // Identify low stock items\n      const lowStock = itemsResponse.data.results.filter(\n        item => item.current_stock <= item.minimum_stock\n      );\n      setLowStockItems(lowStock);\n      \n    } catch (error) {\n      console.error('Error fetching inventory:', error);\n      setError('Failed to load inventory. Using fallback materials catalog.');\n      \n      // Keep existing static materials as fallback\n      setInventoryItems([]);\n      setInventoryCategories([]);\n      setLowStockItems([]);\n    } finally {\n      setInventoryLoading(false);\n    }\n  };\n\n  // Generate color map for technicians\n  useEffect(() => {\n    const colors = [\n      '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',\n      '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50',\n      '#8bc34a', '#cddc39', '#ffc107', '#ff9800', '#ff5722'\n    ];\n    \n    const colorMap: Record<string, string> = {};\n    technicians.forEach((tech, index) => {\n      colorMap[tech.id] = colors[index % colors.length];\n    });\n    \n    setTechnicianColors(colorMap);\n  }, [technicians]);\n  \n  // Generate array of dates for the week view\n  useEffect(() => {\n    const dates: string[] = [];\n    const currentDate = new Date(weekStart);\n    \n    // Set to the beginning of the week (Sunday)\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n    \n    // Generate 7 days (Sunday to Saturday)\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(currentDate);\n      date.setDate(currentDate.getDate() + i);\n      dates.push(date.toISOString().split('T')[0]);\n    }\n    \n    setWeekDates(dates);\n  }, [weekStart]);\n  \n  const fetchJobsCallback = React.useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    let dateFrom, dateTo;\n    \n    if (viewMode === 'week' && weekDates.length > 0) {\n      dateFrom = weekDates[0];\n      dateTo = weekDates[6];\n    } else {\n      dateFrom = selectedDate;\n      dateTo = selectedDate;\n    }\n    \n    // Fetch scheduled jobs\n    try {\n      // TODO: Re-enable API calls when interface is fixed\n      // const scheduledResponse = await jobApi.getAll({\n      //   date_from: dateFrom,\n      //   date_to: dateTo,\n      //   status: 'scheduled'\n      // });\n      // setJobs(scheduledResponse.data.results);\n      \n      // Use demo data instead\n      throw new Error('Using demo data');\n    } catch (scheduledError) {\n      console.error('Error fetching scheduled jobs:', scheduledError);\n          // Demo data for testing when API is not available\n          const today = new Date();\n          const generateDate = (dayOffset: number) => {\n            const date = new Date(today);\n            date.setDate(date.getDate() + dayOffset);\n            return date.toISOString().split('T')[0];\n          };\n          \n          // Generate some sample jobs spread across the week\n          const demoJobs = [\n            {\n              id: \"101\",\n              job_number: \"JOB-2024-0101\",\n              title: \"Panel Replacement\",\n              customer_name: \"John Smith\",\n              status: \"scheduled\" as const,\n              priority: \"high\" as const,\n              scheduled_date: generateDate(0),\n              scheduled_start_time: \"09:00\",\n              scheduled_end_time: \"12:00\",\n              assigned_technician: \"1\",\n              estimated_duration: 3,\n              service_type_name: \"Panel Installation\",\n              job_type: \"job\" as const,\n              estimated_cost: 3500\n            },\n            {\n              id: \"102\",\n              job_number: \"EST-2024-0102\",\n              title: \"Outlet Repair\",\n              customer_name: \"Sarah Davis\",\n              status: \"on_the_way\" as const,\n              priority: \"medium\" as const,\n              scheduled_date: generateDate(0),\n              scheduled_start_time: \"14:00\",\n              scheduled_end_time: \"15:30\",\n              assigned_technician: \"2\",\n              estimated_duration: 1.5,\n              service_type_name: \"Electrical Repair\",\n              job_type: \"estimate\" as const,\n              estimated_cost: 250,\n              estimate_status: \"sent\" as const\n            },\n            {\n              id: \"103\",\n              job_number: \"JOB-2024-0103\",\n              title: \"Emergency Power Outage\",\n              customer_name: \"Robert Brown\",\n              status: \"in_progress\" as const,\n              priority: \"emergency\" as const,\n              scheduled_date: generateDate(1),\n              scheduled_start_time: \"10:00\",\n              scheduled_end_time: \"13:00\",\n              assigned_technician: \"1\",\n              estimated_duration: 3,\n              service_type_name: \"Emergency Service\",\n              job_type: \"job\" as const,\n              estimated_cost: 500\n            },\n            {\n              id: \"104\",\n              job_number: \"JOB-2024-0104\",\n              title: \"Lighting Installation\",\n              customer_name: \"Lisa Garcia\",\n              status: \"scheduled\" as const,\n              priority: \"low\" as const,\n              scheduled_date: generateDate(1),\n              scheduled_start_time: \"15:00\",\n              scheduled_end_time: \"17:00\",\n              assigned_technician: \"3\",\n              estimated_duration: 2,\n              service_type_name: \"Lighting Installation\"\n            },\n            {\n              id: \"105\",\n              job_number: \"JOB-2024-0105\",\n              title: \"Ceiling Fan Installation\",\n              customer_name: \"Mark Johnson\",\n              status: \"scheduled\" as const,\n              priority: \"medium\" as const,\n              scheduled_date: generateDate(2),\n              scheduled_start_time: \"09:00\",\n              scheduled_end_time: \"11:00\",\n              assigned_technician: \"2\",\n              estimated_duration: 2,\n              service_type_name: \"Installation\"\n            },\n            {\n              id: \"106\",\n              job_number: \"JOB-2024-0106\",\n              title: \"Wiring Upgrade\",\n              customer_name: \"Jennifer Wilson\",\n              status: \"scheduled\" as const,\n              priority: \"high\" as const,\n              scheduled_date: generateDate(3),\n              scheduled_start_time: \"13:00\",\n              scheduled_end_time: \"17:00\",\n              assigned_technician: \"1\",\n              assigned_technicians: [\"1\", \"2\"], // Multi-person job\n              estimated_duration: 4,\n              service_type_name: \"Wiring Installation\",\n              job_type: \"job\" as const,\n              estimated_cost: 2800\n            },\n            {\n              id: \"107\",\n              job_number: \"JOB-2024-0107\",\n              title: \"Security Light Install\",\n              customer_name: \"David Miller\",\n              status: \"completed\" as const,\n              priority: \"medium\" as const,\n              scheduled_date: generateDate(4),\n              scheduled_start_time: \"10:00\",\n              scheduled_end_time: \"12:00\",\n              assigned_technician: \"3\",\n              estimated_duration: 2,\n              service_type_name: \"Lighting Installation\",\n              job_type: \"job\" as const,\n              estimated_cost: 800,\n              payment_status: \"paid\" as const\n            },\n            {\n              id: \"108\",\n              job_number: \"JOB-2024-0108\",\n              title: \"Breaker Replacement\",\n              customer_name: \"Anna Garcia\",\n              status: \"completed\" as const,\n              priority: \"high\" as const,\n              scheduled_date: generateDate(3),\n              scheduled_start_time: \"11:00\",\n              scheduled_end_time: \"12:30\",\n              assigned_technician: \"2\",\n              estimated_duration: 1.5,\n              service_type_name: \"Electrical Repair\",\n              job_type: \"job\" as const,\n              estimated_cost: 450,\n              payment_status: \"due\" as const\n            }\n          ];\n          \n      setJobs(demoJobs);\n    }\n    \n    // Fetch unscheduled jobs\n    try {\n      // TODO: Re-enable API calls when interface is fixed\n      // const unscheduledResponse = await jobApi.getAll({\n      //   status: 'pending'\n      // });\n      // setUnscheduledJobs(unscheduledResponse.data.results);\n      \n      // Use demo data instead\n      throw new Error('Using demo data');\n    } catch (unscheduledError) {\n      console.error('Error fetching unscheduled jobs:', unscheduledError);\n      \n      // Demo unscheduled jobs as fallback\n      const demoUnscheduledJobs = [\n            {\n              id: \"201\",\n              job_number: \"JOB-2024-0201\",\n              title: \"Electric Vehicle Charger\",\n              customer_name: \"Thomas Edwards\",\n              status: \"pending\" as const,\n              priority: \"high\" as const,\n              scheduled_date: null,\n              scheduled_start_time: null,\n              scheduled_end_time: null,\n              assigned_technician: null,\n              estimated_duration: 4,\n              service_type_name: \"Installation\",\n              job_type: \"job\" as const,\n              estimated_cost: 2500\n            },\n            {\n              id: \"202\",\n              job_number: \"EST-2024-0202\",\n              title: \"Flickering Lights\",\n              customer_name: \"Emily Parker\",\n              status: \"pending\" as const,\n              priority: \"medium\" as const,\n              scheduled_date: null,\n              scheduled_start_time: null,\n              scheduled_end_time: null,\n              assigned_technician: null,\n              estimated_duration: 1,\n              service_type_name: \"Electrical Repair\",\n              job_type: \"estimate\" as const,\n              estimated_cost: 350,\n              estimate_status: \"viewed\" as const\n            },\n            {\n              id: \"203\",\n              job_number: \"EST-2024-0203\",\n              title: \"Hot Tub Wiring\",\n              customer_name: \"Kevin Thompson\",\n              status: \"pending\" as const,\n              priority: \"low\" as const,\n              scheduled_date: null,\n              scheduled_start_time: null,\n              scheduled_end_time: null,\n              assigned_technician: null,\n              estimated_duration: 5,\n              service_type_name: \"Wiring Installation\",\n              job_type: \"estimate\" as const,\n              estimated_cost: 1200,\n              estimate_status: \"draft\" as const\n            },\n            {\n              id: \"204\",\n              job_number: \"JOB-2024-0204\",\n              title: \"Main Panel Upgrade\",\n              customer_name: \"Michelle Davis\",\n              status: \"pending\" as const,\n              priority: \"high\" as const,\n              scheduled_date: null,\n              scheduled_start_time: null,\n              scheduled_end_time: null,\n              assigned_technician: \"1\",\n              assigned_technicians: [\"1\", \"3\"], // Multi-person job\n              estimated_duration: 6,\n              service_type_name: \"Panel Installation\",\n              job_type: \"job\" as const,\n              estimated_cost: 4500\n            }\n          ];\n          \n      setUnscheduledJobs(demoUnscheduledJobs);\n    }\n    \n    setLoading(false);\n  }, [selectedDate, viewMode, weekDates]);\n\n  useEffect(() => {\n    fetchJobsCallback();\n    fetchTechnicians();\n    fetchInventoryItems();\n  }, [fetchJobsCallback]);\n\n  // Organize jobs into time slots\n  useEffect(() => {\n    const newTimeSlots = generateTimeSlots();\n    \n    jobs.forEach(job => {\n      if (job.scheduled_start_time) {\n        const [hourStr, minuteStr] = job.scheduled_start_time.split(':');\n        const hour = parseInt(hourStr);\n        const minute = parseInt(minuteStr);\n        \n        // Find the correct slot index for this time\n        const slotIndex = newTimeSlots.findIndex(slot => slot.time === job.scheduled_start_time);\n        \n        if (slotIndex >= 0) {\n          newTimeSlots[slotIndex].jobs.push(job);\n        } else {\n          // If exact time not found, find closest time slot\n          const timeValue = hour * 60 + minute; // Convert to minutes\n          let closestIndex = 0;\n          let closestDiff = Infinity;\n          \n          newTimeSlots.forEach((slot, index) => {\n            const [slotHour, slotMinute] = slot.time.split(':').map(Number);\n            const slotValue = slotHour * 60 + slotMinute;\n            const diff = Math.abs(timeValue - slotValue);\n            \n            if (diff < closestDiff) {\n              closestDiff = diff;\n              closestIndex = index;\n            }\n          });\n          \n          newTimeSlots[closestIndex].jobs.push(job);\n        }\n      }\n    });\n    \n    setTimeSlots(newTimeSlots);\n  }, [jobs]);\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const job = unscheduledJobs.find(j => j.id === event.active.id) || \n                jobs.find(j => j.id === event.active.id);\n    setActiveJob(job || null);\n  };\n  \n  const handleDragEnd = async (event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    setActiveJob(null);\n    \n    if (!over) return;\n    \n    // Handle dropping job onto calendar time slot\n    if (over.id.toString().startsWith('technician-')) {\n      const overId = over.id.toString();\n      \n      // Parse the drop zone ID: technician-{id}-time-{time}-date-{date}\n      const parts = overId.split('-');\n      const technicianIdIndex = parts.indexOf('technician') + 1;\n      const timeIndex = parts.indexOf('time') + 1;\n      const dateIndex = parts.indexOf('date') + 1;\n      \n      const technicianId = parts[technicianIdIndex];\n      const timeSlot = parts[timeIndex];\n      let scheduleDate = selectedDate;\n      \n      // If date is in the drop zone ID, use that\n      if (dateIndex > 0 && parts[dateIndex]) {\n        scheduleDate = parts[dateIndex];\n      }\n      \n      try {\n        // Update the job in the backend\n        const jobId = parseInt(active.id.toString());\n        \n        // For the new week view, we'll assign to first available technician if \"any\"\n        let assignedTechnician = technicianId;\n        if (technicianId === 'any' && technicians.length > 0) {\n          assignedTechnician = technicians[0].id;\n        }\n        \n        const updateData = {\n          assigned_to: [parseInt(assignedTechnician)],\n          scheduled_start: `${scheduleDate}T${timeSlot}:00`,\n          status: 'scheduled' as const\n        };\n        \n        // Try to update via API\n        await jobApi.update(jobId, updateData);\n        \n        console.log('Job assignment successful:', {\n          jobId: active.id,\n          technicianId: assignedTechnician,\n          scheduleDate,\n          timeSlot\n        });\n        \n        // Refresh data to get updated job information\n        await fetchJobsCallback();\n        \n      } catch (error) {\n        console.error('Error assigning job:', error);\n        \n        // Fallback: Update locally for demo purposes\n        console.log('Using demo mode - updating local state');\n        \n        // Update the job locally\n        const draggedJob = unscheduledJobs.find(j => j.id === active.id.toString()) ||\n                          jobs.find(j => j.id === active.id.toString());\n        \n        if (draggedJob) {\n          let assignedTechnician = technicianId;\n          if (technicianId === 'any' && technicians.length > 0) {\n            assignedTechnician = technicians[0].id;\n          }\n          \n          const updatedJob = {\n            ...draggedJob,\n            assigned_technician: assignedTechnician,\n            scheduled_date: scheduleDate,\n            scheduled_start_time: timeSlot,\n            status: 'scheduled' as const\n          };\n          \n          // Remove from unscheduled jobs\n          setUnscheduledJobs(prev => prev.filter(j => j.id !== active.id.toString()));\n          \n          // Add to scheduled jobs\n          setJobs(prev => {\n            const filtered = prev.filter(j => j.id !== active.id.toString());\n            return [...filtered, updatedJob];\n          });\n        }\n      }\n    }\n  };\n\n  const getJobTypeIcon = (jobType?: 'job' | 'estimate') => {\n    return jobType === 'estimate' ? '📋' : '🔧';\n  };\n\n  const getEstimateStatusColor = (status?: Job['estimate_status']) => {\n    switch (status) {\n      case 'draft': return '#9e9e9e';\n      case 'sent': return '#2196f3';\n      case 'viewed': return '#ff9800';\n      case 'approved': return '#4caf50';\n      case 'rejected': return '#f44336';\n      case 'expired': return '#795548';\n      default: return '#e0e0e0';\n    }\n  };\n\n  const getEstimateStatusText = (status?: Job['estimate_status']) => {\n    switch (status) {\n      case 'draft': return 'Draft';\n      case 'sent': return 'Sent';\n      case 'viewed': return 'Viewed';\n      case 'approved': return 'Approved';\n      case 'rejected': return 'Rejected';\n      case 'expired': return 'Expired';\n      default: return 'Draft';\n    }\n  };\n\n  const getJobTypeBorder = (jobType?: 'job' | 'estimate') => {\n    return jobType === 'estimate' ? '2px dashed' : '2px solid';\n  };\n\n  const getJobCardStyling = (job: Job) => {\n    // Get all assigned technicians\n    const allTechnicians = job.assigned_technicians || (job.assigned_technician ? [job.assigned_technician] : []);\n    const primaryTechColor = getTechnicianColor(allTechnicians[0] || null);\n    \n    // For multiple technicians, create a gradient background\n    const getMultiTechBackground = () => {\n      if (allTechnicians.length <= 1) {\n        return primaryTechColor;\n      }\n      \n      const colors = allTechnicians.map(techId => getTechnicianColor(techId));\n      const gradientStops = colors.map((color, index) => \n        `${color} ${(index * 100) / colors.length}%, ${color} ${((index + 1) * 100) / colors.length}%`\n      ).join(', ');\n      \n      return `linear-gradient(135deg, ${gradientStops})`;\n    };\n    \n    // Payment status takes precedence for completed jobs\n    if (job.status === 'completed') {\n      if (job.payment_status === 'paid') {\n        return {\n          backgroundColor: '#9e9e9e', // Grey for paid\n          border: '2px solid transparent',\n          backgroundImage: 'none'\n        };\n      } else if (job.payment_status === 'due') {\n        return {\n          background: allTechnicians.length > 1 ? getMultiTechBackground() : primaryTechColor,\n          border: '3px solid #f44336', // Red border for payment due\n          backgroundImage: 'none'\n        };\n      }\n    }\n    \n    // Status-based styling\n    switch (job.status) {\n      case 'on_the_way':\n        return {\n          background: allTechnicians.length > 1 ? getMultiTechBackground() : primaryTechColor,\n          border: '2px solid transparent',\n          backgroundImage: `repeating-linear-gradient(\n            45deg,\n            transparent,\n            transparent 10px,\n            rgba(255,255,255,0.3) 10px,\n            rgba(255,255,255,0.3) 20px\n          )`\n        };\n      \n      case 'in_progress':\n        return {\n          backgroundColor: 'rgba(255,255,255,0.9)',\n          border: `3px solid ${primaryTechColor}`,\n          backgroundImage: 'none'\n        };\n      \n      case 'scheduled':\n      default:\n        return {\n          background: allTechnicians.length > 1 ? getMultiTechBackground() : primaryTechColor,\n          border: '2px solid transparent',\n          backgroundImage: 'none'\n        };\n    }\n  };\n\n  const SortableJobCard: React.FC<{ job: Job }> = ({ job }) => {\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      transform,\n      transition,\n    } = useSortable({ id: job.id });\n    \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n    \n    return (\n      <Card\n        ref={setNodeRef}\n        style={style}\n        {...attributes}\n        {...listeners}\n        sx={{\n          margin: 1,\n          cursor: 'grab',\n          borderLeft: `4px solid ${getPriorityColor(job.priority)}`,\n          border: getJobTypeBorder(job.job_type),\n          borderColor: job.job_type === 'estimate' ? '#ff9800' : 'transparent',\n          '&:hover': { boxShadow: 3 }\n        }}\n        onClick={() => {\n          setSelectedJob(job);\n          setIsCreatingJob(false);\n          setOpenJobDialog(true);\n        }}\n      >\n        <CardContent sx={{ padding: '8px !important' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>\n            <Typography variant=\"body2\" sx={{ fontSize: '0.8rem' }}>\n              {getJobTypeIcon(job.job_type)}\n            </Typography>\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              {job.job_number}\n            </Typography>\n            {job.job_type === 'estimate' && (\n              <Chip\n                label={getEstimateStatusText(job.estimate_status)}\n                size=\"small\"\n                sx={{\n                  backgroundColor: getEstimateStatusColor(job.estimate_status),\n                  color: 'white',\n                  fontSize: '0.6rem',\n                  height: 16\n                }}\n              />\n            )}\n          </Box>\n          <Typography variant=\"body2\" fontWeight=\"bold\">\n            {job.title}\n          </Typography>\n          <Typography variant=\"caption\">\n            {job.customer_name}\n          </Typography>\n          <Box sx={{ display: 'flex', gap: 0.5, mt: 0.5 }}>\n            <Chip\n              label={job.priority}\n              size=\"small\"\n              sx={{\n                backgroundColor: getPriorityColor(job.priority),\n                color: 'white',\n                fontSize: '0.7rem',\n                height: 20\n              }}\n            />\n            {job.service_type_name && (\n              <Chip\n                label={job.service_type_name}\n                size=\"small\"\n                variant=\"outlined\"\n                sx={{ fontSize: '0.7rem', height: 20 }}\n              />\n            )}\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const DroppableTimeSlot: React.FC<{\n    technicianId: string;\n    timeSlot: string;\n    date?: string;\n    children: React.ReactNode;\n  }> = ({ technicianId, timeSlot, date, children }) => {\n    const dropId = date \n      ? `technician-${technicianId}-time-${timeSlot}-date-${date}`\n      : `technician-${technicianId}-time-${timeSlot}`;\n    \n    const { setNodeRef, isOver } = useDroppable({\n      id: dropId,\n    });\n    \n    return (\n      <Box\n        ref={setNodeRef}\n        sx={{\n          minHeight: 40,\n          border: '1px solid #e0e0e0',\n          borderRadius: 1,\n          margin: '2px 0',\n          padding: 1,\n          display: 'flex',\n          alignItems: 'center',\n          position: 'relative',\n          backgroundColor: isOver ? '#e3f2fd' : 'transparent',\n          '&:hover': {\n            backgroundColor: isOver ? '#e3f2fd' : '#f5f5f5'\n          }\n        }}\n      >\n        {children}\n      </Box>\n    );\n  };\n\n  // Navigate to previous/next week\n  const navigatePreviousWeek = () => {\n    const newWeekStart = new Date(weekStart);\n    newWeekStart.setDate(newWeekStart.getDate() - 7);\n    setWeekStart(newWeekStart);\n  };\n  \n  const navigateNextWeek = () => {\n    const newWeekStart = new Date(weekStart);\n    newWeekStart.setDate(newWeekStart.getDate() + 7);\n    setWeekStart(newWeekStart);\n  };\n  \n  // Set today as selected date and adjust week view\n  const goToToday = () => {\n    const today = new Date();\n    setSelectedDate(today.toISOString().split('T')[0]);\n    setWeekStart(today);\n  };\n  \n  // Format date for display\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n  };\n  \n  // Get technician color\n  const getTechnicianColor = (techId: string | null) => {\n    if (!techId || !technicianColors[techId]) return '#9e9e9e';\n    return technicianColors[techId];\n  };\n\n  const getTechnicianNames = (job: Job) => {\n    const allTechnicians = job.assigned_technicians || (job.assigned_technician ? [job.assigned_technician] : []);\n    \n    if (allTechnicians.length === 0) return 'Unassigned';\n    \n    const names = allTechnicians.map(techId => {\n      const tech = technicians.find(t => t.id === techId);\n      return tech ? tech.full_name : 'Unknown';\n    });\n    \n    return names.join(', ');\n  };\n\n  const getTechnicianDisplayIndicator = (job: Job) => {\n    const allTechnicians = job.assigned_technicians || (job.assigned_technician ? [job.assigned_technician] : []);\n    \n    if (allTechnicians.length === 0) return '';\n    if (allTechnicians.length === 1) return '👤';\n    return `👥${allTechnicians.length}`;\n  };\n\n  const handleStatusUpdate = async (jobId: string, newStatus: Job['status']) => {\n    try {\n      console.log(`Updating job ${jobId} status to ${newStatus}`);\n      \n      // Special handling for \"On The Way\" button\n      if (newStatus === 'on_the_way') {\n        await handleOnTheWay(jobId);\n      }\n      \n      // Update job status locally (in production, would call API)\n      setJobs(prev => prev.map(job => \n        job.id === jobId ? { ...job, status: newStatus } : job\n      ));\n      \n      // Update selected job\n      if (selectedJob && selectedJob.id === jobId) {\n        setSelectedJob({ ...selectedJob, status: newStatus });\n      }\n      \n      // Close dialog after status update\n      setOpenJobDialog(false);\n      setSelectedJob(null);\n      \n    } catch (error) {\n      console.error('Error updating job status:', error);\n      alert('Error updating job status');\n    }\n  };\n\n  const handleOnTheWay = async (jobId: string) => {\n    try {\n      // Get the job details\n      const job = jobs.find(j => j.id === jobId) || selectedJob;\n      if (!job) {\n        throw new Error('Job not found');\n      }\n\n      // Get technician name\n      const technicianName = getTechnicianNames(job).split(',')[0].trim(); // First technician\n      \n      // Simulate Google Maps API call for travel time\n      const estimatedTravelTime = Math.floor(Math.random() * 30) + 10; // 10-40 minutes\n      const minTime = estimatedTravelTime - 2;\n      const maxTime = estimatedTravelTime + 8; // Add 10 min buffer\n      \n      // Simulate sending SMS\n      const message = `${technicianName} from AJ Long Electric is on the way to your home, and should arrive in ${minTime}-${maxTime} mins.`;\n      \n      console.log('SMS Message:', message);\n      console.log('Sending to customer:', job.customer_name);\n      \n      alert(`SMS sent to ${job.customer_name}:\\n\\n\"${message}\"`);\n      \n    } catch (error) {\n      console.error('Error sending on-the-way notification:', error);\n      alert('Error sending notification');\n    }\n  };\n\n  const handleSendInvoice = async (jobId: string) => {\n    try {\n      const job = jobs.find(j => j.id === jobId) || selectedJob;\n      if (!job) return;\n      \n      console.log(`Sending invoice for job ${jobId}`);\n      alert(`Invoice sent to ${job.customer_name} for $${job.estimated_cost}`);\n      \n      // Update payment status\n      setJobs(prev => prev.map(j => \n        j.id === jobId ? { ...j, payment_status: 'due' as const } : j\n      ));\n      \n      if (selectedJob && selectedJob.id === jobId) {\n        setSelectedJob({ ...selectedJob, payment_status: 'due' });\n      }\n      \n    } catch (error) {\n      console.error('Error sending invoice:', error);\n      alert('Error sending invoice');\n    }\n  };\n\n  const handleCollectPayment = async (jobId: string) => {\n    try {\n      const job = jobs.find(j => j.id === jobId) || selectedJob;\n      if (!job) return;\n      \n      console.log(`Collecting payment for job ${jobId}`);\n      alert(`Payment of $${job.estimated_cost} collected from ${job.customer_name}`);\n      \n      // Update payment status\n      setJobs(prev => prev.map(j => \n        j.id === jobId ? { ...j, payment_status: 'paid' as const } : j\n      ));\n      \n      if (selectedJob && selectedJob.id === jobId) {\n        setSelectedJob({ ...selectedJob, payment_status: 'paid' });\n      }\n      \n    } catch (error) {\n      console.error('Error collecting payment:', error);\n      alert('Error collecting payment');\n    }\n  };\n\n  const fetchCustomers = async (search = '') => {\n    try {\n      const response = await customerApi.getAll(search ? { search } : {});\n      setAvailableCustomers(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      // Fallback demo customers\n      setAvailableCustomers([\n        { id: 1, full_name: 'John Smith', email: 'john@example.com', phone: '+12025551234' },\n        { id: 2, full_name: 'Sarah Davis', email: 'sarah@example.com', phone: '+12025551235' },\n        { id: 3, full_name: 'Mike Johnson', email: 'mike@example.com', phone: '+12025551236' },\n      ]);\n    }\n  };\n\n  const handleCustomerSelect = async (customer: any) => {\n    setNewJobData({\n      ...newJobData,\n      customer_id: customer.id,\n      customer_name: customer.full_name\n    });\n    setCustomerSearchQuery(customer.full_name);\n    setShowCustomerForm(false);\n    \n    // Fetch customer properties\n    await fetchCustomerProperties(customer.id);\n  };\n\n  const fetchCustomerProperties = async (customerId: number) => {\n    try {\n      const response = await customerApi.getProperties(customerId);\n      setSelectedCustomerProperties(response.data || []);\n      \n      // Auto-select if only one property\n      if (response.data && response.data.length === 1) {\n        setSelectedPropertyId(response.data[0].id);\n      } else {\n        setSelectedPropertyId(null);\n      }\n    } catch (error) {\n      console.error('Error fetching customer properties:', error);\n      // Fallback to demo properties\n      const demoProperties = [\n        {\n          id: 1,\n          property_type: 'single_family',\n          street_address: '123 Main St',\n          city: 'Springfield',\n          state: 'IL',\n          zip_code: '62701',\n          full_address: '123 Main St, Springfield, IL 62701'\n        },\n        {\n          id: 2,\n          property_type: 'commercial',\n          street_address: '456 Business Ave',\n          city: 'Springfield',\n          state: 'IL',\n          zip_code: '62702',\n          full_address: '456 Business Ave, Springfield, IL 62702'\n        }\n      ];\n      setSelectedCustomerProperties(demoProperties);\n      setSelectedPropertyId(null);\n    }\n  };\n\n  const handleCreateNewCustomer = async () => {\n    try {\n      const response = await customerApi.create(newCustomerData);\n      const newCustomer = response.data;\n      \n      // Add to available customers\n      setAvailableCustomers(prev => [newCustomer, ...prev]);\n      \n      // Select the new customer\n      handleCustomerSelect(newCustomer);\n      \n      // Reset form\n      setNewCustomerData({\n        first_name: '',\n        last_name: '',\n        email: '',\n        phone: '',\n        street_address: '',\n        city: '',\n        state: '',\n        zip_code: '',\n        customer_type: 'residential' as 'residential' | 'commercial'\n      });\n      \n      alert('Customer created successfully!');\n      \n    } catch (error) {\n      console.error('Error creating customer:', error);\n      alert('Error creating customer');\n    }\n  };\n\n  const resetJobForm = () => {\n    setNewJobData({\n      title: '',\n      customer_name: '',\n      service_type_name: '',\n      priority: 'medium',\n      estimated_duration: 2,\n      description: '',\n      customer_id: null,\n      job_type: 'job',\n      labor_rate: 125,\n      material_markup: 20,\n      subtotal: 0,\n      tax_rate: 8.25,\n      total_cost: 0\n    });\n    setLineItems([]);\n    setNewLineItem({\n      description: '',\n      quantity: 1,\n      unit_price: 0,\n      type: 'labor'\n    });\n    setCustomerSearchQuery('');\n    setShowCustomerForm(false);\n    setShowMaterialsCatalog(false);\n    setMaterialSearchQuery('');\n    setSelectedMaterialQuantity({});\n    setSelectedCustomerProperties([]);\n    setSelectedPropertyId(null);\n  };\n\n  // Line item management functions\n  const addLineItem = () => {\n    if (!newLineItem.description || newLineItem.unit_price <= 0) {\n      alert('Please enter a description and valid unit price');\n      return;\n    }\n\n    const lineItem = {\n      id: Date.now().toString(),\n      description: newLineItem.description,\n      quantity: newLineItem.quantity,\n      unit_price: newLineItem.unit_price,\n      total: newLineItem.quantity * newLineItem.unit_price,\n      type: newLineItem.type\n    };\n\n    setLineItems(prev => [...prev, lineItem]);\n    setNewLineItem({\n      description: '',\n      quantity: 1,\n      unit_price: 0,\n      type: 'labor'\n    });\n    \n    // Update totals\n    calculateEstimateTotals([...lineItems, lineItem]);\n  };\n\n  const removeLineItem = (id: string) => {\n    const updatedItems = lineItems.filter(item => item.id !== id);\n    setLineItems(updatedItems);\n    calculateEstimateTotals(updatedItems);\n  };\n\n  const calculateEstimateTotals = (items: typeof lineItems) => {\n    const subtotal = items.reduce((sum, item) => sum + item.total, 0);\n    const taxAmount = (subtotal * newJobData.tax_rate) / 100;\n    const total = subtotal + taxAmount;\n    \n    setNewJobData(prev => ({\n      ...prev,\n      subtotal,\n      total_cost: total\n    }));\n  };\n\n  // Update totals when tax rate changes\n  React.useEffect(() => {\n    calculateEstimateTotals(lineItems);\n  }, [newJobData.tax_rate]);\n\n  // Fallback materials catalog (used when inventory API is unavailable)\n  const fallbackMaterialsCatalog = [\n    // ===================\n    // CIRCUIT BREAKERS - SQUARE D / SCHNEIDER ELECTRIC\n    // ===================\n    { id: 'sqd-qo115', name: 'Square D QO 15A Single Pole Breaker', category: 'Circuit Breakers - Square D', price: 14.98, unit: 'each' },\n    { id: 'sqd-qo120', name: 'Square D QO 20A Single Pole Breaker', category: 'Circuit Breakers - Square D', price: 16.47, unit: 'each' },\n    { id: 'sqd-qo130', name: 'Square D QO 30A Single Pole Breaker', category: 'Circuit Breakers - Square D', price: 22.98, unit: 'each' },\n    { id: 'sqd-qo240', name: 'Square D QO 40A Double Pole Breaker', category: 'Circuit Breakers - Square D', price: 45.97, unit: 'each' },\n    { id: 'sqd-qo250', name: 'Square D QO 50A Double Pole Breaker', category: 'Circuit Breakers - Square D', price: 58.76, unit: 'each' },\n    { id: 'sqd-qo2100', name: 'Square D QO 100A Double Pole Breaker', category: 'Circuit Breakers - Square D', price: 125.99, unit: 'each' },\n    { id: 'sqd-qo120gfi', name: 'Square D QO 20A GFCI Breaker', category: 'Circuit Breakers - Square D', price: 89.97, unit: 'each' },\n    { id: 'sqd-qo115af', name: 'Square D QO 15A AFCI Breaker', category: 'Circuit Breakers - Square D', price: 75.98, unit: 'each' },\n    { id: 'sqd-qo120df', name: 'Square D QO 20A Dual Function AFCI/GFCI', category: 'Circuit Breakers - Square D', price: 125.99, unit: 'each' },\n    \n    // ===================\n    // CIRCUIT BREAKERS - SIEMENS\n    // ===================\n    { id: 'sie-q115', name: 'Siemens Q115 15A Single Pole Breaker', category: 'Circuit Breakers - Siemens', price: 12.48, unit: 'each' },\n    { id: 'sie-q120', name: 'Siemens Q120 20A Single Pole Breaker', category: 'Circuit Breakers - Siemens', price: 13.97, unit: 'each' },\n    { id: 'sie-q130', name: 'Siemens Q130 30A Single Pole Breaker', category: 'Circuit Breakers - Siemens', price: 19.98, unit: 'each' },\n    { id: 'sie-q240', name: 'Siemens Q240 40A Double Pole Breaker', category: 'Circuit Breakers - Siemens', price: 39.97, unit: 'each' },\n    { id: 'sie-q250', name: 'Siemens Q250 50A Double Pole Breaker', category: 'Circuit Breakers - Siemens', price: 52.76, unit: 'each' },\n    { id: 'sie-q120gfci', name: 'Siemens Q120GFCI 20A GFCI Breaker', category: 'Circuit Breakers - Siemens', price: 79.97, unit: 'each' },\n    { id: 'sie-q115af', name: 'Siemens Q115AF 15A AFCI Breaker', category: 'Circuit Breakers - Siemens', price: 69.98, unit: 'each' },\n\n    // ===================\n    // CIRCUIT BREAKERS - GENERAL ELECTRIC (GE)\n    // ===================\n    { id: 'ge-thql115', name: 'GE THQL115 15A Single Pole Breaker', category: 'Circuit Breakers - GE', price: 11.98, unit: 'each' },\n    { id: 'ge-thql120', name: 'GE THQL120 20A Single Pole Breaker', category: 'Circuit Breakers - GE', price: 13.47, unit: 'each' },\n    { id: 'ge-thql130', name: 'GE THQL130 30A Single Pole Breaker', category: 'Circuit Breakers - GE', price: 18.98, unit: 'each' },\n    { id: 'ge-thql240', name: 'GE THQL240 40A Double Pole Breaker', category: 'Circuit Breakers - GE', price: 37.97, unit: 'each' },\n    { id: 'ge-thql250', name: 'GE THQL250 50A Double Pole Breaker', category: 'Circuit Breakers - GE', price: 49.76, unit: 'each' },\n    { id: 'ge-thql1120gf', name: 'GE THQL1120GF 20A GFCI Breaker', category: 'Circuit Breakers - GE', price: 77.97, unit: 'each' },\n\n    // ===================\n    // CIRCUIT BREAKERS - EATON\n    // ===================\n    { id: 'eat-br115', name: 'Eaton BR115 15A Single Pole Breaker', category: 'Circuit Breakers - Eaton', price: 10.98, unit: 'each' },\n    { id: 'eat-br120', name: 'Eaton BR120 20A Single Pole Breaker', category: 'Circuit Breakers - Eaton', price: 12.47, unit: 'each' },\n    { id: 'eat-br130', name: 'Eaton BR130 30A Single Pole Breaker', category: 'Circuit Breakers - Eaton', price: 17.98, unit: 'each' },\n    { id: 'eat-br240', name: 'Eaton BR240 40A Double Pole Breaker', category: 'Circuit Breakers - Eaton', price: 35.97, unit: 'each' },\n    { id: 'eat-br250', name: 'Eaton BR250 50A Double Pole Breaker', category: 'Circuit Breakers - Eaton', price: 47.76, unit: 'each' },\n    { id: 'eat-brgf120', name: 'Eaton BRGF120 20A GFCI Breaker', category: 'Circuit Breakers - Eaton', price: 75.97, unit: 'each' },\n\n    // ===================\n    // WIRE & CABLE - ROMEX\n    // ===================\n    { id: 'romex-14-2-wg', name: '14-2 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 0.89, unit: 'foot' },\n    { id: 'romex-14-3-wg', name: '14-3 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 1.29, unit: 'foot' },\n    { id: 'romex-12-2-wg', name: '12-2 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 1.39, unit: 'foot' },\n    { id: 'romex-12-3-wg', name: '12-3 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 1.89, unit: 'foot' },\n    { id: 'romex-10-2-wg', name: '10-2 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 2.49, unit: 'foot' },\n    { id: 'romex-10-3-wg', name: '10-3 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 3.29, unit: 'foot' },\n    { id: 'romex-8-2-wg', name: '8-2 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 3.89, unit: 'foot' },\n    { id: 'romex-8-3-wg', name: '8-3 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 4.89, unit: 'foot' },\n    { id: 'romex-6-2-wg', name: '6-2 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 5.89, unit: 'foot' },\n    { id: 'romex-6-3-wg', name: '6-3 Romex NM-B Cable w/Ground', category: 'Wire & Cable - Romex', price: 7.29, unit: 'foot' },\n\n    // ===================\n    // WIRE & CABLE - THHN/THWN\n    // ===================\n    { id: 'thhn-14-black', name: '14 AWG THHN/THWN Stranded Black', category: 'Wire & Cable - THHN', price: 0.45, unit: 'foot' },\n    { id: 'thhn-14-white', name: '14 AWG THHN/THWN Stranded White', category: 'Wire & Cable - THHN', price: 0.45, unit: 'foot' },\n    { id: 'thhn-14-red', name: '14 AWG THHN/THWN Stranded Red', category: 'Wire & Cable - THHN', price: 0.45, unit: 'foot' },\n    { id: 'thhn-12-black', name: '12 AWG THHN/THWN Stranded Black', category: 'Wire & Cable - THHN', price: 0.65, unit: 'foot' },\n    { id: 'thhn-12-white', name: '12 AWG THHN/THWN Stranded White', category: 'Wire & Cable - THHN', price: 0.65, unit: 'foot' },\n    { id: 'thhn-12-red', name: '12 AWG THHN/THWN Stranded Red', category: 'Wire & Cable - THHN', price: 0.65, unit: 'foot' },\n    { id: 'thhn-10-black', name: '10 AWG THHN/THWN Stranded Black', category: 'Wire & Cable - THHN', price: 0.95, unit: 'foot' },\n    { id: 'thhn-10-white', name: '10 AWG THHN/THWN Stranded White', category: 'Wire & Cable - THHN', price: 0.95, unit: 'foot' },\n    { id: 'thhn-8-black', name: '8 AWG THHN/THWN Stranded Black', category: 'Wire & Cable - THHN', price: 1.45, unit: 'foot' },\n    { id: 'thhn-6-black', name: '6 AWG THHN/THWN Stranded Black', category: 'Wire & Cable - THHN', price: 2.15, unit: 'foot' },\n\n    // ===================\n    // OUTLETS & RECEPTACLES\n    // ===================\n    { id: 'rec-15a-std', name: '15A Standard Duplex Receptacle', category: 'Outlets & Receptacles', price: 1.48, unit: 'each' },\n    { id: 'rec-20a-std', name: '20A Standard Duplex Receptacle', category: 'Outlets & Receptacles', price: 2.98, unit: 'each' },\n    { id: 'rec-15a-gfci', name: '15A GFCI Receptacle', category: 'Outlets & Receptacles', price: 18.97, unit: 'each' },\n    { id: 'rec-20a-gfci', name: '20A GFCI Receptacle', category: 'Outlets & Receptacles', price: 22.97, unit: 'each' },\n    { id: 'rec-15a-usb', name: '15A USB-A Duplex Receptacle', category: 'Outlets & Receptacles', price: 24.98, unit: 'each' },\n    { id: 'rec-15a-usbc', name: '15A USB-C Duplex Receptacle', category: 'Outlets & Receptacles', price: 34.98, unit: 'each' },\n    { id: 'rec-20a-usb', name: '20A USB-A Duplex Receptacle', category: 'Outlets & Receptacles', price: 29.98, unit: 'each' },\n    { id: 'rec-gfci-usb', name: '20A GFCI with USB Charging', category: 'Outlets & Receptacles', price: 39.97, unit: 'each' },\n    { id: 'rec-smartwifi', name: 'Smart WiFi GFCI Receptacle', category: 'Outlets & Receptacles', price: 49.98, unit: 'each' },\n    { id: 'rec-weatherproof', name: 'Weatherproof GFCI Receptacle', category: 'Outlets & Receptacles', price: 26.98, unit: 'each' },\n\n    // ===================\n    // SWITCHES\n    // ===================\n    { id: 'sw-single-toggle', name: 'Single Pole Toggle Switch', category: 'Switches', price: 1.98, unit: 'each' },\n    { id: 'sw-single-decora', name: 'Single Pole Decora Switch', category: 'Switches', price: 3.48, unit: 'each' },\n    { id: 'sw-3way-toggle', name: '3-Way Toggle Switch', category: 'Switches', price: 3.98, unit: 'each' },\n    { id: 'sw-3way-decora', name: '3-Way Decora Switch', category: 'Switches', price: 5.48, unit: 'each' },\n    { id: 'sw-4way-toggle', name: '4-Way Toggle Switch', category: 'Switches', price: 12.98, unit: 'each' },\n    { id: 'sw-dimmer-led', name: 'LED Dimmer Switch', category: 'Switches', price: 24.98, unit: 'each' },\n    { id: 'sw-dimmer-3way', name: '3-Way LED Dimmer Switch', category: 'Switches', price: 34.98, unit: 'each' },\n    { id: 'sw-smart-wifi', name: 'Smart WiFi Switch', category: 'Switches', price: 19.98, unit: 'each' },\n    { id: 'sw-smart-dimmer', name: 'Smart WiFi Dimmer Switch', category: 'Switches', price: 39.98, unit: 'each' },\n    { id: 'sw-motion-sensor', name: 'Motion Sensor Switch', category: 'Switches', price: 29.98, unit: 'each' },\n    { id: 'sw-timer', name: 'Programmable Timer Switch', category: 'Switches', price: 22.98, unit: 'each' },\n\n    // ===================\n    // ELECTRICAL BOXES\n    // ===================\n    { id: 'box-1gang-pvc', name: 'Single Gang PVC Old Work Box', category: 'Electrical Boxes', price: 1.48, unit: 'each' },\n    { id: 'box-2gang-pvc', name: 'Double Gang PVC Old Work Box', category: 'Electrical Boxes', price: 2.98, unit: 'each' },\n    { id: 'box-3gang-pvc', name: 'Triple Gang PVC Old Work Box', category: 'Electrical Boxes', price: 4.98, unit: 'each' },\n    { id: 'box-1gang-metal', name: 'Single Gang Metal Box', category: 'Electrical Boxes', price: 2.48, unit: 'each' },\n    { id: 'box-2gang-metal', name: 'Double Gang Metal Box', category: 'Electrical Boxes', price: 3.98, unit: 'each' },\n    { id: 'box-ceiling-pvc', name: 'Ceiling Fan PVC Box', category: 'Electrical Boxes', price: 3.98, unit: 'each' },\n    { id: 'box-ceiling-metal', name: 'Ceiling Fan Metal Box', category: 'Electrical Boxes', price: 5.98, unit: 'each' },\n    { id: 'box-4x4-sq', name: '4\" x 4\" Square Junction Box', category: 'Electrical Boxes', price: 3.48, unit: 'each' },\n    { id: 'box-4x4-oct', name: '4\" Octagon Ceiling Box', category: 'Electrical Boxes', price: 2.98, unit: 'each' },\n    { id: 'box-weatherproof', name: 'Weatherproof Outdoor Box', category: 'Electrical Boxes', price: 8.98, unit: 'each' },\n\n    // ===================\n    // CONDUIT & FITTINGS\n    // ===================\n    { id: 'conduit-emt-12', name: '1/2\" EMT Electrical Conduit', category: 'Conduit & Fittings', price: 3.48, unit: 'foot' },\n    { id: 'conduit-emt-34', name: '3/4\" EMT Electrical Conduit', category: 'Conduit & Fittings', price: 4.98, unit: 'foot' },\n    { id: 'conduit-emt-1', name: '1\" EMT Electrical Conduit', category: 'Conduit & Fittings', price: 6.98, unit: 'foot' },\n    { id: 'conduit-pvc-12', name: '1/2\" PVC Schedule 40 Conduit', category: 'Conduit & Fittings', price: 2.48, unit: 'foot' },\n    { id: 'conduit-pvc-34', name: '3/4\" PVC Schedule 40 Conduit', category: 'Conduit & Fittings', price: 3.48, unit: 'foot' },\n    { id: 'conduit-pvc-1', name: '1\" PVC Schedule 40 Conduit', category: 'Conduit & Fittings', price: 4.98, unit: 'foot' },\n    { id: 'fitting-emt-conn-12', name: '1/2\" EMT Connector', category: 'Conduit & Fittings', price: 1.98, unit: 'each' },\n    { id: 'fitting-emt-conn-34', name: '3/4\" EMT Connector', category: 'Conduit & Fittings', price: 2.98, unit: 'each' },\n    { id: 'fitting-emt-coup-12', name: '1/2\" EMT Coupling', category: 'Conduit & Fittings', price: 1.48, unit: 'each' },\n    { id: 'fitting-90-12', name: '1/2\" 90° EMT Elbow', category: 'Conduit & Fittings', price: 2.98, unit: 'each' },\n\n    // ===================\n    // ELECTRICAL PANELS\n    // ===================\n    { id: 'panel-sqd-qo120', name: 'Square D QO 20-Circuit Load Center 120/240V', category: 'Electrical Panels', price: 189.00, unit: 'each' },\n    { id: 'panel-sqd-qo140', name: 'Square D QO 40-Circuit Load Center 120/240V', category: 'Electrical Panels', price: 298.00, unit: 'each' },\n    { id: 'panel-sqd-qo200', name: 'Square D QO 200A 40-Circuit Main Breaker Panel', category: 'Electrical Panels', price: 445.00, unit: 'each' },\n    { id: 'panel-sie-s2040', name: 'Siemens 40-Circuit Load Center 120/240V', category: 'Electrical Panels', price: 185.00, unit: 'each' },\n    { id: 'panel-sie-200a', name: 'Siemens 200A 40-Circuit Main Breaker Panel', category: 'Electrical Panels', price: 425.00, unit: 'each' },\n    { id: 'panel-ge-load', name: 'GE PowerMark 40-Circuit Load Center', category: 'Electrical Panels', price: 175.00, unit: 'each' },\n    { id: 'subpanel-100a', name: '100A Sub Panel Load Center', category: 'Electrical Panels', price: 125.00, unit: 'each' },\n\n    // ===================\n    // LIGHTING & FIXTURES\n    // ===================\n    { id: 'led-recessed-4', name: '4\" LED Recessed Downlight', category: 'Lighting & Fixtures', price: 12.98, unit: 'each' },\n    { id: 'led-recessed-6', name: '6\" LED Recessed Downlight', category: 'Lighting & Fixtures', price: 18.98, unit: 'each' },\n    { id: 'led-recessed-adj', name: '6\" LED Adjustable Recessed Light', category: 'Lighting & Fixtures', price: 24.98, unit: 'each' },\n    { id: 'fixture-flush-led', name: 'LED Flush Mount Ceiling Light', category: 'Lighting & Fixtures', price: 39.98, unit: 'each' },\n    { id: 'fixture-pendant', name: 'Mini Pendant Light Fixture', category: 'Lighting & Fixtures', price: 29.98, unit: 'each' },\n    { id: 'fixture-chandelier', name: 'Traditional Chandelier 5-Light', category: 'Lighting & Fixtures', price: 129.00, unit: 'each' },\n    { id: 'fixture-vanity', name: '3-Light Vanity Bar Fixture', category: 'Lighting & Fixtures', price: 59.98, unit: 'each' },\n    { id: 'fixture-outdoor', name: 'Outdoor Wall Lantern', category: 'Lighting & Fixtures', price: 34.98, unit: 'each' },\n    { id: 'under-cabinet-led', name: 'Under Cabinet LED Light Strip', category: 'Lighting & Fixtures', price: 24.98, unit: 'each' },\n\n    // ===================\n    // SPECIALTY & SAFETY\n    // ===================\n    { id: 'smoke-detector-battery', name: 'Battery Smoke Detector', category: 'Specialty & Safety', price: 14.98, unit: 'each' },\n    { id: 'smoke-detector-hardwired', name: 'Hardwired Smoke Detector', category: 'Specialty & Safety', price: 22.98, unit: 'each' },\n    { id: 'co-detector', name: 'Carbon Monoxide Detector', category: 'Specialty & Safety', price: 29.98, unit: 'each' },\n    { id: 'smoke-co-combo', name: 'Smoke & CO Combo Detector', category: 'Specialty & Safety', price: 39.98, unit: 'each' },\n    { id: 'surge-whole-house', name: 'Whole House Surge Protector', category: 'Specialty & Safety', price: 189.00, unit: 'each' },\n    { id: 'surge-strip', name: '8-Outlet Surge Protector Strip', category: 'Specialty & Safety', price: 24.98, unit: 'each' },\n    { id: 'doorbell-wired', name: 'Wired Doorbell Kit', category: 'Specialty & Safety', price: 19.98, unit: 'each' },\n    { id: 'doorbell-smart', name: 'Smart Video Doorbell', category: 'Specialty & Safety', price: 99.99, unit: 'each' },\n    { id: 'exhaust-fan-bath', name: 'Bathroom Exhaust Fan 80 CFM', category: 'Specialty & Safety', price: 29.98, unit: 'each' },\n    { id: 'exhaust-fan-quiet', name: 'Ultra-Quiet Bathroom Fan 110 CFM', category: 'Specialty & Safety', price: 79.98, unit: 'each' },\n\n    // ===================\n    // EV CHARGING & HIGH-AMP\n    // ===================\n    { id: 'ev-charger-l2-32a', name: '32A Level 2 EV Charger', category: 'EV Charging', price: 499.00, unit: 'each' },\n    { id: 'ev-charger-l2-40a', name: '40A Level 2 EV Charger', category: 'EV Charging', price: 649.00, unit: 'each' },\n    { id: 'ev-charger-smart', name: 'Smart WiFi EV Charger 32A', category: 'EV Charging', price: 699.00, unit: 'each' },\n    { id: 'nema-6-50', name: 'NEMA 6-50 50A 240V Receptacle', category: 'EV Charging', price: 24.98, unit: 'each' },\n    { id: 'nema-14-50', name: 'NEMA 14-50 50A 240V Receptacle', category: 'EV Charging', price: 29.98, unit: 'each' },\n    { id: 'dryer-cord-4wire', name: '4-Wire 30A Dryer Cord', category: 'EV Charging', price: 34.98, unit: 'each' },\n\n    // ===================\n    // WIRE NUTS & CONNECTORS\n    // ===================\n    { id: 'wirenut-yellow', name: 'Yellow Wire Nuts (100 pack)', category: 'Wire Nuts & Connectors', price: 12.98, unit: 'pack' },\n    { id: 'wirenut-red', name: 'Red Wire Nuts (100 pack)', category: 'Wire Nuts & Connectors', price: 14.98, unit: 'pack' },\n    { id: 'wirenut-blue', name: 'Blue Wire Nuts (100 pack)', category: 'Wire Nuts & Connectors', price: 16.98, unit: 'pack' },\n    { id: 'wirenut-orange', name: 'Orange Wire Nuts (100 pack)', category: 'Wire Nuts & Connectors', price: 9.98, unit: 'pack' },\n    { id: 'wago-221', name: 'WAGO 221 Lever Connectors (25 pack)', category: 'Wire Nuts & Connectors', price: 24.98, unit: 'pack' },\n    { id: 'wiremold-splice', name: 'In-Line Splice Kit', category: 'Wire Nuts & Connectors', price: 8.98, unit: 'each' },\n\n    // ===================\n    // COVERS & PLATES\n    // ===================\n    { id: 'plate-1gang-white', name: 'Single Gang Toggle Switch Plate - White', category: 'Covers & Plates', price: 0.98, unit: 'each' },\n    { id: 'plate-1gang-almond', name: 'Single Gang Toggle Switch Plate - Almond', category: 'Covers & Plates', price: 1.28, unit: 'each' },\n    { id: 'plate-1gang-decora', name: 'Single Gang Decora Switch Plate - White', category: 'Covers & Plates', price: 1.48, unit: 'each' },\n    { id: 'plate-2gang-white', name: 'Double Gang Switch Plate - White', category: 'Covers & Plates', price: 1.98, unit: 'each' },\n    { id: 'plate-outlet-white', name: 'Duplex Outlet Cover Plate - White', category: 'Covers & Plates', price: 0.78, unit: 'each' },\n    { id: 'plate-blank-white', name: 'Blank Cover Plate - White', category: 'Covers & Plates', price: 0.98, unit: 'each' },\n    { id: 'plate-gfci-white', name: 'GFCI Outlet Cover Plate - White', category: 'Covers & Plates', price: 1.98, unit: 'each' }\n  ];\n\n  // Material pricing markup tiers\n  const materialMarkupTiers = [\n    { min: 0, max: 25, markup: 0.50 },      // 0-$25: 50% markup\n    { min: 25.01, max: 50, markup: 0.40 },  // $25.01-$50: 40% markup  \n    { min: 50.01, max: 100, markup: 0.35 }, // $50.01-$100: 35% markup\n    { min: 100.01, max: 250, markup: 0.30 }, // $100.01-$250: 30% markup\n    { min: 250.01, max: 500, markup: 0.25 }, // $250.01-$500: 25% markup\n    { min: 500.01, max: Infinity, markup: 0.20 } // $500+: 20% markup\n  ];\n\n  // Function to calculate markup price based on cost tiers\n  const calculateMarkupPrice = (costPrice: number): number => {\n    const tier = materialMarkupTiers.find(tier => \n      costPrice >= tier.min && costPrice <= tier.max\n    );\n    \n    if (!tier) return costPrice * 1.35; // Default 35% if no tier matches\n    \n    return costPrice * (1 + tier.markup);\n  };\n\n  // Function to get markup percentage for display\n  const getMarkupPercentage = (costPrice: number): number => {\n    const tier = materialMarkupTiers.find(tier => \n      costPrice >= tier.min && costPrice <= tier.max\n    );\n    \n    return tier ? tier.markup * 100 : 35; // Default 35% if no tier matches\n  };\n\n  // Material catalog item type\n  type MaterialCatalogItem = {\n    id: string;\n    name: string;\n    category: string;\n    price: number; // Customer price (with markup)\n    unit: string;\n    sku?: string;\n    current_stock?: number;\n    minimum_stock?: number;\n    isLowStock?: boolean;\n    description?: string;\n    costPrice?: number; // Base cost price\n    markupPercentage?: number; // Markup percentage applied\n  };\n\n  // Computed materials catalog that uses inventory data when available\n  const materialsCatalog: MaterialCatalogItem[] = React.useMemo(() => {\n    if (inventoryItems.length > 0) {\n      // Convert inventory items to materials catalog format with markup\n      return inventoryItems.map(item => ({\n        id: item.id.toString(),\n        name: item.name,\n        category: item.category_name || 'General',\n        price: calculateMarkupPrice(item.cost_price || item.unit_price), // Apply markup to cost price\n        unit: item.unit_of_measure,\n        sku: item.sku,\n        current_stock: item.current_stock,\n        minimum_stock: item.minimum_stock,\n        isLowStock: item.current_stock <= item.minimum_stock,\n        description: item.description,\n        costPrice: item.cost_price || item.unit_price,\n        markupPercentage: getMarkupPercentage(item.cost_price || item.unit_price)\n      }));\n    }\n    // Fall back to static catalog if no inventory data - apply markup to static prices\n    return fallbackMaterialsCatalog.map(item => ({\n      ...item,\n      price: calculateMarkupPrice(item.price), // Apply markup to fallback prices\n      current_stock: undefined,\n      minimum_stock: undefined,\n      isLowStock: false,\n      sku: undefined,\n      description: undefined,\n      costPrice: item.price, // Original price becomes cost price\n      markupPercentage: getMarkupPercentage(item.price)\n    }));\n  }, [inventoryItems]);\n\n  const addMaterialToLineItems = (material: MaterialCatalogItem, quantity?: number) => {\n    const qty = quantity || selectedMaterialQuantity[material.id] || 1;\n    \n    // Check stock availability for inventory items\n    if (material.current_stock !== undefined && qty > material.current_stock) {\n      alert(`Only ${material.current_stock} ${material.unit} available in stock. Please adjust quantity.`);\n      return;\n    }\n    \n    const lineItem = {\n      id: Date.now().toString(),\n      description: material.name,\n      quantity: qty,\n      unit_price: material.price,\n      total: qty * material.price,\n      type: 'material' as const,\n      // Add inventory tracking fields\n      inventory_item_id: material.current_stock !== undefined ? parseInt(material.id) : null,\n      sku: material.sku || null\n    };\n\n    setLineItems(prev => [...prev, lineItem]);\n    calculateEstimateTotals([...lineItems, lineItem]);\n    \n    // Track material usage for inventory items\n    if (material.current_stock !== undefined) {\n      trackMaterialUsage(parseInt(material.id), qty, 'estimate');\n    }\n    \n    // Reset quantity for this material\n    setSelectedMaterialQuantity(prev => ({ ...prev, [material.id]: 1 }));\n  };\n\n  // Track material usage in estimates/jobs\n  const trackMaterialUsage = async (itemId: number, quantity: number, type: 'estimate' | 'job') => {\n    try {\n      // Log material usage for tracking purposes\n      console.log(`Material usage tracked: Item ${itemId}, Quantity ${quantity}, Type: ${type}`);\n      \n      // In production, this would call an API to record material usage\n      // For now, we'll track it locally and optionally sync later\n      const usageRecord = {\n        item_id: itemId,\n        quantity_used: quantity,\n        usage_type: type,\n        timestamp: new Date().toISOString(),\n        reference_type: type,\n        reference_id: null, // Will be set when estimate/job is saved\n      };\n      \n      // Update local inventory items to reflect pending usage\n      setInventoryItems(prev => prev.map(item => \n        item.id === itemId \n          ? { \n              ...item, \n              pending_usage: ((item as any).pending_usage || 0) + quantity,\n              available_stock: item.current_stock - (((item as any).pending_usage || 0) + quantity)\n            } as Item & { pending_usage?: number; available_stock?: number }\n          : item\n      ));\n      \n    } catch (error) {\n      console.error('Error tracking material usage:', error);\n      // Don't block the user workflow for tracking errors\n    }\n  };\n\n  // Update inventory quantities when materials are consumed\n  const updateInventoryQuantities = async (lineItems: any[], jobId: string, type: 'job_created' | 'estimate_approved') => {\n    try {\n      const materialLineItems = lineItems.filter(item => \n        item.type === 'material' && item.inventory_item_id\n      );\n      \n      if (materialLineItems.length === 0) return;\n      \n      console.log(`Updating inventory for ${materialLineItems.length} items (${type})`);\n      \n      // Process each material line item\n      for (const lineItem of materialLineItems) {\n        try {\n          // Create stock movement record via API\n          // await inventoryApi.adjustStock(\n          //   lineItem.inventory_item_id,\n          //   -lineItem.quantity, // Negative to reduce stock\n          //   `Used in ${type === 'job_created' ? 'job' : 'approved estimate'} ${jobId}`\n          // );\n          \n          // For now, update local state to simulate the API call\n          setInventoryItems(prev => prev.map(item => {\n            if (item.id === lineItem.inventory_item_id) {\n              const newStock = Math.max(0, item.current_stock - lineItem.quantity);\n              console.log(`Updating item ${item.name}: ${item.current_stock} -> ${newStock}`);\n              \n              return {\n                ...item,\n                current_stock: newStock,\n                pending_usage: Math.max(0, ((item as any).pending_usage || 0) - lineItem.quantity)\n              } as Item & { pending_usage?: number };\n            }\n            return item;\n          }));\n          \n          // Refresh low stock items\n          setLowStockItems(prev => {\n            const updatedItems = inventoryItems.map(item => {\n              if (item.id === lineItem.inventory_item_id) {\n                const newStock = Math.max(0, item.current_stock - lineItem.quantity);\n                return { ...item, current_stock: newStock };\n              }\n              return item;\n            });\n            return updatedItems.filter(item => item.current_stock <= item.minimum_stock);\n          });\n          \n        } catch (itemError) {\n          console.error(`Error updating inventory for item ${lineItem.inventory_item_id}:`, itemError);\n          // Continue with other items even if one fails\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error updating inventory quantities:', error);\n      // Don't block the main workflow for inventory errors\n    }\n  };\n\n  // Estimate approval workflow functions\n  const handleEstimateStatusUpdate = async (jobId: string, newStatus: NonNullable<Job['estimate_status']>) => {\n    try {\n      console.log(`Updating estimate ${jobId} status to ${newStatus}`);\n      \n      // Update estimate status locally (in production, would call API)\n      setJobs(prev => prev.map(job => \n        job.id === jobId ? { ...job, estimate_status: newStatus } : job\n      ));\n      \n      setUnscheduledJobs(prev => prev.map(job => \n        job.id === jobId ? { ...job, estimate_status: newStatus } : job\n      ));\n      \n      // Update selected job if it's the one being modified\n      if (selectedJob && selectedJob.id === jobId) {\n        setSelectedJob({ ...selectedJob, estimate_status: newStatus });\n      }\n      \n      // Show status-specific messages\n      const statusMessages = {\n        'draft': 'Estimate saved as draft',\n        'sent': 'Estimate sent to customer via email',\n        'viewed': 'Customer has viewed the estimate',\n        'approved': 'Estimate approved by customer!',\n        'rejected': 'Estimate rejected by customer',\n        'expired': 'Estimate has expired'\n      };\n      \n      if (statusMessages[newStatus]) {\n        alert(statusMessages[newStatus]);\n      }\n      \n      // Update inventory when estimate is approved\n      if (newStatus === 'approved') {\n        const estimate = jobs.find(j => j.id === jobId) || unscheduledJobs.find(j => j.id === jobId);\n        if (estimate && (estimate as any).line_items) {\n          await updateInventoryQuantities((estimate as any).line_items, jobId, 'estimate_approved');\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error updating estimate status:', error);\n      alert('Error updating estimate status');\n    }\n  };\n\n  const convertEstimateToJob = async (estimateId: string) => {\n    try {\n      const estimate = jobs.find(j => j.id === estimateId) || unscheduledJobs.find(j => j.id === estimateId);\n      if (!estimate || estimate.job_type !== 'estimate') {\n        throw new Error('Estimate not found');\n      }\n\n      console.log(`Converting estimate ${estimateId} to job`);\n      \n      // Create new job from estimate\n      const newJob = {\n        ...estimate,\n        id: `job-${Date.now()}`,\n        job_number: estimate.job_number.replace('EST-', 'JOB-'),\n        job_type: 'job' as const,\n        status: 'pending' as const,\n        estimate_status: undefined\n      };\n\n      // Add new job to unscheduled jobs\n      setUnscheduledJobs(prev => [newJob, ...prev]);\n      \n      // Update inventory quantities when converting to job\n      if ((estimate as any).line_items) {\n        await updateInventoryQuantities((estimate as any).line_items, newJob.id, 'job_created');\n      }\n      \n      // Update original estimate status to indicate it's been converted\n      handleEstimateStatusUpdate(estimateId, 'approved');\n      \n      alert(`Estimate converted to Job ${newJob.job_number}`);\n      setOpenJobDialog(false);\n      setSelectedJob(null);\n      \n    } catch (error) {\n      console.error('Error converting estimate to job:', error);\n      alert('Error converting estimate to job');\n    }\n  };\n\n  const sendEstimateToCustomer = async (estimateId: string) => {\n    try {\n      const estimate = jobs.find(j => j.id === estimateId) || unscheduledJobs.find(j => j.id === estimateId);\n      if (!estimate) {\n        throw new Error('Estimate not found');\n      }\n\n      console.log(`Sending estimate ${estimateId} to customer`);\n      \n      // Simulate sending estimate via email\n      const emailMessage = `Dear ${estimate.customer_name},\n\nThank you for choosing AJ Long Electric for your electrical needs.\n\nPlease find your estimate attached:\n- Estimate #: ${estimate.job_number}\n- Service: ${estimate.title}\n- Total Cost: $${estimate.estimated_cost?.toFixed(2) || '0.00'}\n\nThis estimate is valid for 30 days from the date of issue.\n\nTo approve this estimate, please reply to this email or call us at (555) 123-4567.\n\nBest regards,\nAJ Long Electric Team`;\n\n      alert(`Email sent to ${estimate.customer_name}:\\n\\n${emailMessage}`);\n      \n      // Update status to 'sent'\n      handleEstimateStatusUpdate(estimateId, 'sent');\n      \n    } catch (error) {\n      console.error('Error sending estimate:', error);\n      alert('Error sending estimate');\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress size={40} sx={{ mb: 2 }} />\n        <Typography variant=\"h6\" color=\"textSecondary\">Loading scheduling data...</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ minHeight: '100vh', backgroundColor: '#f8fafc', p: 3 }}>\n      {/* Modern Header with Stats */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Box>\n            <Typography variant=\"h4\" fontWeight=\"600\" color=\"text.primary\" gutterBottom>\n              Schedule Manager\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Manage jobs, schedules, and technician assignments\n            </Typography>\n          </Box>\n          \n          {/* Quick Stats */}\n          <Grid container spacing={2} sx={{ width: 'auto', minWidth: 400 }}>\n            <Grid item>\n              <Card sx={{ p: 2, textAlign: 'center', minWidth: 120 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>\n                  <Avatar sx={{ bgcolor: '#e3f2fd', color: '#1976d2', width: 32, height: 32 }}>\n                    <WorkIcon fontSize=\"small\" />\n                  </Avatar>\n                </Box>\n                <Typography variant=\"h6\" fontWeight=\"600\">{jobs.length}</Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">Total Jobs</Typography>\n              </Card>\n            </Grid>\n            <Grid item>\n              <Card sx={{ p: 2, textAlign: 'center', minWidth: 120 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>\n                  <Avatar sx={{ bgcolor: '#fff3e0', color: '#ed6c02', width: 32, height: 32 }}>\n                    <ScheduleIcon fontSize=\"small\" />\n                  </Avatar>\n                </Box>\n                <Typography variant=\"h6\" fontWeight=\"600\">{unscheduledJobs.length}</Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">Unscheduled</Typography>\n              </Card>\n            </Grid>\n            <Grid item>\n              <Card sx={{ p: 2, textAlign: 'center', minWidth: 120 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>\n                  <Avatar sx={{ bgcolor: '#ffebee', color: '#d32f2f', width: 32, height: 32 }}>\n                    <EmergencyIcon fontSize=\"small\" />\n                  </Avatar>\n                </Box>\n                <Typography variant=\"h6\" fontWeight=\"600\">\n                  {jobs.filter(j => j.priority === 'emergency').length}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">Emergency</Typography>\n              </Card>\n            </Grid>\n          </Grid>\n        </Box>\n\n        {/* Modern Control Bar */}\n        <Card sx={{ p: 2, mb: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              {/* View Mode Toggle */}\n              <ToggleButtonGroup\n                value={viewMode}\n                exclusive\n                onChange={(_, newMode) => newMode && setViewMode(newMode)}\n                size=\"small\"\n              >\n                <ToggleButton value=\"day\" aria-label=\"day view\">\n                  <ViewDayIcon fontSize=\"small\" />\n                  <Typography variant=\"body2\" sx={{ ml: 1 }}>Day</Typography>\n                </ToggleButton>\n                <ToggleButton value=\"week\" aria-label=\"week view\">\n                  <ViewWeekIcon fontSize=\"small\" />\n                  <Typography variant=\"body2\" sx={{ ml: 1 }}>Week</Typography>\n                </ToggleButton>\n                <ToggleButton value=\"list\" aria-label=\"list view\">\n                  <ViewListIcon fontSize=\"small\" />\n                  <Typography variant=\"body2\" sx={{ ml: 1 }}>List</Typography>\n                </ToggleButton>\n              </ToggleButtonGroup>\n\n              <Divider orientation=\"vertical\" flexItem />\n\n              {/* Date Navigation */}\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <IconButton size=\"small\" onClick={navigatePreviousWeek}>\n                  <ChevronLeftIcon />\n                </IconButton>\n                <Typography variant=\"h6\" fontWeight=\"500\" sx={{ minWidth: 200, textAlign: 'center' }}>\n                  {viewMode === 'week' \n                    ? `Week of ${formatDate(weekDates[0] || selectedDate)}`\n                    : formatDate(selectedDate)\n                  }\n                </Typography>\n                <IconButton size=\"small\" onClick={navigateNextWeek}>\n                  <ChevronRightIcon />\n                </IconButton>\n              </Box>\n\n              <Button variant=\"outlined\" size=\"small\" onClick={goToToday} startIcon={<TodayIcon />}>\n                Today\n              </Button>\n            </Box>\n\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              {/* Search and Filters */}\n              <TextField\n                size=\"small\"\n                placeholder=\"Search jobs...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                InputProps={{\n                  startAdornment: <SearchIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\n                }}\n                sx={{ width: 200 }}\n              />\n\n              <IconButton \n                size=\"small\" \n                onClick={() => {\n                  setRefreshing(true);\n                  fetchJobsCallback().finally(() => setRefreshing(false));\n                }}\n                disabled={refreshing}\n              >\n                <RefreshIcon className={refreshing ? 'animate-spin' : ''} />\n              </IconButton>\n\n              <Button\n                variant=\"outlined\"\n                startIcon={<AddIcon />}\n                onClick={() => {\n                  setSelectedJob(null);\n                  setIsCreatingJob(true);\n                  setNewJobData(prev => ({...prev, job_type: 'job'}));\n                  setOpenJobDialog(true);\n                }}\n              >\n                New Job\n              </Button>\n\n              <Button\n                variant=\"contained\"\n                startIcon={<DocumentIcon />}\n                onClick={() => {\n                  setSelectedJob(null);\n                  setIsCreatingJob(true);\n                  setNewJobData(prev => ({...prev, job_type: 'estimate'}));\n                  setOpenJobDialog(true);\n                }}\n              >\n                New Estimate\n              </Button>\n            </Box>\n          </Box>\n        </Card>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Render Content Based on View Mode */}\n      {viewMode === 'list' ? (\n        <Card sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>All Jobs</Typography>\n          <Grid container spacing={2}>\n            {filteredJobs.map((job) => (\n              <Grid item xs={12} md={6} lg={4} key={job.id}>\n                <Card \n                  sx={{ \n                    p: 2,\n                    borderLeft: `4px solid ${getPriorityColor(job.priority)}`,\n                    cursor: 'pointer',\n                    '&:hover': { elevation: 4 }\n                  }}\n                  onClick={() => {\n                    setSelectedJob(job);\n                    setOpenJobDialog(true);\n                  }}\n                >\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                    <Typography variant=\"subtitle1\" fontWeight=\"600\">\n                      {job.title}\n                    </Typography>\n                    <Chip \n                      size=\"small\" \n                      label={job.priority} \n                      color={job.priority === 'emergency' ? 'error' : job.priority === 'high' ? 'warning' : 'default'}\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    {job.customer_name}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {job.scheduled_date ? formatDate(job.scheduled_date) : 'Unscheduled'}\n                  </Typography>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Card>\n      ) : (\n        <DndContext sensors={sensors} onDragStart={handleDragStart} onDragEnd={handleDragEnd}>\n          <Grid container spacing={3}>\n            {/* Sidebar - Unscheduled Jobs */}\n            <Grid item xs={12} lg={3}>\n              <Card sx={{ height: 'fit-content' }}>\n                <CardHeader \n                  title={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <ScheduleIcon color=\"warning\" />\n                      <Typography variant=\"h6\">Unscheduled Jobs</Typography>\n                      <Badge badgeContent={unscheduledJobs.length} color=\"warning\" />\n                    </Box>\n                  }\n                />\n                <CardContent sx={{ pt: 0 }}>\n                  <SortableContext items={unscheduledJobs.map(job => job.id)} strategy={verticalListSortingStrategy}>\n                    <Stack spacing={1} sx={{ minHeight: 200 }}>\n                      {unscheduledJobs.map((job) => (\n                        <SortableJobCard key={job.id} job={job} />\n                      ))}\n                      {unscheduledJobs.length === 0 && (\n                        <Box sx={{ \n                          display: 'flex', \n                          flexDirection: 'column', \n                          alignItems: 'center', \n                          justifyContent: 'center',\n                          py: 4,\n                          color: 'text.secondary'\n                        }}>\n                          <CheckCircleIcon sx={{ fontSize: 48, mb: 1, opacity: 0.5 }} />\n                          <Typography variant=\"body2\">All jobs scheduled!</Typography>\n                        </Box>\n                      )}\n                    </Stack>\n                  </SortableContext>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            {/* Main Calendar View */}\n            <Grid item xs={12} lg={9}>\n              <Card sx={{ overflow: 'hidden' }}>\n                <CardHeader\n                  title={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <CalendarIcon color=\"primary\" />\n                      <Typography variant=\"h6\">\n                        {viewMode === 'week' ? 'Weekly Schedule' : 'Daily Schedule'}\n                      </Typography>\n                    </Box>\n                  }\n                  action={\n                    <Box sx={{ display: 'flex', gap: 1 }}>\n                      <Chip \n                        size=\"small\" \n                        label={`${jobs.filter(j => j.scheduled_date === selectedDate).length} jobs today`}\n                        color=\"primary\"\n                        variant=\"outlined\"\n                      />\n                    </Box>\n                  }\n                />\n                <CardContent sx={{ p: 0 }}>\n                  {loading ? (\n                    <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n                      <CircularProgress />\n                    </Box>\n                  ) : (\n                    <Paper sx={{ overflow: 'auto', maxHeight: '70vh' }}>\n                      <Box sx={{ minWidth: viewMode === 'week' ? 1000 : 400 }}>\n                        {/* Calendar content will go here */}\n                        <Typography variant=\"body2\" sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>\n                          Calendar view will be rendered here\n                        </Typography>\n                      </Box>\n                    </Paper>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n          \n          <DragOverlay>\n            {activeJob ? (\n              <Card sx={{ borderLeft: `4px solid ${getPriorityColor(activeJob.priority)}`, opacity: 0.8 }}>\n                <CardContent>\n                  <Typography variant=\"subtitle2\">{activeJob.title}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">{activeJob.customer_name}</Typography>\n                </CardContent>\n              </Card>\n            ) : null}\n          </DragOverlay>\n        </DndContext>\n      )}\n\n      {/* Floating Action Button for Quick Job Creation */}\n      <Zoom in={true}>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add job\"\n          sx={{\n            position: 'fixed',\n            bottom: 16,\n            right: 16,\n            zIndex: 1000\n          }}\n          onClick={() => {\n            setSelectedJob(null);\n            setIsCreatingJob(true);\n            setNewJobData(prev => ({...prev, job_type: 'job'}));\n            setOpenJobDialog(true);\n          }}\n        >\n          <AddIcon />\n        </Fab>\n      </Zoom>\n\n      {/* Job Details Dialog */}\n      <Dialog\n        open={openJobDialog}\n        onClose={() => {\n          setOpenJobDialog(false);\n          setIsCreatingJob(false);\n          setSelectedJob(null);\n        }}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {isCreatingJob ? `Create New ${newJobData.job_type === 'estimate' ? 'Estimate' : 'Job'}` : selectedJob ? `Job Details: ${selectedJob.job_number}` : 'Job Details'}\n        </DialogTitle>\n        <DialogContent>\n          {isCreatingJob ? (\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label={`${newJobData.job_type === 'estimate' ? 'Estimate' : 'Job'} Title`}\n                  value={newJobData.title}\n                  onChange={(e) => setNewJobData({...newJobData, title: e.target.value})}\n                  required\n                />\n              </Grid>\n              \n              {/* Customer Selection */}\n              <Grid item xs={12}>\n                <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-end' }}>\n                  <TextField\n                    fullWidth\n                    label=\"Search Customer\"\n                    value={customerSearchQuery}\n                    onChange={(e) => {\n                      setCustomerSearchQuery(e.target.value);\n                      if (e.target.value.length > 2) {\n                        fetchCustomers(e.target.value);\n                      }\n                    }}\n                    placeholder=\"Type customer name...\"\n                    helperText={newJobData.customer_id ? \"Customer selected\" : \"Search existing customers or add new\"}\n                  />\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => setShowCustomerForm(true)}\n                    sx={{ mb: 2.5, minWidth: 'auto', px: 2 }}\n                  >\n                    + New\n                  </Button>\n                </Box>\n                \n                {/* Customer Search Results */}\n                {customerSearchQuery && availableCustomers.length > 0 && !newJobData.customer_id && (\n                  <Box sx={{ mt: 1, maxHeight: 200, overflow: 'auto' }}>\n                    {availableCustomers\n                      .filter(customer => \n                        customer.full_name.toLowerCase().includes(customerSearchQuery.toLowerCase())\n                      )\n                      .map(customer => (\n                        <Box\n                          key={customer.id}\n                          sx={{\n                            p: 1,\n                            border: '1px solid #e0e0e0',\n                            borderRadius: 1,\n                            mb: 0.5,\n                            cursor: 'pointer',\n                            '&:hover': { backgroundColor: '#f5f5f5' }\n                          }}\n                          onClick={() => handleCustomerSelect(customer)}\n                        >\n                          <Typography variant=\"body2\" fontWeight=\"bold\">\n                            {customer.full_name}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {customer.email} • {customer.phone}\n                          </Typography>\n                        </Box>\n                      ))\n                    }\n                  </Box>\n                )}\n              </Grid>\n\n              {/* Inline Customer Creation Form */}\n              {showCustomerForm && (\n                <>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      👤 Add New Customer\n                      <Button size=\"small\" onClick={() => setShowCustomerForm(false)}>Cancel</Button>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"First Name\"\n                      value={newCustomerData.first_name}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, first_name: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Last Name\"\n                      value={newCustomerData.last_name}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, last_name: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      type=\"email\"\n                      value={newCustomerData.email}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, email: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Phone\"\n                      value={newCustomerData.phone}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, phone: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Street Address\"\n                      value={newCustomerData.street_address}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, street_address: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <TextField\n                      fullWidth\n                      label=\"City\"\n                      value={newCustomerData.city}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, city: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <TextField\n                      fullWidth\n                      label=\"State\"\n                      value={newCustomerData.state}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, state: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <TextField\n                      fullWidth\n                      label=\"ZIP Code\"\n                      value={newCustomerData.zip_code}\n                      onChange={(e) => setNewCustomerData({...newCustomerData, zip_code: e.target.value})}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Button\n                      variant=\"contained\"\n                      onClick={handleCreateNewCustomer}\n                      disabled={!newCustomerData.first_name || !newCustomerData.last_name || !newCustomerData.email}\n                      fullWidth\n                    >\n                      Create Customer & Select\n                    </Button>\n                  </Grid>\n                </>\n              )}\n\n              {/* Property Selection */}\n              {newJobData.customer_id && selectedCustomerProperties.length > 0 && (\n                <Grid item xs={12}>\n                  <FormControl fullWidth required>\n                    <InputLabel>Select Property</InputLabel>\n                    <Select\n                      value={selectedPropertyId || ''}\n                      label=\"Select Property\"\n                      onChange={(e) => setSelectedPropertyId(Number(e.target.value))}\n                    >\n                      {selectedCustomerProperties.map((property) => (\n                        <MenuItem key={property.id} value={property.id}>\n                          <Box>\n                            <Typography variant=\"body2\" fontWeight=\"bold\">\n                              {property.full_address || `${property.street_address}, ${property.city}, ${property.state} ${property.zip_code}`}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {property.property_type?.replace('_', ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}\n                              {property.square_footage && ` • ${property.square_footage.toLocaleString()} sq ft`}\n                            </Typography>\n                          </Box>\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  {selectedCustomerProperties.length > 1 && !selectedPropertyId && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, display: 'block' }}>\n                      Please select a property for this job\n                    </Typography>\n                  )}\n                </Grid>\n              )}\n\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Service Type\"\n                  value={newJobData.service_type_name}\n                  onChange={(e) => setNewJobData({...newJobData, service_type_name: e.target.value})}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth required>\n                  <InputLabel>Priority</InputLabel>\n                  <Select\n                    value={newJobData.priority}\n                    label=\"Priority\"\n                    onChange={(e) => setNewJobData({...newJobData, priority: e.target.value as any})}\n                  >\n                    <MenuItem value=\"low\">Low</MenuItem>\n                    <MenuItem value=\"medium\">Medium</MenuItem>\n                    <MenuItem value=\"high\">High</MenuItem>\n                    <MenuItem value=\"emergency\">Emergency</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Estimated Duration (hours)\"\n                  type=\"number\"\n                  value={newJobData.estimated_duration}\n                  onChange={(e) => setNewJobData({...newJobData, estimated_duration: parseInt(e.target.value) || 1})}\n                  inputProps={{ min: 0.5, max: 12, step: 0.5 }}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={4}\n                  value={newJobData.description}\n                  onChange={(e) => setNewJobData({...newJobData, description: e.target.value})}\n                />\n              </Grid>\n              \n              {/* Estimate-specific pricing section */}\n              {newJobData.job_type === 'estimate' && (\n                <>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" sx={{ mt: 2, mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n                      💰 Estimate Pricing & Line Items\n                    </Typography>\n                  </Grid>\n                  \n                  {/* Labor rate and markup settings */}\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Labor Rate ($/hour)\"\n                      type=\"number\"\n                      value={newJobData.labor_rate}\n                      onChange={(e) => setNewJobData({...newJobData, labor_rate: parseFloat(e.target.value) || 0})}\n                      inputProps={{ min: 0, step: 5 }}\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Tax Rate (%)\"\n                      type=\"number\"\n                      value={newJobData.tax_rate}\n                      onChange={(e) => setNewJobData({...newJobData, tax_rate: parseFloat(e.target.value) || 0})}\n                      inputProps={{ min: 0, max: 15, step: 0.25 }}\n                    />\n                  </Grid>\n                  \n                  {/* Line item entry form */}\n                  <Grid item xs={12}>\n                    <Paper sx={{ p: 2, bgcolor: '#f5f5f5' }}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Add Line Item\n                      </Typography>\n                      <Grid container spacing={2} alignItems=\"center\">\n                        <Grid item xs={12} sm={4}>\n                          <TextField\n                            fullWidth\n                            size=\"small\"\n                            label=\"Description\"\n                            value={newLineItem.description}\n                            onChange={(e) => setNewLineItem({...newLineItem, description: e.target.value})}\n                            placeholder=\"e.g., Electrical outlet installation\"\n                          />\n                        </Grid>\n                        <Grid item xs={6} sm={2}>\n                          <FormControl fullWidth size=\"small\">\n                            <InputLabel>Type</InputLabel>\n                            <Select\n                              value={newLineItem.type}\n                              label=\"Type\"\n                              onChange={(e) => setNewLineItem({...newLineItem, type: e.target.value as any})}\n                            >\n                              <MenuItem value=\"labor\">Labor</MenuItem>\n                              <MenuItem value=\"material\">Material</MenuItem>\n                              <MenuItem value=\"service\">Service</MenuItem>\n                            </Select>\n                          </FormControl>\n                        </Grid>\n                        <Grid item xs={6} sm={2}>\n                          <TextField\n                            fullWidth\n                            size=\"small\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            value={newLineItem.quantity}\n                            onChange={(e) => setNewLineItem({...newLineItem, quantity: parseInt(e.target.value) || 1})}\n                            inputProps={{ min: 1 }}\n                          />\n                        </Grid>\n                        <Grid item xs={6} sm={2}>\n                          <TextField\n                            fullWidth\n                            size=\"small\"\n                            label=\"Unit Price ($)\"\n                            type=\"number\"\n                            value={newLineItem.unit_price}\n                            onChange={(e) => setNewLineItem({...newLineItem, unit_price: parseFloat(e.target.value) || 0})}\n                            inputProps={{ min: 0, step: 0.01 }}\n                          />\n                        </Grid>\n                        <Grid item xs={6} sm={1.5}>\n                          <Button\n                            fullWidth\n                            variant=\"contained\"\n                            onClick={addLineItem}\n                            startIcon={<AddItemIcon />}\n                            disabled={!newLineItem.description || newLineItem.unit_price <= 0}\n                          >\n                            Add\n                          </Button>\n                        </Grid>\n                        <Grid item xs={6} sm={1.5}>\n                          <Button\n                            fullWidth\n                            variant=\"outlined\"\n                            onClick={() => setShowMaterialsCatalog(true)}\n                            startIcon={<InventoryIcon />}\n                            size=\"small\"\n                          >\n                            Parts\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  </Grid>\n                  \n                  {/* Line items list */}\n                  {lineItems.length > 0 && (\n                    <Grid item xs={12}>\n                      <Paper sx={{ p: 2 }}>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                          Line Items\n                        </Typography>\n                        {lineItems.map((item) => (\n                          <Box\n                            key={item.id}\n                            sx={{\n                              display: 'flex',\n                              justifyContent: 'space-between',\n                              alignItems: 'center',\n                              p: 1,\n                              border: '1px solid #e0e0e0',\n                              borderRadius: 1,\n                              mb: 1,\n                              bgcolor: item.type === 'labor' ? '#e3f2fd' : \n                                      item.type === 'material' ? '#f3e5f5' : '#e8f5e8'\n                            }}\n                          >\n                            <Box sx={{ flex: 1 }}>\n                              <Typography variant=\"body2\" fontWeight=\"bold\">\n                                {item.description}\n                              </Typography>\n                              <Typography variant=\"caption\" color=\"text.secondary\">\n                                {item.type.charAt(0).toUpperCase() + item.type.slice(1)} • \n                                Qty: {item.quantity} × ${item.unit_price.toFixed(2)}\n                              </Typography>\n                            </Box>\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                              <Typography variant=\"body2\" fontWeight=\"bold\">\n                                ${item.total.toFixed(2)}\n                              </Typography>\n                              <IconButton\n                                size=\"small\"\n                                color=\"error\"\n                                onClick={() => removeLineItem(item.id)}\n                              >\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Box>\n                          </Box>\n                        ))}\n                        \n                        {/* Totals */}\n                        <Box sx={{ mt: 2, pt: 2, borderTop: '2px solid #e0e0e0' }}>\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                            <Typography variant=\"body2\">Subtotal:</Typography>\n                            <Typography variant=\"body2\">${newJobData.subtotal.toFixed(2)}</Typography>\n                          </Box>\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                            <Typography variant=\"body2\">Tax ({newJobData.tax_rate}%):</Typography>\n                            <Typography variant=\"body2\">${((newJobData.subtotal * newJobData.tax_rate) / 100).toFixed(2)}</Typography>\n                          </Box>\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                            <Typography variant=\"h6\" fontWeight=\"bold\">Total:</Typography>\n                            <Typography variant=\"h6\" fontWeight=\"bold\" color=\"primary\">\n                              ${newJobData.total_cost.toFixed(2)}\n                            </Typography>\n                          </Box>\n                        </Box>\n                      </Paper>\n                    </Grid>\n                  )}\n                </>\n              )}\n            </Grid>\n          ) : selectedJob ? (\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12}>\n                <Typography variant=\"h6\">{selectedJob.title}</Typography>\n                <Typography color=\"textSecondary\">\n                  Customer: {selectedJob.customer_name}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body2\">\n                  <strong>Status:</strong> {selectedJob.status}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body2\">\n                  <strong>Priority:</strong> {selectedJob.priority}\n                </Typography>\n              </Grid>\n              {selectedJob.job_type === 'estimate' && (\n                <Grid item xs={6}>\n                  <Typography variant=\"body2\">\n                    <strong>Estimate Status:</strong>{' '}\n                    <Chip\n                      label={getEstimateStatusText(selectedJob.estimate_status)}\n                      size=\"small\"\n                      sx={{\n                        backgroundColor: getEstimateStatusColor(selectedJob.estimate_status),\n                        color: 'white',\n                        fontSize: '0.7rem',\n                        height: 20,\n                        ml: 1\n                      }}\n                    />\n                  </Typography>\n                </Grid>\n              )}\n              <Grid item xs={6}>\n                <Typography variant=\"body2\">\n                  <strong>Service:</strong> {selectedJob.service_type_name}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body2\">\n                  <strong>Duration:</strong> {selectedJob.estimated_duration}h\n                </Typography>\n              </Grid>\n              {selectedJob.scheduled_date && (\n                <>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      <strong>Date:</strong> {selectedJob.scheduled_date}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      <strong>Time:</strong> {selectedJob.scheduled_start_time} - {selectedJob.scheduled_end_time}\n                    </Typography>\n                  </Grid>\n                </>\n              )}\n            </Grid>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => {\n            setOpenJobDialog(false);\n            setIsCreatingJob(false);\n            setSelectedJob(null);\n          }}>Cancel</Button>\n          {isCreatingJob ? (\n            <Button \n              variant=\"contained\" \n              color=\"primary\"\n              onClick={async () => {\n                try {\n                  // Validate form data\n                  const validationRules = {\n                    title: { required: true, minLength: 3, maxLength: 100 },\n                    customer_name: commonValidationRules.customerName,\n                    service_type_name: { required: true, minLength: 2 },\n                    estimated_duration: commonValidationRules.duration,\n                    description: { required: true, minLength: 5, maxLength: 500 }\n                  };\n\n                  const validation = validateForm(newJobData, validationRules);\n                  if (!validation.isValid) {\n                    alert('Please fix the following errors:\\n' + Object.values(validation.errors).join('\\n'));\n                    return;\n                  }\n\n                  // Create job/estimate with pricing data\n                  const jobPrefix = newJobData.job_type === 'estimate' ? 'EST' : 'JOB';\n                  const estimatedCost = newJobData.job_type === 'estimate' ? \n                    newJobData.total_cost : \n                    newJobData.estimated_duration * newJobData.labor_rate;\n\n                  const jobPayload = {\n                    job_number: `${jobPrefix}-${Date.now()}`,\n                    title: newJobData.title,\n                    description: newJobData.description,\n                    customer: newJobData.customer_id || 1,\n                    property: selectedPropertyId || 1,\n                    service_type: newJobData.service_type_name || 'General Service',\n                    priority: newJobData.priority as 'low' | 'medium' | 'high' | 'emergency',\n                    status: 'pending' as const,\n                    estimated_duration: newJobData.estimated_duration,\n                    estimated_cost: estimatedCost,\n                    assigned_to: [],\n                    // Include estimate-specific data if applicable\n                    ...(newJobData.job_type === 'estimate' && {\n                      job_type: 'estimate',\n                      labor_rate: newJobData.labor_rate,\n                      tax_rate: newJobData.tax_rate,\n                      line_items: lineItems,\n                      subtotal: newJobData.subtotal,\n                      total_cost: newJobData.total_cost,\n                      estimate_status: 'draft' as const\n                    })\n                  };\n\n                  // Create a new job via the backend API\n                  await jobApi.create(jobPayload);\n                  \n                  // Update inventory quantities for jobs (not estimates - they update when approved)\n                  if (newJobData.job_type === 'job') {\n                    const jobId = `job-${Date.now()}`;\n                    await updateInventoryQuantities(lineItems, jobId, 'job_created');\n                  }\n                  \n                  const successMessage = newJobData.job_type === 'estimate' ? \n                    `Estimate created successfully! Total: $${newJobData.total_cost.toFixed(2)}` :\n                    'Job created successfully!';\n                  alert(successMessage);\n                  fetchJobsCallback(); // Refresh the job list\n                  \n                  setOpenJobDialog(false);\n                  setIsCreatingJob(false);\n                } catch (error) {\n                  console.error('Error creating job:', error);\n                  alert('Error creating job. Check console for details.');\n                }\n              }}\n              disabled={!newJobData.title || !newJobData.customer_name || !newJobData.service_type_name || \n                       (newJobData.job_type === 'estimate' && lineItems.length === 0) ||\n                       (selectedCustomerProperties.length > 1 && !selectedPropertyId)}\n            >\n              Create {newJobData.job_type === 'estimate' ? 'Estimate' : 'Job'}\n            </Button>\n          ) : selectedJob ? (\n            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n              {/* Estimate workflow buttons */}\n              {selectedJob.job_type === 'estimate' && (\n                <>\n                  {selectedJob.estimate_status === 'draft' && (\n                    <Button \n                      variant=\"contained\" \n                      color=\"primary\"\n                      onClick={() => sendEstimateToCustomer(selectedJob.id)}\n                      startIcon={<EmailIcon />}\n                    >\n                      📧 Send Estimate\n                    </Button>\n                  )}\n                  \n                  {(selectedJob.estimate_status === 'sent' || selectedJob.estimate_status === 'viewed') && (\n                    <>\n                      <Button \n                        variant=\"contained\" \n                        color=\"success\"\n                        onClick={() => handleEstimateStatusUpdate(selectedJob.id, 'approved')}\n                        startIcon={<ApproveIcon />}\n                      >\n                        ✅ Mark Approved\n                      </Button>\n                      <Button \n                        variant=\"outlined\" \n                        color=\"error\"\n                        onClick={() => handleEstimateStatusUpdate(selectedJob.id, 'rejected')}\n                        startIcon={<RejectIcon />}\n                      >\n                        ❌ Mark Rejected\n                      </Button>\n                    </>\n                  )}\n                  \n                  {selectedJob.estimate_status === 'approved' && (\n                    <Button \n                      variant=\"contained\" \n                      color=\"secondary\"\n                      onClick={() => convertEstimateToJob(selectedJob.id)}\n                      startIcon={<DocumentIcon />}\n                    >\n                      🔄 Convert to Job\n                    </Button>\n                  )}\n                  \n                  <Button \n                    variant=\"outlined\" \n                    color=\"warning\"\n                    onClick={() => handleEstimateStatusUpdate(selectedJob.id, 'expired')}\n                  >\n                    ⏰ Mark Expired\n                  </Button>\n                </>\n              )}\n              \n              {/* Job workflow buttons based on status */}\n              {selectedJob.job_type === 'job' && selectedJob.status === 'scheduled' && (\n                <Button \n                  variant=\"contained\" \n                  color=\"warning\"\n                  onClick={() => handleStatusUpdate(selectedJob.id, 'on_the_way')}\n                  sx={{ backgroundColor: '#ff9800' }}\n                >\n                  📱 On The Way\n                </Button>\n              )}\n              \n              {selectedJob.job_type === 'job' && selectedJob.status === 'on_the_way' && (\n                <Button \n                  variant=\"contained\" \n                  color=\"success\"\n                  onClick={() => handleStatusUpdate(selectedJob.id, 'in_progress')}\n                >\n                  ▶️ Start Job\n                </Button>\n              )}\n              \n              {selectedJob.job_type === 'job' && selectedJob.status === 'in_progress' && (\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\"\n                  onClick={() => handleStatusUpdate(selectedJob.id, 'completed')}\n                >\n                  ✅ Finish Job\n                </Button>\n              )}\n              \n              {selectedJob.job_type === 'job' && selectedJob.status === 'completed' && selectedJob.payment_status !== 'paid' && (\n                <>\n                  <Button \n                    variant=\"contained\" \n                    color=\"secondary\"\n                    onClick={() => handleSendInvoice(selectedJob.id)}\n                  >\n                    💰 Send Invoice\n                  </Button>\n                  <Button \n                    variant=\"outlined\" \n                    color=\"primary\"\n                    onClick={() => handleCollectPayment(selectedJob.id)}\n                  >\n                    💳 Collect Payment\n                  </Button>\n                </>\n              )}\n              \n              <Button variant=\"outlined\" color=\"inherit\">\n                Edit Job\n              </Button>\n            </Box>\n          ) : null}\n        </DialogActions>\n      </Dialog>\n\n      {/* Materials Catalog Dialog */}\n      <Dialog\n        open={showMaterialsCatalog}\n        onClose={() => setShowMaterialsCatalog(false)}\n        maxWidth=\"lg\"\n        fullWidth\n      >\n        <DialogTitle>\n          🔧 Electrical Parts & Materials Catalog\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            Select materials to add to your estimate. Prices include standard markup.\n          </Typography>\n          \n          {/* Low stock warning */}\n          {lowStockItems.length > 0 && (\n            <Alert severity=\"warning\" sx={{ mb: 2 }}>\n              <strong>Low Stock Alert:</strong> {lowStockItems.length} item{lowStockItems.length > 1 ? 's' : ''} running low. \n              Items: {lowStockItems.slice(0, 3).map(item => item.name).join(', ')}\n              {lowStockItems.length > 3 && ` and ${lowStockItems.length - 3} more`}.\n            </Alert>\n          )}\n          \n          {/* Inventory loading indicator */}\n          {inventoryLoading && (\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n              <CircularProgress size={16} />\n              <Typography variant=\"caption\">Loading inventory data...</Typography>\n            </Box>\n          )}\n          \n          {/* Search bar */}\n          <TextField\n            fullWidth\n            placeholder=\"Search materials...\"\n            value={materialSearchQuery}\n            onChange={(e) => setMaterialSearchQuery(e.target.value)}\n            sx={{ mb: 2 }}\n            size=\"small\"\n          />\n          \n          {/* Markup tier information */}\n          <Box sx={{ mb: 3, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n            <Typography variant=\"body2\" fontWeight=\"bold\" sx={{ mb: 1 }}>\n              📊 Material Markup Tiers\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              {materialMarkupTiers.map((tier, index) => (\n                <Chip\n                  key={index}\n                  label={`$${tier.min === 0 ? '0' : tier.min.toFixed(2)}-${tier.max === Infinity ? '∞' : '$' + tier.max.toFixed(2)}: ${(tier.markup * 100).toFixed(0)}%`}\n                  size=\"small\"\n                  variant=\"outlined\"\n                  sx={{ fontSize: '11px' }}\n                />\n              ))}\n            </Box>\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', mt: 1 }}>\n              Prices shown include automatic markup based on material cost\n            </Typography>\n          </Box>\n          \n          {/* Group materials by category */}\n          {Array.from(new Set(materialsCatalog\n            .filter(item => \n              materialSearchQuery === '' || \n              item.name.toLowerCase().includes(materialSearchQuery.toLowerCase()) ||\n              item.category.toLowerCase().includes(materialSearchQuery.toLowerCase())\n            )\n            .map(item => item.category)\n          )).map(category => {\n            const filteredMaterials = materialsCatalog\n              .filter(item => item.category === category)\n              .filter(item => \n                materialSearchQuery === '' || \n                item.name.toLowerCase().includes(materialSearchQuery.toLowerCase()) ||\n                item.category.toLowerCase().includes(materialSearchQuery.toLowerCase())\n              );\n            \n            if (filteredMaterials.length === 0) return null;\n            \n            return (\n              <Box key={category} sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ \n                  color: 'primary.main', \n                  borderBottom: '2px solid',\n                  borderColor: 'primary.main',\n                  pb: 0.5,\n                  mb: 2\n                }}>\n                  {category}\n                </Typography>\n                <Grid container spacing={1}>\n                  {filteredMaterials.map(material => (\n                    <Grid item xs={12} sm={6} md={4} key={material.id}>\n                      <Card \n                        sx={{ \n                          height: '100%',\n                          transition: 'all 0.2s',\n                          '&:hover': { \n                            transform: 'translateY(-2px)',\n                            boxShadow: 3\n                          }\n                        }}\n                      >\n                        <CardContent sx={{ p: 2 }}>\n                          <Typography variant=\"body2\" fontWeight=\"bold\" noWrap title={material.name}>\n                            {material.name}\n                          </Typography>\n                          <Typography variant=\"h6\" color=\"primary\" sx={{ mt: 1 }}>\n                            ${material.price.toFixed(2)}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            per {material.unit}\n                          </Typography>\n                          \n                          {/* Cost and markup information */}\n                          {material.costPrice && material.markupPercentage && (\n                            <Box sx={{ mt: 0.5 }}>\n                              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontSize: '11px' }}>\n                                Cost: ${material.costPrice.toFixed(2)} • Markup: {material.markupPercentage.toFixed(0)}%\n                              </Typography>\n                            </Box>\n                          )}\n                          \n                          {/* Stock information for inventory items */}\n                          {material.current_stock !== undefined && (\n                            <Box sx={{ mt: 1 }}>\n                              <Typography \n                                variant=\"caption\" \n                                color={material.isLowStock ? 'error' : 'text.secondary'}\n                                sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}\n                              >\n                                {material.isLowStock && (\n                                  <span style={{ color: '#f44336', fontSize: '12px' }}>⚠️</span>\n                                )}\n                                Stock: {material.current_stock} {material.unit}\n                                {material.isLowStock && ' (Low)'}\n                              </Typography>\n                              {material.sku && (\n                                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontSize: '10px' }}>\n                                  SKU: {material.sku}\n                                </Typography>\n                              )}\n                            </Box>\n                          )}\n                          \n                          {/* Quantity selector and add button */}\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 2 }}>\n                            <TextField\n                              size=\"small\"\n                              type=\"number\"\n                              value={selectedMaterialQuantity[material.id] || 1}\n                              onChange={(e) => {\n                                const newQty = parseInt(e.target.value) || 1;\n                                const maxQty = material.current_stock !== undefined ? material.current_stock : 999;\n                                setSelectedMaterialQuantity(prev => ({\n                                  ...prev,\n                                  [material.id]: Math.max(1, Math.min(newQty, maxQty))\n                                }));\n                              }}\n                              inputProps={{ \n                                min: 1, \n                                max: material.current_stock !== undefined ? material.current_stock : 999 \n                              }}\n                              sx={{ width: 60 }}\n                              onClick={(e) => e.stopPropagation()}\n                              disabled={material.current_stock === 0}\n                            />\n                            <Button\n                              size=\"small\"\n                              variant=\"contained\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                addMaterialToLineItems(material);\n                              }}\n                              startIcon={<AddItemIcon />}\n                              fullWidth\n                              disabled={material.current_stock === 0}\n                              color={material.isLowStock ? 'warning' : 'primary'}\n                            >\n                              {material.current_stock === 0 ? 'Out of Stock' : 'Add'}\n                            </Button>\n                          </Box>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  ))}\n                </Grid>\n              </Box>\n            );\n          })}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowMaterialsCatalog(false)}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default SchedulingCalendar;"],"names":["api","axios","create","baseURL","process","headers","timeout","interceptors","request","use","config","_document$querySelect","metadata","startTime","performance","now","token","localStorage","getItem","Authorization","concat","csrfToken","document","querySelector","getAttribute","error","errorLogger","handleError","component","action","userMessage","Promise","reject","response","_config$metadata","duration","_response$config$meth","_response$config$meth2","console","warn","method","toUpperCase","url","Math","round","Error","async","_error$config","_error$config$method","_error$config2","_error$response","_error$response2","getErrorMessage","status","authService","newToken","refreshToken","logout","retryAfter","delay","parseInt","resolve","setTimeout","then","catch","data","message","customerApi","getAll","params","get","getById","id","customer","post","update","put","delete","getProperties","addProperty","property","getContacts","addContact","contact","getReviews","addReview","review","propertyApi","jobApi","job","updateStatus","patch","assignTechnicians","technician_ids","technicianApi","getAvailable","inventoryApi","getItems","getItemById","createItem","item","updateItem","deleteItem","adjustStock","quantity","reason","getCategories","createCategory","category","getSuppliers","createSupplier","supplier","getStockMovements","getPurchaseOrders","createPurchaseOrder","po","updatePurchaseOrder","analyticsApi","getBusinessOverview","getFinancialSummary","getOperationalMetrics","getCustomerInsights","getInventoryInsights","validateField","value","rules","required","trim","minLength","length","maxLength","pattern","test","min","max","custom","validateForm","errors","field","fieldRules","Object","entries","isValid","keys","validationPatterns","email","phone","phoneUS","postalCode","zipCode","alphanumeric","currency","jobNumber","invoiceNumber","strongPassword","commonValidationRules","emailRule","phoneRule","currencyRule","undefined","customerName","address","description","formatPhoneNumber","digits","replace","slice","SchedulingCalendar","jobs","setJobs","useState","technicians","setTechnicians","loading","setLoading","setError","selectedDate","setSelectedDate","Date","toISOString","split","viewMode","setViewMode","weekDates","setWeekDates","weekStart","setWeekStart","technicianColors","setTechnicianColors","unscheduledJobs","setUnscheduledJobs","openJobDialog","setOpenJobDialog","selectedJob","setSelectedJob","activeJob","setActiveJob","isCreatingJob","setIsCreatingJob","searchQuery","setSearchQuery","filterStatus","setFilterStatus","filterPriority","setFilterPriority","refreshing","setRefreshing","newJobData","setNewJobData","title","customer_name","service_type_name","priority","estimated_duration","customer_id","job_type","labor_rate","material_markup","subtotal","tax_rate","total_cost","lineItems","setLineItems","newLineItem","setNewLineItem","unit_price","type","showMaterialsCatalog","setShowMaterialsCatalog","materialSearchQuery","setMaterialSearchQuery","selectedMaterialQuantity","setSelectedMaterialQuantity","inventoryItems","setInventoryItems","inventoryCategories","setInventoryCategories","inventoryLoading","setInventoryLoading","lowStockItems","setLowStockItems","getPriorityColor","filteredJobs","filter","matchesSearch","toLowerCase","includes","matchesStatus","matchesPriority","showCustomerForm","setShowCustomerForm","customerSearchQuery","setCustomerSearchQuery","availableCustomers","setAvailableCustomers","selectedCustomerProperties","setSelectedCustomerProperties","selectedPropertyId","setSelectedPropertyId","newCustomerData","setNewCustomerData","first_name","last_name","street_address","city","state","zip_code","customer_type","sensors","useSensors","useSensor","PointerSensor","activationConstraint","distance","generateTimeSlots","slots","hour","push","time","toString","padStart","timeSlots","setTimeSlots","useEffect","colors","colorMap","forEach","tech","index","dates","currentDate","setDate","getDate","getDay","i","date","fetchJobsCallback","React","dateFrom","dateTo","scheduledError","today","generateDate","dayOffset","demoJobs","job_number","scheduled_date","scheduled_start_time","scheduled_end_time","assigned_technician","estimated_cost","estimate_status","assigned_technicians","payment_status","unscheduledError","full_name","skill_level","is_available","employee_id","fetchTechnicians","itemsResponse","is_active","categoriesResponse","results","lowStock","current_stock","minimum_stock","fetchInventoryItems","newTimeSlots","hourStr","minuteStr","minute","slotIndex","findIndex","slot","timeValue","closestIndex","closestDiff","Infinity","slotHour","slotMinute","map","Number","slotValue","diff","abs","getJobTypeIcon","jobType","getEstimateStatusColor","getEstimateStatusText","SortableJobCard","_ref","attributes","listeners","setNodeRef","transform","transition","useSortable","style","CSS","Transform","_jsx","Card","_objectSpread","ref","sx","margin","cursor","borderLeft","border","borderColor","boxShadow","onClick","children","_jsxs","CardContent","padding","Box","display","alignItems","gap","mb","Typography","variant","fontSize","color","Chip","label","size","backgroundColor","height","fontWeight","mt","formatDate","dateStr","toLocaleDateString","weekday","month","day","handleStatusUpdate","jobId","newStatus","log","handleOnTheWay","prev","alert","find","j","technicianName","allTechnicians","techId","t","join","getTechnicianNames","estimatedTravelTime","floor","random","minTime","maxTime","handleCustomerSelect","fetchCustomerProperties","customerId","property_type","full_address","calculateEstimateTotals","items","reduce","sum","total","taxAmount","fallbackMaterialsCatalog","name","price","unit","materialMarkupTiers","markup","calculateMarkupPrice","costPrice","tier","getMarkupPercentage","materialsCatalog","category_name","cost_price","unit_of_measure","sku","isLowStock","markupPercentage","trackMaterialUsage","itemId","pending_usage","available_stock","updateInventoryQuantities","materialLineItems","inventory_item_id","lineItem","newStock","itemError","handleEstimateStatusUpdate","statusMessages","estimate","line_items","flexDirection","justifyContent","minHeight","CircularProgress","p","gutterBottom","Grid","container","spacing","width","minWidth","textAlign","Avatar","bgcolor","WorkIcon","ScheduleIcon","EmergencyIcon","ToggleButtonGroup","exclusive","onChange","_","newMode","ToggleButton","ViewDayIcon","ml","ViewWeekIcon","ViewListIcon","Divider","orientation","flexItem","IconButton","navigatePreviousWeek","newWeekStart","ChevronLeftIcon","navigateNextWeek","ChevronRightIcon","Button","goToToday","startIcon","TodayIcon","TextField","placeholder","e","target","InputProps","startAdornment","SearchIcon","mr","finally","disabled","RefreshIcon","className","AddIcon","DocumentIcon","Alert","severity","xs","md","lg","elevation","DndContext","onDragStart","event","active","onDragEnd","over","startsWith","parts","technicianIdIndex","indexOf","timeIndex","dateIndex","technicianId","timeSlot","scheduleDate","assignedTechnician","updateData","assigned_to","scheduled_start","draggedJob","updatedJob","CardHeader","Badge","badgeContent","pt","SortableContext","strategy","verticalListSortingStrategy","Stack","py","CheckCircleIcon","opacity","overflow","CalendarIcon","Paper","maxHeight","DragOverlay","Zoom","in","Fab","position","bottom","right","zIndex","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","search","arguments","fetchCustomers","helperText","px","borderRadius","_Fragment","newCustomer","FormControl","InputLabel","Select","_property$property_ty","MenuItem","l","square_footage","toLocaleString","sm","inputProps","step","multiline","rows","parseFloat","addLineItem","AddItemIcon","InventoryIcon","flex","charAt","toFixed","updatedItems","removeLineItem","DeleteIcon","borderTop","DialogActions","validationRules","validation","values","jobPrefix","estimatedCost","jobPayload","service_type","successMessage","flexWrap","_estimate$estimated_c","estimateId","emailMessage","sendEstimateToCustomer","EmailIcon","ApproveIcon","RejectIcon","newJob","convertEstimateToJob","handleSendInvoice","handleCollectPayment","Array","from","Set","filteredMaterials","borderBottom","pb","material","noWrap","newQty","maxQty","stopPropagation","addMaterialToLineItems","qty"],"sourceRoot":""}