{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{customerApi,jobApi,analyticsApi}from'../services/api';import{useMemoizedCalculation,useAPICache}from'./usePerformanceOptimization';export const useBusinessMetrics=()=>{const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[stats,setStats]=useState({totalCustomers:0,activeJobs:0,todaySchedule:0,monthlyRevenue:0});// API caching for improved performance\nconst{get:getCached,set:setCached}=useAPICache();// Memoized date calculations\nconst dateCalculations=useMemoizedCalculation(()=>({today:new Date().toISOString().split('T')[0],currentMonth:new Date().getMonth(),currentYear:new Date().getFullYear()}),[],'DateCalculations');// Optimized data processing functions\nconst processJobStats=useCallback(jobs=>{const activeJobStatuses=['pending','scheduled','in_progress'];const activeJobs=jobs.filter(job=>activeJobStatuses.includes(job.status)).length;const todaySchedule=jobs.filter(job=>job.scheduled_start&&job.scheduled_start.startsWith(dateCalculations.today)).length;return{activeJobs,todaySchedule};},[dateCalculations.today]);const calculateMonthlyRevenue=useCallback(jobs=>{return jobs.filter(job=>job.status==='completed'&&job.updated_at&&new Date(job.updated_at).getMonth()===dateCalculations.currentMonth&&new Date(job.updated_at).getFullYear()===dateCalculations.currentYear).reduce((sum,job)=>sum+(job.actual_cost||job.estimated_cost||0),0);},[dateCalculations.currentMonth,dateCalculations.currentYear]);const loadDashboardData=useCallback(async()=>{try{setLoading(true);setError(null);// Check cache first\nconst cacheKey=\"dashboard-\".concat(dateCalculations.today);const cachedStats=getCached(cacheKey);if(cachedStats){setStats(cachedStats);setLoading(false);return;}// Load data in parallel with improved error handling\nconst[customersResponse,jobsResponse,analyticsResponse]=await Promise.allSettled([customerApi.getAll(),jobApi.getAll(),analyticsApi.getFinancialSummary()]);// Process responses with fallbacks\nconst customers=customersResponse.status==='fulfilled'?customersResponse.value.data.results||[]:[];const jobs=jobsResponse.status==='fulfilled'?jobsResponse.value.data.results||[]:[];// Calculate job-related stats\nconst{activeJobs,todaySchedule}=processJobStats(jobs);// Get monthly revenue with fallback calculation\nlet monthlyRevenue=0;if(analyticsResponse.status==='fulfilled'){monthlyRevenue=analyticsResponse.value.data.monthly_revenue||0;}else{monthlyRevenue=calculateMonthlyRevenue(jobs);}const newStats={totalCustomers:customers.length,activeJobs,todaySchedule,monthlyRevenue};// Cache the results\nsetCached(cacheKey,newStats);setStats(newStats);}catch(error){const errorMessage=error instanceof Error?error.message:'Failed to load dashboard data';setError(errorMessage);console.error('Error loading dashboard data:',error);}finally{setLoading(false);}},[dateCalculations,getCached,setCached,processJobStats,calculateMonthlyRevenue]);useEffect(()=>{loadDashboardData();},[loadDashboardData]);return{loading,stats,error,refetch:loadDashboardData};};","map":{"version":3,"names":["useState","useEffect","useCallback","customerApi","jobApi","analyticsApi","useMemoizedCalculation","useAPICache","useBusinessMetrics","loading","setLoading","error","setError","stats","setStats","totalCustomers","activeJobs","todaySchedule","monthlyRevenue","get","getCached","set","setCached","dateCalculations","today","Date","toISOString","split","currentMonth","getMonth","currentYear","getFullYear","processJobStats","jobs","activeJobStatuses","filter","job","includes","status","length","scheduled_start","startsWith","calculateMonthlyRevenue","updated_at","reduce","sum","actual_cost","estimated_cost","loadDashboardData","cacheKey","concat","cachedStats","customersResponse","jobsResponse","analyticsResponse","Promise","allSettled","getAll","getFinancialSummary","customers","value","data","results","monthly_revenue","newStats","errorMessage","Error","message","console","refetch"],"sources":["/Users/matthewlong/AJ-HCP-LE/frontend/src/hooks/useBusinessMetrics.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { customerApi, jobApi, analyticsApi } from '../services/api';\nimport { useMemoizedCalculation, useAPICache } from './usePerformanceOptimization';\n\nexport interface DashboardStats {\n  totalCustomers: number;\n  activeJobs: number;\n  todaySchedule: number;\n  monthlyRevenue: number;\n}\n\nexport const useBusinessMetrics = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [stats, setStats] = useState<DashboardStats>({\n    totalCustomers: 0,\n    activeJobs: 0,\n    todaySchedule: 0,\n    monthlyRevenue: 0,\n  });\n\n  // API caching for improved performance\n  const { get: getCached, set: setCached } = useAPICache<any>();\n\n  // Memoized date calculations\n  const dateCalculations = useMemoizedCalculation(() => ({\n    today: new Date().toISOString().split('T')[0],\n    currentMonth: new Date().getMonth(),\n    currentYear: new Date().getFullYear(),\n  }), [], 'DateCalculations');\n\n  // Optimized data processing functions\n  const processJobStats = useCallback((jobs: any[]) => {\n    const activeJobStatuses = ['pending', 'scheduled', 'in_progress'];\n    const activeJobs = jobs.filter(job => activeJobStatuses.includes(job.status)).length;\n    \n    const todaySchedule = jobs.filter(job => \n      job.scheduled_start && job.scheduled_start.startsWith(dateCalculations.today)\n    ).length;\n\n    return { activeJobs, todaySchedule };\n  }, [dateCalculations.today]);\n\n  const calculateMonthlyRevenue = useCallback((jobs: any[]) => {\n    return jobs\n      .filter(job => \n        job.status === 'completed' && \n        job.updated_at &&\n        new Date(job.updated_at).getMonth() === dateCalculations.currentMonth &&\n        new Date(job.updated_at).getFullYear() === dateCalculations.currentYear\n      )\n      .reduce((sum, job) => sum + (job.actual_cost || job.estimated_cost || 0), 0);\n  }, [dateCalculations.currentMonth, dateCalculations.currentYear]);\n\n  const loadDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Check cache first\n      const cacheKey = `dashboard-${dateCalculations.today}`;\n      const cachedStats = getCached(cacheKey);\n      if (cachedStats) {\n        setStats(cachedStats);\n        setLoading(false);\n        return;\n      }\n      \n      // Load data in parallel with improved error handling\n      const [customersResponse, jobsResponse, analyticsResponse] = await Promise.allSettled([\n        customerApi.getAll(),\n        jobApi.getAll(),\n        analyticsApi.getFinancialSummary(),\n      ]);\n\n      // Process responses with fallbacks\n      const customers = customersResponse.status === 'fulfilled' \n        ? customersResponse.value.data.results || [] \n        : [];\n        \n      const jobs = jobsResponse.status === 'fulfilled' \n        ? jobsResponse.value.data.results || [] \n        : [];\n\n      // Calculate job-related stats\n      const { activeJobs, todaySchedule } = processJobStats(jobs);\n\n      // Get monthly revenue with fallback calculation\n      let monthlyRevenue = 0;\n      if (analyticsResponse.status === 'fulfilled') {\n        monthlyRevenue = analyticsResponse.value.data.monthly_revenue || 0;\n      } else {\n        monthlyRevenue = calculateMonthlyRevenue(jobs);\n      }\n\n      const newStats: DashboardStats = {\n        totalCustomers: customers.length,\n        activeJobs,\n        todaySchedule,\n        monthlyRevenue,\n      };\n\n      // Cache the results\n      setCached(cacheKey, newStats);\n      \n      setStats(newStats);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboard data';\n      setError(errorMessage);\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [dateCalculations, getCached, setCached, processJobStats, calculateMonthlyRevenue]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [loadDashboardData]);\n\n  return { \n    loading, \n    stats, \n    error,\n    refetch: loadDashboardData\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}