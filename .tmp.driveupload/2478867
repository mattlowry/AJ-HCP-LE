{"version":3,"file":"static/js/606.f0e32829.chunk.js","mappings":"4SAyBA,MA4GA,EA5G2DA,IAAgB,IAAf,MAAEC,GAAOD,EACnE,MAAME,EAAa,CACjB,CACEC,MAAO,kBACPC,MAAOH,EAAMI,eAAeC,WAC5BC,OAAQ,OACRC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,IACjBC,SAAU,oDACVC,QAAS,2BAEX,CACET,MAAO,cACPC,MAAOH,EAAMY,WAAWP,WACxBC,OAAQ,MACRC,MAAMC,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,IACfH,SAAU,oDACVC,QAAS,2BAEX,CACET,MAAO,mBACPC,MAAOH,EAAMc,cAAcT,WAC3BC,OAAQ,MACRC,MAAMC,EAAAA,EAAAA,KAACO,EAAAA,EAAY,IACnBL,SAAU,oDACVC,QAAS,2BAEX,CACET,MAAO,kBACPC,OCrDyBa,EDqDHhB,EAAMiB,eCpDzB,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAU,QACTC,OAAON,IDkDNV,OAAQ,OACRC,MAAMC,EAAAA,EAAAA,KAACe,EAAAA,EAAS,IAChBb,SAAU,oDACVC,QAAS,6BCzDgBK,MD6D7B,OACER,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,GAAI,GAAIC,SACvC5B,EAAW6B,KAAI,CAACC,EAAMC,KACrBxB,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACS,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEP,UAC9BrB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CACPC,QAAQ,WACRC,MAAI,EACJZ,GAAI,CACFa,OAAQ,OACRC,WAAW,2BAADC,OAA6BX,EAAKpB,QAAO,uCACnD,UAAW,CACTgC,UAAW,iCAEbd,UAEFe,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAClB,GAAI,CAAEmB,EAAG,GAAIjB,SAAA,EACxBe,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,gBAAgBtB,GAAI,EAAEC,SAAA,EAC3ErB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CACLxB,GAAI,CACFyB,MAAO,GACPZ,OAAQ,GACRC,WAAYV,EAAKrB,SACjB2C,UAAW,oCACXxB,SAEDE,EAAKxB,QAERqC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CACFC,QAAQ,OACRC,WAAW,SACXtB,GAAI,CACF2B,MAAO,UACPC,gBAAiB,0BACjBC,aAAc,OACdC,GAAI,IACJC,GAAI,IACJ7B,SAAA,EAEFrB,EAAAA,EAAAA,KAACmD,EAAAA,EAAc,CAAChC,GAAI,CAAEiC,SAAU,GAAIC,GAAI,OACxCrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CAACxB,QAAQ,UAAUX,GAAI,CAAEoC,WAAY,KAAMlC,SACnDE,EAAKzB,gBAIZE,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTR,MAAM,iBACN3B,GAAI,CACFiC,SAAU,WACVG,WAAY,IACZnC,GAAI,GACJC,SAEDE,EAAK7B,SAERM,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTxB,QAAQ,KACR0B,UAAU,MACVrC,GAAI,CACFoC,WAAY,IACZT,MAAO,WACPzB,SAEDE,EAAK5B,cA3DwB6B,MAiEnC,E,4CE9GX,MAqGA,EArGmCiC,KACjC,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,CACnB,CACElE,MAAO,cACPmE,YAAa,kCACb9D,MAAMC,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,IACfyD,OAAQA,IAAMJ,EAAS,UAEzB,CACEhE,MAAO,oBACPmE,YAAa,2BACb9D,MAAMC,EAAAA,EAAAA,KAACO,EAAAA,EAAY,IACnBuD,OAAQA,IAAMJ,EAAS,gBAEzB,CACEhE,MAAO,qBACPmE,YAAa,+BACb9D,MAAMC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAW,IAClBD,OAAQA,IAAMJ,EAAS,aAEzB,CACEhE,MAAO,YACPmE,YAAa,4BACb9D,MAAMC,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,IACpBF,OAAQA,IAAMJ,EAAS,eAEzB,CACEhE,MAAO,YACPmE,YAAa,gCACb9D,MAAMC,EAAAA,EAAAA,KAACiE,EAAAA,EAAa,IACpBH,OAAQA,IAAMJ,EAAS,eAEzB,CACEhE,MAAO,eACPmE,YAAa,8BACb9D,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,IACjB6D,OAAQA,IAAMJ,EAAS,oBAI3B,OACE1D,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEG,SACxBuC,EAAatC,KAAI,CAACwC,EAAQtC,KACzBxB,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACS,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEP,UAC9BrB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CACPC,QAAQ,QACRX,GAAI,CACFa,OAAQ,OACRkC,OAAQ,UACRC,WAAY,wCACZ,UAAW,CACThC,UAAW,+BACXU,UAAW,2CAGfuB,QAASN,EAAOA,OAAOzC,UAEvBe,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAClB,GAAI,CAAEmB,EAAG,GAAIjB,SAAA,EACxBe,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASrB,GAAI,IAAIC,SAAA,EAC9CrB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CACLxB,GAAI,CACFyB,MAAO,GACPZ,OAAQ,GACRC,WAAY,oDACZoB,GAAI,EACJR,UAAW,wCACXxB,SAEDyC,EAAO/D,QAEVC,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTxB,QAAQ,KACR0B,UAAU,MACVrC,GAAI,CACFoC,WAAY,IACZT,MAAO,WACPzB,SAEDyC,EAAOpE,YAGZM,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTxB,QAAQ,QACRgB,MAAM,iBACN3B,GAAI,CACFiC,SAAU,WACViB,WAAY,KACZhD,SAEDyC,EAAOD,oBA9CsBrC,MAoDnC,ECtDX,EAnD4B8C,KAC1B,MAAM,QAAEC,EAAO,MAAE/E,GCDegF,MAChC,MAAOD,EAASE,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAwB,OAC3ClF,EAAOqF,IAAYH,EAAAA,EAAAA,UAAyB,CACjD9E,eAAgB,EAChBQ,WAAY,EACZE,cAAe,EACfG,eAAgB,KAIVqE,IAAKC,EAAWC,IAAKC,IAAcC,EAAAA,EAAAA,MAGrCC,GAAmBC,EAAAA,EAAAA,KAAuB,MAC9CC,OAAO,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAC3CC,cAAc,IAAIH,MAAOI,WACzBC,aAAa,IAAIL,MAAOM,iBACtB,GAAI,oBAGFC,GAAkBC,EAAAA,EAAAA,cAAaC,IACnC,MAAMC,EAAoB,CAAC,UAAW,YAAa,eAOnD,MAAO,CAAE5F,WANU2F,EAAKE,QAAOC,GAAOF,EAAkBG,SAASD,EAAIE,UAASC,OAMzD/F,cAJCyF,EAAKE,QAAOC,GAChCA,EAAII,iBAAmBJ,EAAII,gBAAgBC,WAAWpB,EAAiBE,SACvEgB,OAEkC,GACnC,CAAClB,EAAiBE,QAEfmB,GAA0BV,EAAAA,EAAAA,cAAaC,GACpCA,EACJE,QAAOC,GACS,cAAfA,EAAIE,QACJF,EAAIO,YACJ,IAAInB,KAAKY,EAAIO,YAAYf,aAAeP,EAAiBM,cACzD,IAAIH,KAAKY,EAAIO,YAAYb,gBAAkBT,EAAiBQ,cAE7De,QAAO,CAACC,EAAKT,IAAQS,GAAOT,EAAIU,aAAeV,EAAIW,gBAAkB,IAAI,IAC3E,CAAC1B,EAAiBM,aAAcN,EAAiBQ,cAE9CmB,GAAoBhB,EAAAA,EAAAA,cAAYiB,UACpC,IACEtC,GAAW,GACXG,EAAS,MAGT,MAAMoC,EAAQ,aAAA9E,OAAgBiD,EAAiBE,OACzC4B,EAAclC,EAAUiC,GAC9B,GAAIC,EAGF,OAFApC,EAASoC,QACTxC,GAAW,GAKb,MAAOyC,EAAmBC,EAAcC,SAA2BC,QAAQC,WAAW,CACpFC,EAAAA,GAAYC,SACZC,EAAAA,EAAOD,SACPE,EAAAA,GAAaC,wBAITC,EAAyC,cAA7BV,EAAkBd,QAChCc,EAAkBvH,MAAMkI,KAAKC,SAC7B,GAEE/B,EAA+B,cAAxBoB,EAAaf,QACtBe,EAAaxH,MAAMkI,KAAKC,SACxB,IAGE,WAAE1H,EAAU,cAAEE,GAAkBuF,EAAgBE,GAGtD,IAAItF,EAAiB,EAEnBA,EAD+B,cAA7B2G,EAAkBhB,OACHgB,EAAkBzH,MAAMkI,KAAKE,iBAAmB,EAEhDvB,EAAwBT,GAG3C,MAAMiC,EAA2B,CAC/BpI,eAAgBgI,EAAUvB,OAC1BjG,aACAE,gBACAG,kBAIFwE,EAAU+B,EAAUgB,GAEpBnD,EAASmD,EACX,CAAE,MAAOrD,GACP,MAAMsD,EAAetD,aAAiBuD,MAAQvD,EAAMwD,QAAU,gCAC9DvD,EAASqD,GACTG,QAAQzD,MAAM,gCAAiCA,EACjD,CAAC,QACCF,GAAW,EACb,IACC,CAACU,EAAkBJ,EAAWE,EAAWY,EAAiBW,IAM7D,OAJA6B,EAAAA,EAAAA,YAAU,KACRvB,GAAmB,GAClB,CAACA,IAEG,CACLvC,UACA/E,QACAmF,QACA2D,QAASxB,EACV,EDhH0BtC,GAE3B,OAAID,GACKvE,EAAAA,EAAAA,KAACuI,EAAAA,EAAc,CAACJ,QAAQ,0BAI/B/F,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACpB,GAAI,CAAEmB,EAAG,CAAEZ,GAAI,EAAG8G,GAAI,IAAMnH,SAAA,EAC/Be,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACpB,GAAI,CAAEC,GAAI,GAAIC,SAAA,EACjBrB,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTxB,QAAQ,KACR0B,UAAU,KACVrC,GAAI,CACFoC,WAAY,IACZtB,WAAY,oDACZwG,eAAgB,OAChBC,qBAAsB,OACtBC,oBAAqB,cACrBvH,GAAI,GACJC,SACH,eAGDrB,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTxB,QAAQ,KACRgB,MAAM,iBACN3B,GAAI,CAAEoC,WAAY,KAAMlC,SACzB,wEAKHrB,EAAAA,EAAAA,KAAC4I,EAAa,CAACpJ,MAAOA,KAEtBQ,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CACTxB,QAAQ,KACR0B,UAAU,KACVrC,GAAI,CACFoC,WAAY,IACZnC,GAAI,EACJ0B,MAAO,WACPzB,SACH,mBAGDrB,EAAAA,EAAAA,KAACyD,EAAgB,MACb,C,yDEtDV,SAAeoF,EAAAA,EAAAA,IAA4B7I,EAAAA,EAAAA,KAAK,OAAQ,CACtD8I,EAAG,4EACD,a,gIC4GJ,EAzG0CvJ,IAMnC,IANoC,QACzCuC,EAAU,UAAS,KACnBC,GAAO,EAAK,SACZV,EAAQ,GACRF,GAED5B,EADIwJ,GAAKC,EAAAA,EAAAA,GAAAzJ,EAAA0J,GAER,MAmFMC,EAnFgBC,MACpB,MAAMC,EAAa,CACjBpG,aAAc,OACdmB,WAAY,wCACZkF,OAAQ,gCACRC,SAAU,WACVC,SAAU,SACV,YAAaxH,EAAO,CAClByH,QAAS,KACTF,SAAU,WACVG,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACR3H,WAAY,sFACZ4H,QAAS,EACT1F,WAAY,oBACZ2F,OAAQ,GACN,CAAC,EACL,UAAW,CACT3H,UAAW,mBACX,YAAaJ,EAAO,CAClB8H,QAAS,GACP,CAAC,GAEP,QAAS,CACPP,SAAU,WACVQ,OAAQ,IAIZ,OAAQhI,GACN,IAAK,WACH,OAAAiI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKX,GAAU,IACbvG,UAAW,mCACXZ,WAAY,oDACZ,WAAS8H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJX,EAAW,YAAU,IACxBvG,UAAW,wCAIjB,IAAK,QACH,OAAAkH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKX,GAAU,IACbnH,WAAY,2BACZ+H,eAAgB,aAChBnH,UAAW,mCACXwG,OAAQ,qCACR,WAASU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJX,EAAW,YAAU,IACxBnH,WAAY,2BACZY,UAAW,sCAIjB,IAAK,WACH,OAAAkH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKX,GAAU,IACbnH,WAAY,uFACZoH,OAAQ,oCACRxG,UAAW,wCACX,WAASkH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJX,EAAW,YAAU,IACxBnH,WAAY,uFACZY,UAAW,4CAIjB,QACE,OAAAkH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKX,GAAU,IACbnH,WAAY,UACZY,UAAW,mCACX,WAASkH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJX,EAAW,YAAU,IACxBvG,UAAW,uCAGnB,EAGiBsG,GAEnB,OACEnJ,EAAAA,EAAAA,KAACiK,EAAAA,GAAIF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACH5I,GAAI,CACF+H,KACIgB,MAAMC,QAAQhJ,GAAMA,EAAK,CAACA,KAE5B4H,GAAK,IAAA1H,SAERA,IACI,C,+GC/FX,MAEM+I,EAAMC,EAAAA,EAAMC,OAAO,CACvBC,QAHmBC,4BAInBC,QAAS,CACP,eAAgB,oBAElBC,QAAS,MAIXN,EAAIO,aAAaC,QAAQC,KACtBC,IAAwC,IAADC,EAEtCD,EAAOE,SAAW,CAAEC,UAAWC,YAAYC,OAG3C,MAAMC,EAAQC,aAAaC,QAAQ,aAC/BF,IACFN,EAAOL,QAAQc,cAAa,UAAArJ,OAAakJ,IAI3CN,EAAOL,QAAQ,oBAAsB,iBAGrC,MAAMe,EAA6D,QAApDT,EAAGU,SAASC,cAAc,kCAA0B,IAAAX,OAAA,EAAjDA,EAAmDY,aAAa,WAalF,OAZIH,IACFV,EAAOL,QAAQ,gBAAkBe,GAW5BV,CAAM,IAEdnG,IACCiH,EAAAA,GAAYC,YAAYlH,EAAO,CAC7BnB,UAAW,aACXM,OAAQ,sBACRgI,YAAa,kCAERzE,QAAQ0E,OAAOpH,MAK1ByF,EAAIO,aAAaqB,SAASnB,KACvBmB,IAA6B,IAADC,EAE3B,MAAMnB,EAASkB,EAASlB,OAClBoB,EAAWhB,YAAYC,QAAwB,QAAfc,EAAAnB,EAAOE,gBAAQ,IAAAiB,OAAA,EAAfA,EAAiBhB,YAAa,GAG9C,IAADkB,EAIwBC,EAJzCF,EAAW,MACb9D,QAAQiE,KAAK,+BAADnK,OAA4C,QAA5CiK,EAAsBH,EAASlB,OAAOwB,cAAM,IAAAH,OAAA,EAAtBA,EAAwBI,cAAa,KAAArK,OAAI8J,EAASlB,OAAO0B,IAAG,UAAAtK,OAASuK,KAAKC,MAAMR,GAAS,OAIzHN,EAAAA,GAAYC,YAAY,IAAI3D,MAAM,qBAAsB,CACtD1E,UAAW,aACXM,OAAO,kBAAD5B,OAA0C,QAA1CkK,EAAoBJ,EAASlB,OAAOwB,cAAM,IAAAF,OAAA,EAAtBA,EAAwBG,cAAa,KAAArK,OAAI8J,EAASlB,OAAO0B,KACnFV,YAAa,2CAanB,OAAOE,CAAQ,IAEjBjF,UAA8B,IAAD4F,EAAAC,EAAAC,EAAAC,EAAAC,EAENnB,EAAAA,GAAYC,YAAYlH,EAAO,CAClDnB,UAAW,aACXM,OAAO,GAAD5B,OAAiB,QAAjByK,EAAKhI,EAAMmG,cAAM,IAAA6B,GAAQ,QAARC,EAAZD,EAAcL,cAAM,IAAAM,OAAR,EAAZA,EAAsBL,cAAa,KAAArK,OAAgB,QAAhB2K,EAAIlI,EAAMmG,cAAM,IAAA+B,OAAA,EAAZA,EAAcL,KAChEV,YAAakB,EAAgBrI,KAI/B,GAA+B,OAAb,QAAdmI,EAAAnI,EAAMqH,gBAAQ,IAAAc,OAAA,EAAdA,EAAgB1G,QAAgB,CAElC,MAAM,YAAE6G,SAAsB,8BACxBC,QAAiBD,EAAYE,eAEnC,GAAID,GAAYvI,EAAMmG,OAGpB,OADAnG,EAAMmG,OAAOL,QAAQc,cAAa,UAAArJ,OAAagL,GACxC9C,EAAIQ,QAAQjG,EAAMmG,QAGzBmC,EAAYG,QAEhB,CAGA,GAA+B,OAAb,QAAdL,EAAApI,EAAMqH,gBAAQ,IAAAe,OAAA,EAAdA,EAAgB3G,QAAgB,CAClC,MAAMiH,EAAa1I,EAAMqH,SAASvB,QAAQ,eACpC6C,EAAQD,EAAoC,IAAvBE,SAASF,GAAqB,IAIzD,OAFAjF,QAAQiE,KAAK,gCAADnK,OAAiCoL,EAAK,OAE3C,IAAIjG,SAAQ,CAACmG,EAASzB,KAC3B0B,YAAW,KACL9I,EAAMmG,OACRV,EAAIQ,QAAQjG,EAAMmG,QAAQ4C,KAAKF,GAASG,MAAM5B,GAE9CA,EAAOpH,EACT,GACC2I,EAAM,GAEb,CAEA,OAAOjG,QAAQ0E,OAAOpH,EAAM,IAKhC,MAAMqI,EAAmBrI,IACvB,IAAKA,EAAMqH,SACT,MAAO,mEAGT,MAAM5F,EAASzB,EAAMqH,SAAS5F,OACxByB,EAAOlD,EAAMqH,SAASnE,KAE5B,OAAQzB,GACN,KAAK,IACH,OAAW,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMM,UAAW,4CAC1B,KAAK,IACH,MAAO,iDACT,KAAK,IACH,MAAO,qDACT,KAAK,IACH,MAAO,wCACT,KAAK,IACH,OAAW,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMM,UAAW,yCAC1B,KAAK,IACH,MAAO,yDACT,KAAK,IACH,MAAO,qDACT,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,2DACT,QACE,OAAW,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMM,UAAW,kDAC5B,EAYWZ,EAAc,CACzBC,OAASoG,GACPxD,EAAItF,IAAI,cAAe,CAAE8I,WAE3BC,QAAUC,GACR1D,EAAItF,IAAI,cAAD5C,OAAe4L,EAAE,MAE1BxD,OAASyD,GACP3D,EAAI4D,KAAK,cAAeD,GAE1BE,OAAQA,CAACH,EAAYC,IACnB3D,EAAI8D,IAAI,cAADhM,OAAe4L,EAAE,KAAKC,GAE/BI,OAASL,GACP1D,EAAI+D,OAAO,cAADjM,OAAe4L,EAAE,MAE7BM,cAAgBN,GACd1D,EAAItF,IAAI,cAAD5C,OAAe4L,EAAE,iBAE1BO,YAAaA,CAACP,EAAYQ,IACxBlE,EAAI4D,KAAK,cAAD9L,OAAe4L,EAAE,kBAAkBQ,GAE7CC,YAAcT,GACZ1D,EAAItF,IAAI,cAAD5C,OAAe4L,EAAE,eAE1BU,WAAYA,CAACV,EAAYW,IACvBrE,EAAI4D,KAAK,cAAD9L,OAAe4L,EAAE,iBAAiBW,GAE5CC,WAAaZ,GACX1D,EAAItF,IAAI,cAAD5C,OAAe4L,EAAE,cAE1Ba,UAAWA,CAACb,EAAYc,IACtBxE,EAAI4D,KAAK,cAAD9L,OAAe4L,EAAE,gBAAgBc,IAIhCC,EAAc,CACzBrH,OAASoG,GACPxD,EAAItF,IAAI,eAAgB,CAAE8I,WAE5BC,QAAUC,GACR1D,EAAItF,IAAI,eAAD5C,OAAgB4L,EAAE,MAE3BxD,OAASgE,GACPlE,EAAI4D,KAAK,eAAgBM,GAE3BL,OAAQA,CAACH,EAAYQ,IACnBlE,EAAI8D,IAAI,eAADhM,OAAgB4L,EAAE,KAAKQ,GAEhCH,OAASL,GACP1D,EAAI+D,OAAO,eAADjM,OAAgB4L,EAAE,OAkCnBrG,EAAS,CACpBD,OAASoG,GACPxD,EAAItF,IAAI,SAAU,CAAE8I,WAEtBC,QAAUC,GACR1D,EAAItF,IAAI,SAAD5C,OAAU4L,EAAE,MAErBxD,OAASpE,GACPkE,EAAI4D,KAAK,SAAU9H,GAErB+H,OAAQA,CAACH,EAAY5H,IACnBkE,EAAI8D,IAAI,SAADhM,OAAU4L,EAAE,KAAK5H,GAE1BiI,OAASL,GACP1D,EAAI+D,OAAO,SAADjM,OAAU4L,EAAE,MAExBgB,aAAcA,CAAChB,EAAY1H,IACzBgE,EAAI2E,MAAM,SAAD7M,OAAU4L,EAAE,mBAAmB,CAAE1H,WAE5C4I,kBAAmBA,CAAClB,EAAYmB,IAC9B7E,EAAI2E,MAAM,SAAD7M,OAAU4L,EAAE,wBAAwB,CAAEmB,oBAItCC,EAAgB,CAC3B1H,OAASoG,GACPxD,EAAItF,IAAI,qBAAsB,CAAE8I,WAElCuB,aAAevB,GACbxD,EAAItF,IAAI,+BAAgC,CAAE8I,WAE5CC,QAAUC,GACR1D,EAAItF,IAAI,qBAAD5C,OAAsB4L,EAAE,OAoDtBsB,EAAe,CAE1BC,SAAWzB,GACTxD,EAAItF,IAAI,oBAAqB,CAAE8I,WAEjC0B,YAAcxB,GACZ1D,EAAItF,IAAI,oBAAD5C,OAAqB4L,EAAE,MAEhCyB,WAAa9N,GACX2I,EAAI4D,KAAK,oBAAqBvM,GAEhC+N,WAAYA,CAAC1B,EAAYrM,IACvB2I,EAAI8D,IAAI,oBAADhM,OAAqB4L,EAAE,KAAKrM,GAErCgO,WAAa3B,GACX1D,EAAI+D,OAAO,oBAADjM,OAAqB4L,EAAE,MAEnC4B,YAAaA,CAAC5B,EAAY6B,EAAkBC,IAC1CxF,EAAI4D,KAAK,oBAAD9L,OAAqB4L,EAAE,kBAAkB,CAAE6B,WAAUC,WAG/DC,cAAeA,IACbzF,EAAItF,IAAI,0BAEVgL,eAAiBC,GACf3F,EAAI4D,KAAK,yBAA0B+B,GAGrCC,aAAcA,IACZ5F,EAAItF,IAAI,yBAEVmL,eAAiBC,GACf9F,EAAI4D,KAAK,wBAAyBkC,GAGpCC,kBAAoBvC,GAClBxD,EAAItF,IAAI,8BAA+B,CAAE8I,WAG3CwC,kBAAoBxC,GAClBxD,EAAItF,IAAI,8BAA+B,CAAE8I,WAE3CyC,oBAAsBC,GACpBlG,EAAI4D,KAAK,8BAA+BsC,GAE1CC,oBAAqBA,CAACzC,EAAYwC,IAChClG,EAAI8D,IAAI,8BAADhM,OAA+B4L,EAAE,KAAKwC,IAwCpC5I,EAAe,CAC1B8I,oBAAqBA,IACnBpG,EAAItF,IAAI,2CAEV6C,oBAAqBA,IACnByC,EAAItF,IAAI,2CAEV2L,sBAAuBA,IACrBrG,EAAItF,IAAI,6CAEV4L,oBAAqBA,IACnBtG,EAAItF,IAAI,2CAEV6L,qBAAsBA,IACpBvG,EAAItF,IAAI,6CAGZ,G,yDCpcA,SAAe+D,EAAAA,EAAAA,IAA4B7I,EAAAA,EAAAA,KAAK,OAAQ,CACtD8I,EAAG,6VACD,c,2ECAG,MAAM1D,EAAyBA,CACpCwL,EACAC,EACAC,KAEOC,EAAAA,EAAAA,UAAQ,KACb,MAAMC,EAAQ9F,YAAYC,MACpB8F,EAASL,IACE1F,YAAYC,MAQ7B,OAAO8F,CAAM,GACZJ,GAwDQK,EAAwBC,IACnC,MAAMC,GAAcC,EAAAA,EAAAA,QAAe,GAC7BC,GAAYD,EAAAA,EAAAA,QAAe,GAGjCD,EAAYG,QAAUrG,YAAYC,OAElC9C,EAAAA,EAAAA,YAAU,KAERiJ,EAAUC,QAAUrG,YAAYC,MACVmG,EAAUC,QAAWH,EAAYG,QAUvD,MAAO,KAEerG,YAAYC,MACAmG,EAAUC,OAEG,CAG9C,GACA,CAACJ,KAGJ9I,EAAAA,EAAAA,YAAU,KACR,GAAI+I,EAAYG,QAAS,CACArG,YAAYC,MAAQiG,EAAYG,QAEnD/G,CAGN,IACA,EAkEStF,EAAcA,KACzB,MAAMsM,GAAQH,EAAAA,EAAAA,QAAoD,IAAII,KAiCtE,MAAO,CAAE3M,KA9BGgB,EAAAA,EAAAA,cAAa4L,IACvB,MAAMC,EAASH,EAAMD,QAAQzM,IAAI4M,GAEjC,GAAIC,EAAQ,CAGV,OAFkBrM,KAAK6F,MAAQwG,EAAOC,UANnB,KASjBJ,EAAMD,QAAQpD,OAAOuD,GACd,MAGFC,EAAO9J,IAChB,CAEA,OAAO,IAAI,GACV,IAeW7C,KAbFc,EAAAA,EAAAA,cAAY,CAAC4L,EAAa7J,KACpC2J,EAAMD,QAAQvM,IAAI0M,EAAK,CACrB7J,OACA+J,UAAWtM,KAAK6F,OAChB,GACD,IAQgB0G,OANL/L,EAAAA,EAAAA,cAAY,KACxB0L,EAAMD,QAAQM,OAAO,GACpB,IAIuBC,KAFbN,EAAMD,QAAQO,KAEK,C","sources":["components/StatsCardGrid.tsx","utils/formatters.ts","components/QuickActionsGrid.tsx","components/Dashboard.tsx","hooks/useBusinessMetrics.ts","../node_modules/@mui/icons-material/esm/TrendingUp.js","components/SoftCard.tsx","services/api.ts","../node_modules/@mui/icons-material/esm/AttachMoney.js","hooks/usePerformanceOptimization.ts"],"sourcesContent":["import React from 'react';\nimport { \n  Grid, \n  CardContent, \n  Typography, \n  Box, \n  Avatar \n} from '@mui/material';\nimport { \n  People as PeopleIcon,\n  Work as WorkIcon,\n  Schedule as ScheduleIcon,\n  AttachMoney as MoneyIcon,\n  TrendingUp as TrendingUpIcon\n} from '@mui/icons-material';\nimport SoftCard from './SoftCard';\nimport { formatCurrency } from '../utils/formatters';\n\ninterface DashboardStats {\n  totalCustomers: number;\n  activeJobs: number;\n  todaySchedule: number;\n  monthlyRevenue: number;\n}\n\nconst StatsCardGrid: React.FC<{ stats: DashboardStats }> = ({ stats }) => {\n  const statsCards = [\n    {\n      title: 'Total Customers',\n      value: stats.totalCustomers.toString(),\n      change: '+12%',\n      icon: <PeopleIcon />,\n      gradient: 'linear-gradient(135deg, #4A90E2 0%, #357ABD 100%)',\n      bgColor: 'rgba(74, 144, 226, 0.1)',\n    },\n    {\n      title: 'Active Jobs',\n      value: stats.activeJobs.toString(),\n      change: '+8%',\n      icon: <WorkIcon />,\n      gradient: 'linear-gradient(135deg, #51C878 0%, #3A9B5C 100%)',\n      bgColor: 'rgba(81, 200, 120, 0.1)',\n    },\n    {\n      title: 'Today\\'s Schedule',\n      value: stats.todaySchedule.toString(),\n      change: '+5%',\n      icon: <ScheduleIcon />,\n      gradient: 'linear-gradient(135deg, #FFD93D 0%, #E6C234 100%)',\n      bgColor: 'rgba(255, 217, 61, 0.1)',\n    },\n    {\n      title: 'Monthly Revenue',\n      value: formatCurrency(stats.monthlyRevenue),\n      change: '+18%',\n      icon: <MoneyIcon />,\n      gradient: 'linear-gradient(135deg, #FF6B6B 0%, #E55555 100%)',\n      bgColor: 'rgba(255, 107, 107, 0.1)',\n    },\n  ];\n\n  return (\n    <Grid container spacing={3} sx={{ mb: 5 }}>\n      {statsCards.map((card, index) => (\n        <Grid item xs={12} sm={6} lg={3} key={index}>\n          <SoftCard \n            variant=\"elevated\" \n            glow\n            sx={{\n              height: '100%',\n              background: `linear-gradient(135deg, ${card.bgColor} 0%, rgba(255, 255, 255, 0.8) 100%)`,\n              '&:hover': {\n                transform: 'translateY(-4px) scale(1.02)',\n              }\n            }}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\n                <Avatar\n                  sx={{\n                    width: 56,\n                    height: 56,\n                    background: card.gradient,\n                    boxShadow: '0px 4px 12px rgba(0, 0, 0, 0.15)',\n                  }}\n                >\n                  {card.icon}\n                </Avatar>\n                <Box \n                  display=\"flex\" \n                  alignItems=\"center\" \n                  sx={{ \n                    color: '#51C878',\n                    backgroundColor: 'rgba(81, 200, 120, 0.1)',\n                    borderRadius: '12px',\n                    px: 1.5,\n                    py: 0.5,\n                  }}\n                >\n                  <TrendingUpIcon sx={{ fontSize: 16, mr: 0.5 }} />\n                  <Typography variant=\"caption\" sx={{ fontWeight: 600 }}>\n                    {card.change}\n                  </Typography>\n                </Box>\n              </Box>\n              <Typography \n                color=\"text.secondary\" \n                sx={{ \n                  fontSize: '0.875rem',\n                  fontWeight: 500,\n                  mb: 1,\n                }}\n              >\n                {card.title}\n              </Typography>\n              <Typography \n                variant=\"h4\" \n                component=\"div\"\n                sx={{ \n                  fontWeight: 700,\n                  color: '#202124',\n                }}\n              >\n                {card.value}\n              </Typography>\n            </CardContent>\n          </SoftCard>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default StatsCardGrid;","export const formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n};","import React from 'react';\nimport { \n  Grid, \n  CardContent, \n  Typography, \n  Box, \n  Avatar \n} from '@mui/material';\nimport { \n  Work as WorkIcon,\n  Schedule as ScheduleIcon,\n  Receipt as ReceiptIcon,\n  Inventory as InventoryIcon,\n  Analytics as AnalyticsIcon,\n  People as PeopleIcon\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport SoftCard from './SoftCard';\n\nconst QuickActionsGrid: React.FC = () => {\n  const navigate = useNavigate();\n\n  const quickActions = [\n    {\n      title: 'Manage Jobs',\n      description: 'View and manage all work orders',\n      icon: <WorkIcon />,\n      action: () => navigate('/jobs'),\n    },\n    {\n      title: 'Schedule Calendar',\n      description: 'View scheduling calendar',\n      icon: <ScheduleIcon />,\n      action: () => navigate('/scheduling'),\n    },\n    {\n      title: 'Billing & Invoices',\n      description: 'Manage invoices and payments',\n      icon: <ReceiptIcon />,\n      action: () => navigate('/billing'),\n    },\n    {\n      title: 'Inventory',\n      description: 'Manage parts and supplies',\n      icon: <InventoryIcon />,\n      action: () => navigate('/inventory'),\n    },\n    {\n      title: 'Analytics',\n      description: 'Business reports and insights',\n      icon: <AnalyticsIcon />,\n      action: () => navigate('/analytics'),\n    },\n    {\n      title: 'Add Customer',\n      description: 'Create new customer profile',\n      icon: <PeopleIcon />,\n      action: () => navigate('/customers/new'),\n    },\n  ];\n\n  return (\n    <Grid container spacing={3}>\n      {quickActions.map((action, index) => (\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n          <SoftCard \n            variant=\"glass\" \n            sx={{ \n              height: '100%', \n              cursor: 'pointer',\n              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n              '&:hover': { \n                transform: 'translateY(-6px) scale(1.02)',\n                boxShadow: '0px 12px 40px rgba(74, 144, 226, 0.15)',\n              }\n            }} \n            onClick={action.action}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Box display=\"flex\" alignItems=\"center\" mb={2.5}>\n                <Avatar\n                  sx={{\n                    width: 48,\n                    height: 48,\n                    background: 'linear-gradient(135deg, #4A90E2 0%, #357ABD 100%)',\n                    mr: 2,\n                    boxShadow: '0px 4px 12px rgba(74, 144, 226, 0.3)',\n                  }}\n                >\n                  {action.icon}\n                </Avatar>\n                <Typography \n                  variant=\"h6\" \n                  component=\"div\"\n                  sx={{ \n                    fontWeight: 600,\n                    color: '#202124',\n                  }}\n                >\n                  {action.title}\n                </Typography>\n              </Box>\n              <Typography \n                variant=\"body2\" \n                color=\"text.secondary\"\n                sx={{ \n                  fontSize: '0.875rem',\n                  lineHeight: 1.6,\n                }}\n              >\n                {action.description}\n              </Typography>\n            </CardContent>\n          </SoftCard>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default QuickActionsGrid;","import React from 'react';\nimport { \n  Box, \n  Typography \n} from '@mui/material';\n\nimport { useBusinessMetrics } from '../hooks/useBusinessMetrics';\nimport LoadingSpinner from './LoadingSpinner';\nimport StatsCardGrid from './StatsCardGrid';\nimport QuickActionsGrid from './QuickActionsGrid';\n\nconst Dashboard: React.FC = () => {\n  const { loading, stats } = useBusinessMetrics();\n\n  if (loading) {\n    return <LoadingSpinner message=\"Loading dashboard...\" />;\n  }\n\n  return (\n    <Box sx={{ p: { xs: 2, md: 3 } }}>\n      <Box sx={{ mb: 4 }}>\n        <Typography \n          variant=\"h3\" \n          component=\"h1\" \n          sx={{ \n            fontWeight: 700,\n            background: 'linear-gradient(135deg, #2E5A8A 0%, #4A90E2 100%)',\n            backgroundClip: 'text',\n            WebkitBackgroundClip: 'text',\n            WebkitTextFillColor: 'transparent',\n            mb: 1,\n          }}\n        >\n          Dashboard\n        </Typography>\n        <Typography \n          variant=\"h6\" \n          color=\"text.secondary\" \n          sx={{ fontWeight: 400 }}\n        >\n          Welcome back! Here's what's happening with your business today.\n        </Typography>\n      </Box>\n      \n      <StatsCardGrid stats={stats} />\n\n      <Typography \n        variant=\"h5\" \n        component=\"h2\" \n        sx={{ \n          fontWeight: 600,\n          mb: 3,\n          color: '#202124',\n        }}\n      >\n        Quick Actions\n      </Typography>\n      <QuickActionsGrid />\n    </Box>\n  );\n};\n\nexport default Dashboard;","import { useState, useEffect, useCallback } from 'react';\nimport { customerApi, jobApi, analyticsApi } from '../services/api';\nimport { useMemoizedCalculation, useAPICache } from './usePerformanceOptimization';\n\nexport interface DashboardStats {\n  totalCustomers: number;\n  activeJobs: number;\n  todaySchedule: number;\n  monthlyRevenue: number;\n}\n\nexport const useBusinessMetrics = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [stats, setStats] = useState<DashboardStats>({\n    totalCustomers: 0,\n    activeJobs: 0,\n    todaySchedule: 0,\n    monthlyRevenue: 0,\n  });\n\n  // API caching for improved performance\n  const { get: getCached, set: setCached } = useAPICache<any>();\n\n  // Memoized date calculations\n  const dateCalculations = useMemoizedCalculation(() => ({\n    today: new Date().toISOString().split('T')[0],\n    currentMonth: new Date().getMonth(),\n    currentYear: new Date().getFullYear(),\n  }), [], 'DateCalculations');\n\n  // Optimized data processing functions\n  const processJobStats = useCallback((jobs: any[]) => {\n    const activeJobStatuses = ['pending', 'scheduled', 'in_progress'];\n    const activeJobs = jobs.filter(job => activeJobStatuses.includes(job.status)).length;\n    \n    const todaySchedule = jobs.filter(job => \n      job.scheduled_start && job.scheduled_start.startsWith(dateCalculations.today)\n    ).length;\n\n    return { activeJobs, todaySchedule };\n  }, [dateCalculations.today]);\n\n  const calculateMonthlyRevenue = useCallback((jobs: any[]) => {\n    return jobs\n      .filter(job => \n        job.status === 'completed' && \n        job.updated_at &&\n        new Date(job.updated_at).getMonth() === dateCalculations.currentMonth &&\n        new Date(job.updated_at).getFullYear() === dateCalculations.currentYear\n      )\n      .reduce((sum, job) => sum + (job.actual_cost || job.estimated_cost || 0), 0);\n  }, [dateCalculations.currentMonth, dateCalculations.currentYear]);\n\n  const loadDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Check cache first\n      const cacheKey = `dashboard-${dateCalculations.today}`;\n      const cachedStats = getCached(cacheKey);\n      if (cachedStats) {\n        setStats(cachedStats);\n        setLoading(false);\n        return;\n      }\n      \n      // Load data in parallel with improved error handling\n      const [customersResponse, jobsResponse, analyticsResponse] = await Promise.allSettled([\n        customerApi.getAll(),\n        jobApi.getAll(),\n        analyticsApi.getFinancialSummary(),\n      ]);\n\n      // Process responses with fallbacks\n      const customers = customersResponse.status === 'fulfilled' \n        ? customersResponse.value.data.results || [] \n        : [];\n        \n      const jobs = jobsResponse.status === 'fulfilled' \n        ? jobsResponse.value.data.results || [] \n        : [];\n\n      // Calculate job-related stats\n      const { activeJobs, todaySchedule } = processJobStats(jobs);\n\n      // Get monthly revenue with fallback calculation\n      let monthlyRevenue = 0;\n      if (analyticsResponse.status === 'fulfilled') {\n        monthlyRevenue = analyticsResponse.value.data.monthly_revenue || 0;\n      } else {\n        monthlyRevenue = calculateMonthlyRevenue(jobs);\n      }\n\n      const newStats: DashboardStats = {\n        totalCustomers: customers.length,\n        activeJobs,\n        todaySchedule,\n        monthlyRevenue,\n      };\n\n      // Cache the results\n      setCached(cacheKey, newStats);\n      \n      setStats(newStats);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboard data';\n      setError(errorMessage);\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [dateCalculations, getCached, setCached, processJobStats, calculateMonthlyRevenue]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [loadDashboardData]);\n\n  return { \n    loading, \n    stats, \n    error,\n    refetch: loadDashboardData\n  };\n};","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m16 6 2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"\n}), 'TrendingUp');","import React from 'react';\nimport { Card, CardProps, Box } from '@mui/material';\n\ninterface SoftCardProps extends Omit<CardProps, 'variant'> {\n  variant?: 'default' | 'elevated' | 'glass' | 'gradient';\n  glow?: boolean;\n  children: React.ReactNode;\n}\n\nconst SoftCard: React.FC<SoftCardProps> = ({\n  variant = 'default',\n  glow = false,\n  children,\n  sx,\n  ...props\n}) => {\n  const getCardStyles = () => {\n    const baseStyles = {\n      borderRadius: '20px',\n      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n      border: '1px solid rgba(0, 0, 0, 0.04)',\n      position: 'relative',\n      overflow: 'hidden',\n      '&::before': glow ? {\n        content: '\"\"',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'linear-gradient(135deg, rgba(74, 144, 226, 0.1) 0%, rgba(116, 185, 255, 0.05) 100%)',\n        opacity: 0,\n        transition: 'opacity 0.3s ease',\n        zIndex: 0,\n      } : {},\n      '&:hover': {\n        transform: 'translateY(-4px)',\n        '&::before': glow ? {\n          opacity: 1,\n        } : {},\n      },\n      '& > *': {\n        position: 'relative',\n        zIndex: 1,\n      },\n    };\n\n    switch (variant) {\n      case 'elevated':\n        return {\n          ...baseStyles,\n          boxShadow: '0px 8px 32px rgba(0, 0, 0, 0.08)',\n          background: 'linear-gradient(135deg, #FFFFFF 0%, #FAFBFC 100%)',\n          '&:hover': {\n            ...baseStyles['&:hover'],\n            boxShadow: '0px 12px 40px rgba(0, 0, 0, 0.12)',\n          },\n        };\n      \n      case 'glass':\n        return {\n          ...baseStyles,\n          background: 'rgba(255, 255, 255, 0.8)',\n          backdropFilter: 'blur(20px)',\n          boxShadow: '0px 4px 20px rgba(0, 0, 0, 0.06)',\n          border: '1px solid rgba(255, 255, 255, 0.2)',\n          '&:hover': {\n            ...baseStyles['&:hover'],\n            background: 'rgba(255, 255, 255, 0.9)',\n            boxShadow: '0px 8px 30px rgba(0, 0, 0, 0.1)',\n          },\n        };\n      \n      case 'gradient':\n        return {\n          ...baseStyles,\n          background: 'linear-gradient(135deg, rgba(74, 144, 226, 0.02) 0%, rgba(116, 185, 255, 0.02) 100%)',\n          border: '1px solid rgba(74, 144, 226, 0.1)',\n          boxShadow: '0px 4px 20px rgba(74, 144, 226, 0.08)',\n          '&:hover': {\n            ...baseStyles['&:hover'],\n            background: 'linear-gradient(135deg, rgba(74, 144, 226, 0.04) 0%, rgba(116, 185, 255, 0.04) 100%)',\n            boxShadow: '0px 8px 30px rgba(74, 144, 226, 0.12)',\n          },\n        };\n      \n      default:\n        return {\n          ...baseStyles,\n          background: '#FFFFFF',\n          boxShadow: '0px 4px 20px rgba(0, 0, 0, 0.06)',\n          '&:hover': {\n            ...baseStyles['&:hover'],\n            boxShadow: '0px 8px 30px rgba(0, 0, 0, 0.10)',\n          },\n        };\n    }\n  };\n\n  const cardStyles = getCardStyles();\n\n  return (\n    <Card\n      sx={[\n        cardStyles,\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...props}\n    >\n      {children}\n    </Card>\n  );\n};\n\nexport default SoftCard;","import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport { errorLogger, withErrorHandling, ErrorType } from '../utils/errorHandling';\nimport { Customer, CustomerListItem, Property, CustomerContact, CustomerReview } from '../types/customer';\nimport { Job, JobListItem } from '../types/job';\nimport { Invoice, Estimate, Payment } from '../types/billing';\nimport { Item, Category, Supplier, StockMovement, PurchaseOrder } from '../types/inventory';\nimport { Appointment, TechnicianAvailability, ScheduleConflict } from '../types/scheduling';\n\n// Extend the axios config to include metadata\ninterface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {\n  metadata?: {\n    startTime: number;\n  };\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor for adding auth tokens, performance monitoring, and logging\napi.interceptors.request.use(\n  (config: ExtendedAxiosRequestConfig) => {\n    // Add performance timing metadata\n    config.metadata = { startTime: performance.now() };\n    \n    // Add auth token from secure auth service\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    // Add security headers\n    config.headers['X-Requested-With'] = 'XMLHttpRequest';\n    \n    // Add CSRF protection if available\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Log API requests in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🌐 API Request: ${config.method?.toUpperCase()} ${config.url}`, {\n        params: config.params,\n        data: config.data\n      });\n    }\n\n    return config;\n  },\n  (error) => {\n    errorLogger.handleError(error, {\n      component: 'APIService',\n      action: 'Request Interceptor',\n      userMessage: 'Failed to prepare API request'\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling, performance monitoring, and logging\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    // Calculate request duration for performance monitoring\n    const config = response.config as ExtendedAxiosRequestConfig;\n    const duration = performance.now() - (config.metadata?.startTime || 0);\n    \n    // Log slow requests\n    if (duration > 2000) {\n      console.warn(`⚠️ Slow API call: ${response.config.method?.toUpperCase()} ${response.config.url} took ${Math.round(duration)}ms`);\n      \n      // Log slow requests for production monitoring\n      if (process.env.NODE_ENV === 'production') {\n        errorLogger.handleError(new Error('Slow API response'), {\n          component: 'APIService',\n          action: `Slow Response: ${response.config.method?.toUpperCase()} ${response.config.url}`,\n          userMessage: 'API response was slower than expected'\n        });\n      }\n    }\n\n    // Log successful responses in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url} (${Math.round(duration)}ms)`, {\n        status: response.status,\n        data: response.data\n      });\n    }\n    \n    return response;\n  },\n  async (error: AxiosError) => {\n    // Handle different types of errors\n    const errorDetails = errorLogger.handleError(error, {\n      component: 'APIService',\n      action: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,\n      userMessage: getErrorMessage(error)\n    });\n\n    // Handle specific error cases\n    if (error.response?.status === 401) {\n      // Try to refresh token before giving up\n      const { authService } = await import('./authService');\n      const newToken = await authService.refreshToken();\n      \n      if (newToken && error.config) {\n        // Retry the original request with new token\n        error.config.headers.Authorization = `Bearer ${newToken}`;\n        return api.request(error.config);\n      } else {\n        // Refresh failed, logout user\n        authService.logout();\n      }\n    }\n\n    // Handle rate limiting with exponential backoff\n    if (error.response?.status === 429) {\n      const retryAfter = error.response.headers['retry-after'];\n      const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000;\n      \n      console.warn(`Rate limited. Retrying after ${delay}ms`);\n      \n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (error.config) {\n            api.request(error.config).then(resolve).catch(reject);\n          } else {\n            reject(error);\n          }\n        }, delay);\n      });\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get user-friendly error messages\nconst getErrorMessage = (error: AxiosError): string => {\n  if (!error.response) {\n    return 'Network connection error. Please check your internet connection.';\n  }\n\n  const status = error.response.status;\n  const data = error.response.data as any;\n\n  switch (status) {\n    case 400:\n      return data?.message || 'Invalid request. Please check your input.';\n    case 401:\n      return 'Your session has expired. Please log in again.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 422:\n      return data?.message || 'Please check your input and try again.';\n    case 429:\n      return 'Too many requests. Please wait a moment and try again.';\n    case 500:\n      return 'Server error occurred. Our team has been notified.';\n    case 502:\n    case 503:\n    case 504:\n      return 'Service temporarily unavailable. Please try again later.';\n    default:\n      return data?.message || 'An unexpected error occurred. Please try again.';\n  }\n};\n\n// Enhanced API wrapper with error handling\nconst createApiMethod = <T>(apiCall: () => Promise<AxiosResponse<T>>, context: string) => {\n  return withErrorHandling(apiCall, {\n    component: 'APIService',\n    action: context\n  });\n};\n\n// Customer API\nexport const customerApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerListItem[] } }> =>\n    api.get('/customers/', { params }),\n  \n  getById: (id: number): Promise<{ data: Customer }> =>\n    api.get(`/customers/${id}/`),\n  \n  create: (customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.post('/customers/', customer),\n  \n  update: (id: number, customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.put(`/customers/${id}/`, customer),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/customers/${id}/`),\n  \n  getProperties: (id: number): Promise<{ data: Property[] }> =>\n    api.get(`/customers/${id}/properties/`),\n  \n  addProperty: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post(`/customers/${id}/add_property/`, property),\n  \n  getContacts: (id: number): Promise<{ data: CustomerContact[] }> =>\n    api.get(`/customers/${id}/contacts/`),\n  \n  addContact: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.post(`/customers/${id}/add_contact/`, contact),\n  \n  getReviews: (id: number): Promise<{ data: CustomerReview[] }> =>\n    api.get(`/customers/${id}/reviews/`),\n  \n  addReview: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.post(`/customers/${id}/add_review/`, review),\n};\n\n// Property API\nexport const propertyApi = {\n  getAll: (params?: any): Promise<{ data: { results: Property[] } }> =>\n    api.get('/properties/', { params }),\n  \n  getById: (id: number): Promise<{ data: Property }> =>\n    api.get(`/properties/${id}/`),\n  \n  create: (property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post('/properties/', property),\n  \n  update: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.put(`/properties/${id}/`, property),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/properties/${id}/`),\n};\n\n// Contact API\nexport const contactApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerContact[] } }> =>\n    api.get('/contacts/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerContact }> =>\n    api.get(`/contacts/${id}/`),\n  \n  update: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.put(`/contacts/${id}/`, contact),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/contacts/${id}/`),\n};\n\n// Review API\nexport const reviewApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerReview[] } }> =>\n    api.get('/reviews/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerReview }> =>\n    api.get(`/reviews/${id}/`),\n  \n  update: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.put(`/reviews/${id}/`, review),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/reviews/${id}/`),\n};\n\n// Job API\nexport const jobApi = {\n  getAll: (params?: any): Promise<{ data: { results: JobListItem[] } }> =>\n    api.get('/jobs/', { params }),\n  \n  getById: (id: number): Promise<{ data: Job }> =>\n    api.get(`/jobs/${id}/`),\n  \n  create: (job: Partial<Job>): Promise<{ data: Job }> =>\n    api.post('/jobs/', job),\n  \n  update: (id: number, job: Partial<Job>): Promise<{ data: Job }> =>\n    api.put(`/jobs/${id}/`, job),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/jobs/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/update_status/`, { status }),\n  \n  assignTechnicians: (id: number, technician_ids: number[]): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/assign_technicians/`, { technician_ids }),\n};\n\n// Technician API\nexport const technicianApi = {\n  getAll: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/', { params }),\n  \n  getAvailable: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/available/', { params }),\n  \n  getById: (id: number): Promise<{ data: any }> =>\n    api.get(`/jobs/technicians/${id}/`),\n};\n\n// Billing API\nexport const billingApi = {\n  // Invoice endpoints\n  getInvoices: (params?: any): Promise<{ data: { results: Invoice[] } }> =>\n    api.get('/billing/invoices/', { params }),\n  \n  getInvoiceById: (id: number): Promise<{ data: Invoice }> =>\n    api.get(`/billing/invoices/${id}/`),\n  \n  createInvoice: (invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.post('/billing/invoices/', invoice),\n  \n  updateInvoice: (id: number, invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.put(`/billing/invoices/${id}/`, invoice),\n  \n  deleteInvoice: (id: number): Promise<void> =>\n    api.delete(`/billing/invoices/${id}/`),\n  \n  sendInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/invoices/${id}/send/`),\n  \n  // Estimate endpoints\n  getEstimates: (params?: any): Promise<{ data: { results: Estimate[] } }> =>\n    api.get('/billing/estimates/', { params }),\n  \n  getEstimateById: (id: number): Promise<{ data: Estimate }> =>\n    api.get(`/billing/estimates/${id}/`),\n  \n  createEstimate: (estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.post('/billing/estimates/', estimate),\n  \n  updateEstimate: (id: number, estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.put(`/billing/estimates/${id}/`, estimate),\n  \n  deleteEstimate: (id: number): Promise<void> =>\n    api.delete(`/billing/estimates/${id}/`),\n  \n  convertToInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/estimates/${id}/convert_to_invoice/`),\n  \n  // Payment endpoints\n  getPayments: (params?: any): Promise<{ data: { results: Payment[] } }> =>\n    api.get('/billing/payments/', { params }),\n  \n  createPayment: (payment: Partial<Payment>): Promise<{ data: Payment }> =>\n    api.post('/billing/payments/', payment),\n};\n\n// Inventory API\nexport const inventoryApi = {\n  // Item endpoints\n  getItems: (params?: any): Promise<{ data: { results: Item[] } }> =>\n    api.get('/inventory/items/', { params }),\n  \n  getItemById: (id: number): Promise<{ data: Item }> =>\n    api.get(`/inventory/items/${id}/`),\n  \n  createItem: (item: Partial<Item>): Promise<{ data: Item }> =>\n    api.post('/inventory/items/', item),\n  \n  updateItem: (id: number, item: Partial<Item>): Promise<{ data: Item }> =>\n    api.put(`/inventory/items/${id}/`, item),\n  \n  deleteItem: (id: number): Promise<void> =>\n    api.delete(`/inventory/items/${id}/`),\n  \n  adjustStock: (id: number, quantity: number, reason: string): Promise<{ data: Item }> =>\n    api.post(`/inventory/items/${id}/adjust_stock/`, { quantity, reason }),\n  \n  // Category endpoints\n  getCategories: (): Promise<{ data: Category[] }> =>\n    api.get('/inventory/categories/'),\n  \n  createCategory: (category: Partial<Category>): Promise<{ data: Category }> =>\n    api.post('/inventory/categories/', category),\n  \n  // Supplier endpoints\n  getSuppliers: (): Promise<{ data: Supplier[] }> =>\n    api.get('/inventory/suppliers/'),\n  \n  createSupplier: (supplier: Partial<Supplier>): Promise<{ data: Supplier }> =>\n    api.post('/inventory/suppliers/', supplier),\n  \n  // Stock movement endpoints\n  getStockMovements: (params?: any): Promise<{ data: { results: StockMovement[] } }> =>\n    api.get('/inventory/stock-movements/', { params }),\n  \n  // Purchase order endpoints\n  getPurchaseOrders: (params?: any): Promise<{ data: { results: PurchaseOrder[] } }> =>\n    api.get('/inventory/purchase-orders/', { params }),\n  \n  createPurchaseOrder: (po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.post('/inventory/purchase-orders/', po),\n  \n  updatePurchaseOrder: (id: number, po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.put(`/inventory/purchase-orders/${id}/`, po),\n};\n\n// Scheduling API\nexport const schedulingApi = {\n  // Appointment endpoints\n  getAppointments: (params?: any): Promise<{ data: { results: Appointment[] } }> =>\n    api.get('/scheduling/appointments/', { params }),\n  \n  getAppointmentById: (id: number): Promise<{ data: Appointment }> =>\n    api.get(`/scheduling/appointments/${id}/`),\n  \n  createAppointment: (appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.post('/scheduling/appointments/', appointment),\n  \n  updateAppointment: (id: number, appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.put(`/scheduling/appointments/${id}/`, appointment),\n  \n  deleteAppointment: (id: number): Promise<void> =>\n    api.delete(`/scheduling/appointments/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Appointment }> =>\n    api.patch(`/scheduling/appointments/${id}/update_status/`, { status }),\n  \n  // Technician availability endpoints\n  getTechnicianAvailability: (params?: any): Promise<{ data: { results: TechnicianAvailability[] } }> =>\n    api.get('/scheduling/technician-availability/', { params }),\n  \n  createAvailability: (availability: Partial<TechnicianAvailability>): Promise<{ data: TechnicianAvailability }> =>\n    api.post('/scheduling/technician-availability/', availability),\n  \n  // Schedule conflict endpoints\n  getScheduleConflicts: (): Promise<{ data: { results: ScheduleConflict[] } }> =>\n    api.get('/scheduling/schedule-conflicts/'),\n  \n  resolveConflict: (id: number, notes: string): Promise<{ data: ScheduleConflict }> =>\n    api.patch(`/scheduling/schedule-conflicts/${id}/resolve/`, { resolution_notes: notes }),\n};\n\n// Analytics API\nexport const analyticsApi = {\n  getBusinessOverview: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/business_overview/'),\n  \n  getFinancialSummary: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/financial_summary/'),\n  \n  getOperationalMetrics: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/operational_metrics/'),\n  \n  getCustomerInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/customer_insights/'),\n  \n  getInventoryInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/inventory_insights/'),\n};\n\nexport default api;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4\"\n}), 'AttachMoney');","import { useMemo, useCallback, useRef, useEffect } from 'react';\nimport { debounce, throttle } from 'lodash';\n\n/**\n * Hook for memoizing expensive calculations\n */\nexport const useMemoizedCalculation = <T>(\n  calculation: () => T,\n  dependencies: React.DependencyList,\n  debugName?: string\n): T => {\n  return useMemo(() => {\n    const start = performance.now();\n    const result = calculation();\n    const duration = performance.now() - start;\n    \n    if (process.env.NODE_ENV === 'development' && duration > 16) {\n      console.warn(\n        `🐌 Slow calculation${debugName ? ` in ${debugName}` : ''}: ${Math.round(duration)}ms`\n      );\n    }\n    \n    return result;\n  }, dependencies);\n};\n\n/**\n * Hook for debounced callbacks to prevent excessive API calls\n */\nexport const useDebouncedCallback = <T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number = 300,\n  dependencies: React.DependencyList = []\n): T => {\n  const debouncedFn = useRef<any>(null);\n  \n  useEffect(() => {\n    debouncedFn.current = debounce(callback, delay);\n    \n    return () => {\n      if (debouncedFn.current && typeof debouncedFn.current.cancel === 'function') {\n        debouncedFn.current.cancel();\n      }\n    };\n  }, [callback, delay, ...dependencies]);\n  \n  return useCallback((...args: Parameters<T>) => {\n    return debouncedFn.current?.(...args);\n  }, []) as T;\n};\n\n/**\n * Hook for throttled callbacks to limit execution frequency\n */\nexport const useThrottledCallback = <T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number = 100,\n  dependencies: React.DependencyList = []\n): T => {\n  const throttledFn = useRef<any>(null);\n  \n  useEffect(() => {\n    throttledFn.current = throttle(callback, delay);\n    \n    return () => {\n      if (throttledFn.current && typeof throttledFn.current.cancel === 'function') {\n        throttledFn.current.cancel();\n      }\n    };\n  }, [callback, delay, ...dependencies]);\n  \n  return useCallback((...args: Parameters<T>) => {\n    return throttledFn.current?.(...args);\n  }, []) as T;\n};\n\n/**\n * Hook for measuring component render performance\n */\nexport const useRenderPerformance = (componentName: string) => {\n  const renderStart = useRef<number>(0);\n  const mountTime = useRef<number>(0);\n  \n  // Measure render start\n  renderStart.current = performance.now();\n  \n  useEffect(() => {\n    // Component mounted\n    mountTime.current = performance.now();\n    const mountDuration = mountTime.current - (renderStart.current || 0);\n    \n    if (process.env.NODE_ENV === 'development') {\n      if (mountDuration > 16) {\n        console.warn(`🐌 Slow mount for ${componentName}: ${Math.round(mountDuration)}ms`);\n      } else {\n        console.log(`⚡ ${componentName} mounted in ${Math.round(mountDuration)}ms`);\n      }\n    }\n    \n    return () => {\n      // Component will unmount\n      const unmountTime = performance.now();\n      const lifetime = unmountTime - (mountTime.current || 0);\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log(`📊 ${componentName} lifetime: ${Math.round(lifetime)}ms`);\n      }\n    };\n  }, [componentName]);\n  \n  // Measure render completion\n  useEffect(() => {\n    if (renderStart.current) {\n      const renderDuration = performance.now() - renderStart.current;\n      \n      if (process.env.NODE_ENV === 'development' && renderDuration > 16) {\n        console.warn(`🐌 Slow render for ${componentName}: ${Math.round(renderDuration)}ms`);\n      }\n    }\n  });\n};\n\n/**\n * Hook for optimizing large lists with virtual scrolling preparation\n */\nexport const useListOptimization = <T>(\n  items: T[],\n  itemHeight: number = 50,\n  containerHeight: number = 400\n) => {\n  return useMemo(() => {\n    const visibleCount = Math.ceil(containerHeight / itemHeight) + 2; // +2 for buffer\n    const startIndex = 0; // This would be calculated based on scroll position\n    const endIndex = Math.min(startIndex + visibleCount, items.length);\n    \n    return {\n      visibleItems: items.slice(startIndex, endIndex),\n      totalHeight: items.length * itemHeight,\n      startIndex,\n      endIndex,\n      visibleCount\n    };\n  }, [items, itemHeight, containerHeight]);\n};\n\n/**\n * Hook for lazy loading images and components\n */\nexport const useLazyLoading = () => {\n  const intersectionObserver = useRef<IntersectionObserver | null>(null);\n  \n  const observe = useCallback((element: Element, callback: () => void) => {\n    if (!intersectionObserver.current) {\n      intersectionObserver.current = new IntersectionObserver(\n        (entries) => {\n          entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n              callback();\n              intersectionObserver.current?.unobserve(entry.target);\n            }\n          });\n        },\n        { threshold: 0.1 }\n      );\n    }\n    \n    intersectionObserver.current.observe(element);\n  }, []);\n  \n  const unobserve = useCallback((element: Element) => {\n    intersectionObserver.current?.unobserve(element);\n  }, []);\n  \n  useEffect(() => {\n    return () => {\n      intersectionObserver.current?.disconnect();\n    };\n  }, []);\n  \n  return { observe, unobserve };\n};\n\n/**\n * Hook for caching API responses in memory\n */\nexport const useAPICache = <T>() => {\n  const cache = useRef<Map<string, { data: T; timestamp: number }>>(new Map());\n  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n  \n  const get = useCallback((key: string): T | null => {\n    const cached = cache.current.get(key);\n    \n    if (cached) {\n      const isExpired = Date.now() - cached.timestamp > CACHE_DURATION;\n      \n      if (isExpired) {\n        cache.current.delete(key);\n        return null;\n      }\n      \n      return cached.data;\n    }\n    \n    return null;\n  }, []);\n  \n  const set = useCallback((key: string, data: T): void => {\n    cache.current.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }, []);\n  \n  const clear = useCallback(() => {\n    cache.current.clear();\n  }, []);\n  \n  const size = cache.current.size;\n  \n  return { get, set, clear, size };\n};\n\nexport default {\n  useMemoizedCalculation,\n  useDebouncedCallback,\n  useThrottledCallback,\n  useRenderPerformance,\n  useListOptimization,\n  useLazyLoading,\n  useAPICache\n};"],"names":["_ref","stats","statsCards","title","value","totalCustomers","toString","change","icon","_jsx","PeopleIcon","gradient","bgColor","activeJobs","WorkIcon","todaySchedule","ScheduleIcon","amount","monthlyRevenue","Intl","NumberFormat","style","currency","format","MoneyIcon","Grid","container","spacing","sx","mb","children","map","card","index","item","xs","sm","lg","SoftCard","variant","glow","height","background","concat","transform","_jsxs","CardContent","p","Box","display","alignItems","justifyContent","Avatar","width","boxShadow","color","backgroundColor","borderRadius","px","py","TrendingUpIcon","fontSize","mr","Typography","fontWeight","component","QuickActionsGrid","navigate","useNavigate","quickActions","description","action","ReceiptIcon","InventoryIcon","AnalyticsIcon","cursor","transition","onClick","lineHeight","Dashboard","loading","useBusinessMetrics","setLoading","useState","error","setError","setStats","get","getCached","set","setCached","useAPICache","dateCalculations","useMemoizedCalculation","today","Date","toISOString","split","currentMonth","getMonth","currentYear","getFullYear","processJobStats","useCallback","jobs","activeJobStatuses","filter","job","includes","status","length","scheduled_start","startsWith","calculateMonthlyRevenue","updated_at","reduce","sum","actual_cost","estimated_cost","loadDashboardData","async","cacheKey","cachedStats","customersResponse","jobsResponse","analyticsResponse","Promise","allSettled","customerApi","getAll","jobApi","analyticsApi","getFinancialSummary","customers","data","results","monthly_revenue","newStats","errorMessage","Error","message","console","useEffect","refetch","LoadingSpinner","md","backgroundClip","WebkitBackgroundClip","WebkitTextFillColor","StatsCardGrid","createSvgIcon","d","props","_objectWithoutProperties","_excluded","cardStyles","getCardStyles","baseStyles","border","position","overflow","content","top","left","right","bottom","opacity","zIndex","_objectSpread","backdropFilter","Card","Array","isArray","api","axios","create","baseURL","process","headers","timeout","interceptors","request","use","config","_document$querySelect","metadata","startTime","performance","now","token","localStorage","getItem","Authorization","csrfToken","document","querySelector","getAttribute","errorLogger","handleError","userMessage","reject","response","_config$metadata","duration","_response$config$meth","_response$config$meth2","warn","method","toUpperCase","url","Math","round","_error$config","_error$config$method","_error$config2","_error$response","_error$response2","getErrorMessage","authService","newToken","refreshToken","logout","retryAfter","delay","parseInt","resolve","setTimeout","then","catch","params","getById","id","customer","post","update","put","delete","getProperties","addProperty","property","getContacts","addContact","contact","getReviews","addReview","review","propertyApi","updateStatus","patch","assignTechnicians","technician_ids","technicianApi","getAvailable","inventoryApi","getItems","getItemById","createItem","updateItem","deleteItem","adjustStock","quantity","reason","getCategories","createCategory","category","getSuppliers","createSupplier","supplier","getStockMovements","getPurchaseOrders","createPurchaseOrder","po","updatePurchaseOrder","getBusinessOverview","getOperationalMetrics","getCustomerInsights","getInventoryInsights","calculation","dependencies","debugName","useMemo","start","result","useRenderPerformance","componentName","renderStart","useRef","mountTime","current","cache","Map","key","cached","timestamp","clear","size"],"sourceRoot":""}