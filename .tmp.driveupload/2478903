{"version":3,"file":"static/js/904.31a642ac.chunk.js","mappings":"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","sources":["components/JobList.tsx","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Visibility.js","services/api.ts","utils/validation.ts","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jobApi, customerApi } from '../services/api';\nimport { Job, JobListItem } from '../types/job';\nimport { CustomerListItem } from '../types/customer';\nimport { validateForm, commonValidationRules, formatCurrency } from '../utils/validation';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Chip,\n  TextField,\n  MenuItem,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Alert,\n  FormControl,\n  InputLabel,\n  Select,\n  FormHelperText,\n  Divider,\n  CircularProgress\n} from '@mui/material';\n// Using native datetime-local for better compatibility\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  Delete as DeleteIcon,\n  Search as SearchIcon\n} from '@mui/icons-material';\n\n// Using Job interface from types/job.ts\n\n\ninterface ServiceType {\n  id: number;\n  name: string;\n}\n\ninterface Technician {\n  id: number;\n  user: {\n    first_name: string;\n    last_name: string;\n  };\n  full_name?: string;\n}\n\nconst JobList: React.FC = () => {\n  const navigate = useNavigate();\n  const [jobs, setJobs] = useState<JobListItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [editingJob, setEditingJob] = useState<JobListItem | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [priorityFilter, setPriorityFilter] = useState('');\n  \n  // Demo data for dropdowns\n  const [customers, setCustomers] = useState<CustomerListItem[]>([]);\n  const [serviceTypes, setServiceTypes] = useState<ServiceType[]>([]);\n  const [technicians, setTechnicians] = useState<Technician[]>([]);\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    customer_id: '',\n    property_address: '',\n    service_type_id: '',\n    status: 'pending',\n    priority: 'medium',\n    scheduled_date: new Date(),\n    assigned_technician_id: '',\n    description: '',\n    estimated_duration: 2,\n    total_amount: 0,\n    notes: ''\n  });\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n\n\n  const loadJobs = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      const response = await jobApi.getAll();\n      setJobs(response.data.results || []);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error loading jobs:', err);\n      setError('Failed to load jobs. Please check your connection and try again.');\n      setJobs([]);\n      setLoading(false);\n    }\n  };\n  \n  // Load customers, service types, and technicians\n  const loadReferenceData = async () => {\n    try {\n      // Load customers\n      const customersResponse = await customerApi.getAll();\n      setCustomers(customersResponse.data.results || []);\n      \n      // Load technicians - using mock data for now\n      setTechnicians([\n        { id: 1, user: { first_name: 'John', last_name: 'Smith' }, full_name: 'John Smith' },\n        { id: 2, user: { first_name: 'Jane', last_name: 'Doe' }, full_name: 'Jane Doe' },\n        { id: 3, user: { first_name: 'Mike', last_name: 'Johnson' }, full_name: 'Mike Johnson' }\n      ]);\n      \n      // For service types, we'll use a static list since there might not be an API endpoint\n      setServiceTypes([\n        { id: 1, name: 'Electrical Repair' },\n        { id: 2, name: 'Panel Installation' },\n        { id: 3, name: 'Emergency Service' },\n        { id: 4, name: 'Wiring Installation' },\n        { id: 5, name: 'Lighting Installation' },\n        { id: 6, name: 'Circuit Installation' },\n        { id: 7, name: 'Outlet Installation' },\n        { id: 8, name: 'Switch Installation' },\n        { id: 9, name: 'GFCI Installation' },\n        { id: 10, name: 'Electrical Inspection' },\n      ]);\n    } catch (err) {\n      console.error('Error loading reference data:', err);\n      // Set empty arrays if API calls fail\n      setCustomers([]);\n      setTechnicians([]);\n      setServiceTypes([]);\n    }\n  };\n\n  useEffect(() => {\n    loadJobs();\n    loadReferenceData();\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'warning';\n      case 'scheduled': return 'info';\n      case 'in_progress': return 'primary';\n      case 'completed': return 'success';\n      case 'cancelled': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low': return 'success';\n      case 'medium': return 'warning';\n      case 'high': return 'error';\n      case 'emergency': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const filteredJobs = jobs.filter(job => {\n    const customerName = job.customer_name || '';\n    const serviceType = job.service_type || job.title || '';\n    const matchesSearch = job.job_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         serviceType.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === '' || job.status === statusFilter;\n    const matchesPriority = priorityFilter === '' || job.priority === priorityFilter;\n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  const handleCreateJob = () => {\n    navigate('/jobs/new');\n  };\n\n  const handleEditJob = (job: JobListItem) => {\n    setEditingJob(job);\n    \n    // Find the associated customer, service type, and technician IDs\n    const customerId = customers.find(c => c.full_name === job.customer_name)?.id.toString() || '';\n    const serviceTypeId = serviceTypes.find(s => s.name === job.service_type)?.id.toString() || '';\n    \n    // Safely handle technician lookup\n    let technicianId = '';\n    if (job.assigned_technicians && job.assigned_technicians.length > 0) {\n      technicianId = technicians.find(t => t.full_name === job.assigned_technicians![0])?.id.toString() || '';\n    }\n    \n    setFormData({\n      customer_id: customerId,\n      property_address: job.property_address || '',\n      service_type_id: serviceTypeId,\n      status: job.status,\n      priority: job.priority,\n      scheduled_date: new Date(job.scheduled_start || job.created_at || new Date()),\n      assigned_technician_id: technicianId,\n      description: job.description || '',\n      estimated_duration: job.estimated_duration || 0,\n      total_amount: job.actual_cost || job.estimated_cost,\n      notes: job.notes || ''\n    });\n    \n    setFormErrors({});\n    setOpenDialog(true);\n  };\n\n  const handleDeleteJob = async (jobId: number) => {\n    if (window.confirm('Are you sure you want to delete this job?')) {\n      try {\n        await jobApi.delete(jobId);\n        // Reload jobs after successful deletion\n        await loadJobs();\n      } catch (err) {\n        console.error('Error deleting job:', err);\n        setError('Failed to delete job. Please try again.');\n      }\n    }\n  };\n\n  const handleFormChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear error for this field if it exists\n    if (formErrors[field]) {\n      setFormErrors(prev => {\n        const newErrors = {...prev};\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n  \n  const validateJobForm = () => {\n    const validationRules = {\n      customer_id: { required: true },\n      property_address: commonValidationRules.address,\n      service_type_id: { required: true },\n      description: commonValidationRules.description,\n      estimated_duration: commonValidationRules.duration,\n      total_amount: commonValidationRules.currency\n    };\n    \n    const result = validateForm(formData, validationRules);\n    setFormErrors(result.errors);\n    return result.isValid;\n  };\n  \n  const handleSaveJob = async () => {\n    try {\n      if (!validateJobForm()) return;\n      setSubmitting(true);\n      \n      const jobData = {\n        customer: parseInt(formData.customer_id),\n        property_address: formData.property_address,\n        service_type: serviceTypes.find(st => st.id.toString() === formData.service_type_id)?.name || '',\n        status: formData.status as Job['status'],\n        priority: formData.priority as Job['priority'],\n        scheduled_start: formData.scheduled_date instanceof Date \n          ? formData.scheduled_date.toISOString() \n          : formData.scheduled_date,\n        assigned_to: formData.assigned_technician_id ? [parseInt(formData.assigned_technician_id)] : [],\n        description: formData.description,\n        estimated_duration: formData.estimated_duration,\n        estimated_cost: formData.total_amount,\n        notes: formData.notes\n      };\n\n      if (editingJob) {\n        await jobApi.update(editingJob.id, jobData);\n      } else {\n        await jobApi.create(jobData);\n      }\n      \n      // Reload jobs after successful save\n      await loadJobs();\n      setOpenDialog(false);\n      setSubmitting(false);\n    } catch (err) {\n      console.error('Error saving job:', err);\n      setError('Failed to save job. Please try again.');\n      setSubmitting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress size={40} sx={{ mb: 2 }} />\n        <Typography variant=\"h6\" color=\"textSecondary\">Loading jobs...</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Jobs & Work Orders\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleCreateJob}\n        >\n          Create Job\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">Total Jobs</Typography>\n              <Typography variant=\"h4\" color=\"primary\">\n                {jobs.length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">Pending</Typography>\n              <Typography variant=\"h4\" color=\"warning.main\">\n                {jobs.filter(j => j.status === 'pending').length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">In Progress</Typography>\n              <Typography variant=\"h4\" color=\"primary\">\n                {jobs.filter(j => j.status === 'in_progress').length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">Completed</Typography>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {jobs.filter(j => j.status === 'completed').length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Filters */}\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Search jobs...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <SearchIcon color=\"action\" sx={{ mr: 1 }} />\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <TextField\n            select\n            fullWidth\n            label=\"Status\"\n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n          >\n            <MenuItem value=\"\">All Statuses</MenuItem>\n            <MenuItem value=\"pending\">Pending</MenuItem>\n            <MenuItem value=\"scheduled\">Scheduled</MenuItem>\n            <MenuItem value=\"in_progress\">In Progress</MenuItem>\n            <MenuItem value=\"completed\">Completed</MenuItem>\n            <MenuItem value=\"cancelled\">Cancelled</MenuItem>\n          </TextField>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <TextField\n            select\n            fullWidth\n            label=\"Priority\"\n            value={priorityFilter || ''}\n            onChange={(e) => setPriorityFilter(e.target.value)}\n          >\n            <MenuItem value=\"\">All Priorities</MenuItem>\n            <MenuItem value=\"low\">Low</MenuItem>\n            <MenuItem value=\"medium\">Medium</MenuItem>\n            <MenuItem value=\"high\">High</MenuItem>\n            <MenuItem value=\"emergency\">Emergency</MenuItem>\n          </TextField>\n        </Grid>\n      </Grid>\n\n      {/* Jobs Table */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Job Number</TableCell>\n              <TableCell>Customer</TableCell>\n              <TableCell>Service Type</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Priority</TableCell>\n              <TableCell>Scheduled Date</TableCell>\n              <TableCell>Technician</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredJobs.map((job) => (\n              <TableRow key={job.id}>\n                <TableCell>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    {job.job_number}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Box>\n                    <Typography variant=\"body2\">{job.customer_name || 'N/A'}</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {job.property_address || 'N/A'}\n                    </Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>{job.service_type || job.title || 'N/A'}</TableCell>\n                <TableCell>\n                  <Chip\n                    label={job.status.replace('_', ' ')}\n                    color={getStatusColor(job.status) as any}\n                    size=\"small\"\n                    sx={{ textTransform: 'capitalize' }}\n                  />\n                </TableCell>\n                <TableCell>\n                  <Chip\n                    label={job.priority}\n                    color={getPriorityColor(job.priority) as any}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{ textTransform: 'capitalize' }}\n                  />\n                </TableCell>\n                <TableCell>\n                  {job.scheduled_start ? \n                    new Date(job.scheduled_start).toLocaleDateString() + ' ' +\n                    new Date(job.scheduled_start).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n                    : 'Not scheduled'\n                  }\n                </TableCell>\n                <TableCell>{(job.assigned_technicians && job.assigned_technicians.length > 0 ? job.assigned_technicians.join(', ') : 'Unassigned')}</TableCell>\n                <TableCell>${(job.actual_cost || job.estimated_cost || 0).toFixed(2)}</TableCell>\n                <TableCell>\n                  <Box display=\"flex\" gap={1}>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => handleEditJob(job)}\n                      color=\"primary\"\n                    >\n                      <ViewIcon />\n                    </IconButton>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => handleEditJob(job)}\n                      color=\"primary\"\n                    >\n                      <EditIcon />\n                    </IconButton>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => handleDeleteJob(job.id)}\n                      color=\"error\"\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {filteredJobs.length === 0 && (\n        <Box textAlign=\"center\" py={4}>\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            No jobs found\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            {searchTerm || statusFilter ? 'Try adjusting your filters' : 'Create your first job to get started'}\n          </Typography>\n          {!searchTerm && !statusFilter && (\n            <Button variant=\"contained\" onClick={handleCreateJob}>\n              Create First Job\n            </Button>\n          )}\n        </Box>\n      )}\n\n      {/* Job Dialog */}\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {editingJob ? 'Edit Job' : 'Create New Job'}\n        </DialogTitle>\n        <DialogContent>\n          <Box component=\"form\" sx={{ mt: 2 }}>\n            <Grid container spacing={2}>\n              {/* Customer Selection */}\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth error={!!formErrors.customer_id}>\n                  <InputLabel>Customer</InputLabel>\n                  <Select\n                    value={formData.customer_id}\n                    label=\"Customer\"\n                    onChange={(e) => handleFormChange('customer_id', e.target.value)}\n                  >\n                    <MenuItem value=\"\"><em>Select Customer</em></MenuItem>\n                    {customers.map(customer => (\n                      <MenuItem key={customer.id} value={customer.id.toString()}>\n                        {customer.full_name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                  {formErrors.customer_id && (\n                    <FormHelperText>{formErrors.customer_id}</FormHelperText>\n                  )}\n                </FormControl>\n              </Grid>\n              \n              {/* Property Address */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Property Address\"\n                  value={formData.property_address}\n                  onChange={(e) => handleFormChange('property_address', e.target.value)}\n                  error={!!formErrors.property_address}\n                  helperText={formErrors.property_address}\n                />\n              </Grid>\n              \n              {/* Service Type */}\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth error={!!formErrors.service_type_id}>\n                  <InputLabel>Service Type</InputLabel>\n                  <Select\n                    value={formData.service_type_id}\n                    label=\"Service Type\"\n                    onChange={(e) => handleFormChange('service_type_id', e.target.value)}\n                  >\n                    <MenuItem value=\"\"><em>Select Service Type</em></MenuItem>\n                    {serviceTypes.map(type => (\n                      <MenuItem key={type.id} value={type.id.toString()}>\n                        {type.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                  {formErrors.service_type_id && (\n                    <FormHelperText>{formErrors.service_type_id}</FormHelperText>\n                  )}\n                </FormControl>\n              </Grid>\n              \n              {/* Status */}\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    value={formData.status}\n                    label=\"Status\"\n                    onChange={(e) => handleFormChange('status', e.target.value)}\n                  >\n                    <MenuItem value=\"pending\">Pending</MenuItem>\n                    <MenuItem value=\"scheduled\">Scheduled</MenuItem>\n                    <MenuItem value=\"in_progress\">In Progress</MenuItem>\n                    <MenuItem value=\"completed\">Completed</MenuItem>\n                    <MenuItem value=\"cancelled\">Cancelled</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              {/* Priority */}\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Priority</InputLabel>\n                  <Select\n                    value={formData.priority}\n                    label=\"Priority\"\n                    onChange={(e) => handleFormChange('priority', e.target.value)}\n                  >\n                    <MenuItem value=\"low\">Low</MenuItem>\n                    <MenuItem value=\"medium\">Medium</MenuItem>\n                    <MenuItem value=\"high\">High</MenuItem>\n                    <MenuItem value=\"emergency\">Emergency</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              {/* Scheduled Date/Time */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Scheduled Date & Time\"\n                  type=\"datetime-local\"\n                  value={formData.scheduled_date ? \n                    new Date(formData.scheduled_date).toISOString().slice(0, 16) : \n                    ''\n                  }\n                  onChange={(e) => {\n                    const dateValue = e.target.value ? new Date(e.target.value).toISOString() : '';\n                    handleFormChange('scheduled_date', dateValue);\n                  }}\n                  InputLabelProps={{ shrink: true }}\n                  helperText=\"Select date and time for the job\"\n                />\n              </Grid>\n              \n              {/* Technician */}\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Assigned Technician</InputLabel>\n                  <Select\n                    value={formData.assigned_technician_id}\n                    label=\"Assigned Technician\"\n                    onChange={(e) => handleFormChange('assigned_technician_id', e.target.value)}\n                  >\n                    <MenuItem value=\"\"><em>None</em></MenuItem>\n                    {technicians.map(tech => (\n                      <MenuItem key={tech.id} value={tech.id.toString()}>\n                        {tech.full_name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              {/* Estimated Duration */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Estimated Duration (hours)\"\n                  value={formData.estimated_duration}\n                  onChange={(e) => handleFormChange('estimated_duration', e.target.value)}\n                  error={!!formErrors.estimated_duration}\n                  helperText={formErrors.estimated_duration}\n                  InputProps={{ inputProps: { min: 0 } }}\n                />\n              </Grid>\n              \n              {/* Total Amount */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Total Amount ($)\"\n                  value={formData.total_amount}\n                  onChange={(e) => handleFormChange('total_amount', e.target.value)}\n                  error={!!formErrors.total_amount}\n                  helperText={formErrors.total_amount}\n                  InputProps={{ inputProps: { min: 0, step: 0.01 } }}\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Divider sx={{ my: 1 }} />\n              </Grid>\n              \n              {/* Description */}\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={3}\n                  label=\"Job Description\"\n                  value={formData.description}\n                  onChange={(e) => handleFormChange('description', e.target.value)}\n                  error={!!formErrors.description}\n                  helperText={formErrors.description}\n                />\n              </Grid>\n              \n              {/* Notes */}\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={3}\n                  label=\"Additional Notes\"\n                  value={formData.notes}\n                  onChange={(e) => handleFormChange('notes', e.target.value)}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\n          <Button \n            variant=\"contained\" \n            onClick={handleSaveJob}\n            disabled={submitting}\n          >\n            {submitting ? <CircularProgress size={20} /> : 'Save'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default JobList;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport { errorLogger, withErrorHandling, ErrorType } from '../utils/errorHandling';\nimport { Customer, CustomerListItem, Property, CustomerContact, CustomerReview } from '../types/customer';\nimport { Job, JobListItem } from '../types/job';\nimport { Invoice, Estimate, Payment } from '../types/billing';\nimport { Item, Category, Supplier, StockMovement, PurchaseOrder } from '../types/inventory';\nimport { Appointment, TechnicianAvailability, ScheduleConflict } from '../types/scheduling';\n\n// Extend the axios config to include metadata\ninterface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {\n  metadata?: {\n    startTime: number;\n  };\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor for adding auth tokens, performance monitoring, and logging\napi.interceptors.request.use(\n  (config: ExtendedAxiosRequestConfig) => {\n    // Add performance timing metadata\n    config.metadata = { startTime: performance.now() };\n    \n    // Add auth token from secure auth service\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    // Add security headers\n    config.headers['X-Requested-With'] = 'XMLHttpRequest';\n    \n    // Add CSRF protection if available\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Log API requests in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🌐 API Request: ${config.method?.toUpperCase()} ${config.url}`, {\n        params: config.params,\n        data: config.data\n      });\n    }\n\n    return config;\n  },\n  (error) => {\n    errorLogger.handleError(error, {\n      component: 'APIService',\n      action: 'Request Interceptor',\n      userMessage: 'Failed to prepare API request'\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling, performance monitoring, and logging\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    // Calculate request duration for performance monitoring\n    const config = response.config as ExtendedAxiosRequestConfig;\n    const duration = performance.now() - (config.metadata?.startTime || 0);\n    \n    // Log slow requests\n    if (duration > 2000) {\n      console.warn(`⚠️ Slow API call: ${response.config.method?.toUpperCase()} ${response.config.url} took ${Math.round(duration)}ms`);\n      \n      // Log slow requests for production monitoring\n      if (process.env.NODE_ENV === 'production') {\n        errorLogger.handleError(new Error('Slow API response'), {\n          component: 'APIService',\n          action: `Slow Response: ${response.config.method?.toUpperCase()} ${response.config.url}`,\n          userMessage: 'API response was slower than expected'\n        });\n      }\n    }\n\n    // Log successful responses in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url} (${Math.round(duration)}ms)`, {\n        status: response.status,\n        data: response.data\n      });\n    }\n    \n    return response;\n  },\n  async (error: AxiosError) => {\n    // Handle different types of errors\n    const errorDetails = errorLogger.handleError(error, {\n      component: 'APIService',\n      action: `${error.config?.method?.toUpperCase()} ${error.config?.url}`,\n      userMessage: getErrorMessage(error)\n    });\n\n    // Handle specific error cases\n    if (error.response?.status === 401) {\n      // Try to refresh token before giving up\n      const { authService } = await import('./authService');\n      const newToken = await authService.refreshToken();\n      \n      if (newToken && error.config) {\n        // Retry the original request with new token\n        error.config.headers.Authorization = `Bearer ${newToken}`;\n        return api.request(error.config);\n      } else {\n        // Refresh failed, logout user\n        authService.logout();\n      }\n    }\n\n    // Handle rate limiting with exponential backoff\n    if (error.response?.status === 429) {\n      const retryAfter = error.response.headers['retry-after'];\n      const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000;\n      \n      console.warn(`Rate limited. Retrying after ${delay}ms`);\n      \n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (error.config) {\n            api.request(error.config).then(resolve).catch(reject);\n          } else {\n            reject(error);\n          }\n        }, delay);\n      });\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get user-friendly error messages\nconst getErrorMessage = (error: AxiosError): string => {\n  if (!error.response) {\n    return 'Network connection error. Please check your internet connection.';\n  }\n\n  const status = error.response.status;\n  const data = error.response.data as any;\n\n  switch (status) {\n    case 400:\n      return data?.message || 'Invalid request. Please check your input.';\n    case 401:\n      return 'Your session has expired. Please log in again.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 422:\n      return data?.message || 'Please check your input and try again.';\n    case 429:\n      return 'Too many requests. Please wait a moment and try again.';\n    case 500:\n      return 'Server error occurred. Our team has been notified.';\n    case 502:\n    case 503:\n    case 504:\n      return 'Service temporarily unavailable. Please try again later.';\n    default:\n      return data?.message || 'An unexpected error occurred. Please try again.';\n  }\n};\n\n// Enhanced API wrapper with error handling\nconst createApiMethod = <T>(apiCall: () => Promise<AxiosResponse<T>>, context: string) => {\n  return withErrorHandling(apiCall, {\n    component: 'APIService',\n    action: context\n  });\n};\n\n// Customer API\nexport const customerApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerListItem[] } }> =>\n    api.get('/customers/', { params }),\n  \n  getById: (id: number): Promise<{ data: Customer }> =>\n    api.get(`/customers/${id}/`),\n  \n  create: (customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.post('/customers/', customer),\n  \n  update: (id: number, customer: Partial<Customer>): Promise<{ data: Customer }> =>\n    api.put(`/customers/${id}/`, customer),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/customers/${id}/`),\n  \n  getProperties: (id: number): Promise<{ data: Property[] }> =>\n    api.get(`/customers/${id}/properties/`),\n  \n  addProperty: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post(`/customers/${id}/add_property/`, property),\n  \n  getContacts: (id: number): Promise<{ data: CustomerContact[] }> =>\n    api.get(`/customers/${id}/contacts/`),\n  \n  addContact: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.post(`/customers/${id}/add_contact/`, contact),\n  \n  getReviews: (id: number): Promise<{ data: CustomerReview[] }> =>\n    api.get(`/customers/${id}/reviews/`),\n  \n  addReview: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.post(`/customers/${id}/add_review/`, review),\n};\n\n// Property API\nexport const propertyApi = {\n  getAll: (params?: any): Promise<{ data: { results: Property[] } }> =>\n    api.get('/properties/', { params }),\n  \n  getById: (id: number): Promise<{ data: Property }> =>\n    api.get(`/properties/${id}/`),\n  \n  create: (property: Partial<Property>): Promise<{ data: Property }> =>\n    api.post('/properties/', property),\n  \n  update: (id: number, property: Partial<Property>): Promise<{ data: Property }> =>\n    api.put(`/properties/${id}/`, property),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/properties/${id}/`),\n};\n\n// Contact API\nexport const contactApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerContact[] } }> =>\n    api.get('/contacts/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerContact }> =>\n    api.get(`/contacts/${id}/`),\n  \n  update: (id: number, contact: Partial<CustomerContact>): Promise<{ data: CustomerContact }> =>\n    api.put(`/contacts/${id}/`, contact),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/contacts/${id}/`),\n};\n\n// Review API\nexport const reviewApi = {\n  getAll: (params?: any): Promise<{ data: { results: CustomerReview[] } }> =>\n    api.get('/reviews/', { params }),\n  \n  getById: (id: number): Promise<{ data: CustomerReview }> =>\n    api.get(`/reviews/${id}/`),\n  \n  update: (id: number, review: Partial<CustomerReview>): Promise<{ data: CustomerReview }> =>\n    api.put(`/reviews/${id}/`, review),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/reviews/${id}/`),\n};\n\n// Job API\nexport const jobApi = {\n  getAll: (params?: any): Promise<{ data: { results: JobListItem[] } }> =>\n    api.get('/jobs/', { params }),\n  \n  getById: (id: number): Promise<{ data: Job }> =>\n    api.get(`/jobs/${id}/`),\n  \n  create: (job: Partial<Job>): Promise<{ data: Job }> =>\n    api.post('/jobs/', job),\n  \n  update: (id: number, job: Partial<Job>): Promise<{ data: Job }> =>\n    api.put(`/jobs/${id}/`, job),\n  \n  delete: (id: number): Promise<void> =>\n    api.delete(`/jobs/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/update_status/`, { status }),\n  \n  assignTechnicians: (id: number, technician_ids: number[]): Promise<{ data: Job }> =>\n    api.patch(`/jobs/${id}/assign_technicians/`, { technician_ids }),\n};\n\n// Technician API\nexport const technicianApi = {\n  getAll: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/', { params }),\n  \n  getAvailable: (params?: any): Promise<{ data: any[] }> =>\n    api.get('/jobs/technicians/available/', { params }),\n  \n  getById: (id: number): Promise<{ data: any }> =>\n    api.get(`/jobs/technicians/${id}/`),\n};\n\n// Billing API\nexport const billingApi = {\n  // Invoice endpoints\n  getInvoices: (params?: any): Promise<{ data: { results: Invoice[] } }> =>\n    api.get('/billing/invoices/', { params }),\n  \n  getInvoiceById: (id: number): Promise<{ data: Invoice }> =>\n    api.get(`/billing/invoices/${id}/`),\n  \n  createInvoice: (invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.post('/billing/invoices/', invoice),\n  \n  updateInvoice: (id: number, invoice: Partial<Invoice>): Promise<{ data: Invoice }> =>\n    api.put(`/billing/invoices/${id}/`, invoice),\n  \n  deleteInvoice: (id: number): Promise<void> =>\n    api.delete(`/billing/invoices/${id}/`),\n  \n  sendInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/invoices/${id}/send/`),\n  \n  // Estimate endpoints\n  getEstimates: (params?: any): Promise<{ data: { results: Estimate[] } }> =>\n    api.get('/billing/estimates/', { params }),\n  \n  getEstimateById: (id: number): Promise<{ data: Estimate }> =>\n    api.get(`/billing/estimates/${id}/`),\n  \n  createEstimate: (estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.post('/billing/estimates/', estimate),\n  \n  updateEstimate: (id: number, estimate: Partial<Estimate>): Promise<{ data: Estimate }> =>\n    api.put(`/billing/estimates/${id}/`, estimate),\n  \n  deleteEstimate: (id: number): Promise<void> =>\n    api.delete(`/billing/estimates/${id}/`),\n  \n  convertToInvoice: (id: number): Promise<{ data: Invoice }> =>\n    api.post(`/billing/estimates/${id}/convert_to_invoice/`),\n  \n  // Payment endpoints\n  getPayments: (params?: any): Promise<{ data: { results: Payment[] } }> =>\n    api.get('/billing/payments/', { params }),\n  \n  createPayment: (payment: Partial<Payment>): Promise<{ data: Payment }> =>\n    api.post('/billing/payments/', payment),\n};\n\n// Inventory API\nexport const inventoryApi = {\n  // Item endpoints\n  getItems: (params?: any): Promise<{ data: { results: Item[] } }> =>\n    api.get('/inventory/items/', { params }),\n  \n  getItemById: (id: number): Promise<{ data: Item }> =>\n    api.get(`/inventory/items/${id}/`),\n  \n  createItem: (item: Partial<Item>): Promise<{ data: Item }> =>\n    api.post('/inventory/items/', item),\n  \n  updateItem: (id: number, item: Partial<Item>): Promise<{ data: Item }> =>\n    api.put(`/inventory/items/${id}/`, item),\n  \n  deleteItem: (id: number): Promise<void> =>\n    api.delete(`/inventory/items/${id}/`),\n  \n  adjustStock: (id: number, quantity: number, reason: string): Promise<{ data: Item }> =>\n    api.post(`/inventory/items/${id}/adjust_stock/`, { quantity, reason }),\n  \n  // Category endpoints\n  getCategories: (): Promise<{ data: Category[] }> =>\n    api.get('/inventory/categories/'),\n  \n  createCategory: (category: Partial<Category>): Promise<{ data: Category }> =>\n    api.post('/inventory/categories/', category),\n  \n  // Supplier endpoints\n  getSuppliers: (): Promise<{ data: Supplier[] }> =>\n    api.get('/inventory/suppliers/'),\n  \n  createSupplier: (supplier: Partial<Supplier>): Promise<{ data: Supplier }> =>\n    api.post('/inventory/suppliers/', supplier),\n  \n  // Stock movement endpoints\n  getStockMovements: (params?: any): Promise<{ data: { results: StockMovement[] } }> =>\n    api.get('/inventory/stock-movements/', { params }),\n  \n  // Purchase order endpoints\n  getPurchaseOrders: (params?: any): Promise<{ data: { results: PurchaseOrder[] } }> =>\n    api.get('/inventory/purchase-orders/', { params }),\n  \n  createPurchaseOrder: (po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.post('/inventory/purchase-orders/', po),\n  \n  updatePurchaseOrder: (id: number, po: Partial<PurchaseOrder>): Promise<{ data: PurchaseOrder }> =>\n    api.put(`/inventory/purchase-orders/${id}/`, po),\n};\n\n// Scheduling API\nexport const schedulingApi = {\n  // Appointment endpoints\n  getAppointments: (params?: any): Promise<{ data: { results: Appointment[] } }> =>\n    api.get('/scheduling/appointments/', { params }),\n  \n  getAppointmentById: (id: number): Promise<{ data: Appointment }> =>\n    api.get(`/scheduling/appointments/${id}/`),\n  \n  createAppointment: (appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.post('/scheduling/appointments/', appointment),\n  \n  updateAppointment: (id: number, appointment: Partial<Appointment>): Promise<{ data: Appointment }> =>\n    api.put(`/scheduling/appointments/${id}/`, appointment),\n  \n  deleteAppointment: (id: number): Promise<void> =>\n    api.delete(`/scheduling/appointments/${id}/`),\n  \n  updateStatus: (id: number, status: string): Promise<{ data: Appointment }> =>\n    api.patch(`/scheduling/appointments/${id}/update_status/`, { status }),\n  \n  // Technician availability endpoints\n  getTechnicianAvailability: (params?: any): Promise<{ data: { results: TechnicianAvailability[] } }> =>\n    api.get('/scheduling/technician-availability/', { params }),\n  \n  createAvailability: (availability: Partial<TechnicianAvailability>): Promise<{ data: TechnicianAvailability }> =>\n    api.post('/scheduling/technician-availability/', availability),\n  \n  // Schedule conflict endpoints\n  getScheduleConflicts: (): Promise<{ data: { results: ScheduleConflict[] } }> =>\n    api.get('/scheduling/schedule-conflicts/'),\n  \n  resolveConflict: (id: number, notes: string): Promise<{ data: ScheduleConflict }> =>\n    api.patch(`/scheduling/schedule-conflicts/${id}/resolve/`, { resolution_notes: notes }),\n};\n\n// Analytics API\nexport const analyticsApi = {\n  getBusinessOverview: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/business_overview/'),\n  \n  getFinancialSummary: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/financial_summary/'),\n  \n  getOperationalMetrics: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/operational_metrics/'),\n  \n  getCustomerInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/customer_insights/'),\n  \n  getInventoryInsights: (): Promise<{ data: any }> =>\n    api.get('/analytics/analytics/inventory_insights/'),\n};\n\nexport default api;","import React from 'react';\n\nexport interface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: RegExp;\n  min?: number;\n  max?: number;\n  custom?: (value: any) => string | null;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: Record<string, string>;\n}\n\nexport const validateField = (value: any, rules: ValidationRule): string | null => {\n  if (rules.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\n    return 'This field is required';\n  }\n\n  if (!value) return null;\n\n  if (rules.minLength && typeof value === 'string' && value.length < rules.minLength) {\n    return `Must be at least ${rules.minLength} characters`;\n  }\n\n  if (rules.maxLength && typeof value === 'string' && value.length > rules.maxLength) {\n    return `Must be no more than ${rules.maxLength} characters`;\n  }\n\n  if (rules.pattern && typeof value === 'string' && !rules.pattern.test(value)) {\n    return 'Invalid format';\n  }\n\n  if (rules.min && typeof value === 'number' && value < rules.min) {\n    return `Must be at least ${rules.min}`;\n  }\n\n  if (rules.max && typeof value === 'number' && value > rules.max) {\n    return `Must be no more than ${rules.max}`;\n  }\n\n  if (rules.custom) {\n    return rules.custom(value);\n  }\n\n  return null;\n};\n\nexport const validateForm = (data: Record<string, any>, rules: Record<string, ValidationRule>): ValidationResult => {\n  const errors: Record<string, string> = {};\n\n  for (const [field, fieldRules] of Object.entries(rules)) {\n    const error = validateField(data[field], fieldRules);\n    if (error) {\n      errors[field] = error;\n    }\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Common validation patterns\nexport const validationPatterns = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  phone: /^[\\+]?[1-9][\\d]{0,15}$/,\n  phoneUS: /^(\\+1)?[\\s\\-]?\\(?([0-9]{3})\\)?[\\s\\-]?([0-9]{3})[\\s\\-]?([0-9]{4})$/,\n  postalCode: /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/,\n  zipCode: /^\\d{5}(-\\d{4})?$/,\n  url: /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  currency: /^\\d+(\\.\\d{1,2})?$/,\n  jobNumber: /^JOB-\\d{4}-\\d{4}$/,\n  invoiceNumber: /^INV-\\d{4}-\\d{4}$/,\n  strongPassword: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/\n};\n\n// Helper functions to create validation rules\nexport const commonValidationRules = {\n  required: (message?: string): ValidationRule => ({\n    required: true,\n    custom: (value: any) => {\n      if (!value || (typeof value === 'string' && value.trim() === '')) {\n        return message || 'This field is required';\n      }\n      return null;\n    }\n  }),\n  \n  minLength: (length: number, message?: string): ValidationRule => ({\n    minLength: length,\n    custom: (value: string) => {\n      if (value && value.length < length) {\n        return message || `Must be at least ${length} characters`;\n      }\n      return null;\n    }\n  }),\n  \n  maxLength: (length: number, message?: string): ValidationRule => ({\n    maxLength: length,\n    custom: (value: string) => {\n      if (value && value.length > length) {\n        return message || `Must be no more than ${length} characters`;\n      }\n      return null;\n    }\n  }),\n  \n  email: (message?: string): ValidationRule => ({\n    pattern: validationPatterns.email,\n    custom: (value: string) => {\n      if (value && !validationPatterns.email.test(value)) {\n        return message || 'Please enter a valid email address';\n      }\n      return null;\n    }\n  }),\n  \n  phone: (message?: string): ValidationRule => ({\n    pattern: validationPatterns.phoneUS,\n    custom: (value: string) => {\n      if (value && !validationPatterns.phoneUS.test(value)) {\n        return message || 'Please enter a valid phone number (e.g., (555) 123-4567)';\n      }\n      return null;\n    }\n  }),\n\n  // Pre-defined validation rule objects\n  emailRule: { \n    required: true, \n    pattern: validationPatterns.email,\n    custom: (value: string) => {\n      if (value && !validationPatterns.email.test(value)) {\n        return 'Please enter a valid email address';\n      }\n      return null;\n    }\n  },\n  phoneRule: { \n    required: true, \n    pattern: validationPatterns.phoneUS,\n    custom: (value: string) => {\n      if (value && !validationPatterns.phoneUS.test(value)) {\n        return 'Please enter a valid phone number (e.g., (555) 123-4567)';\n      }\n      return null;\n    }\n  },\n  currencyRule: {\n    required: true,\n    min: 0,\n    custom: (value: number) => {\n      if (value !== undefined && value < 0) {\n        return 'Amount cannot be negative';\n      }\n      return null;\n    }\n  },\n  \n  // Backward compatibility aliases\n  currency: {\n    required: true,\n    min: 0,\n    custom: (value: number) => {\n      if (value !== undefined && value < 0) {\n        return 'Amount cannot be negative';\n      }\n      return null;\n    }\n  },\n  duration: {\n    required: true,\n    min: 0.5,\n    max: 24,\n    custom: (value: number) => {\n      if (value !== undefined && (value < 0.5 || value > 24)) {\n        return 'Duration must be between 0.5 and 24 hours';\n      }\n      return null;\n    }\n  },\n  postalCode: {\n    pattern: validationPatterns.postalCode,\n    custom: (value: string) => {\n      if (value && !validationPatterns.postalCode.test(value) && !validationPatterns.zipCode.test(value)) {\n        return 'Please enter a valid postal/zip code';\n      }\n      return null;\n    }\n  },\n  strongPassword: {\n    required: true,\n    minLength: 8,\n    pattern: validationPatterns.strongPassword,\n    custom: (value: string) => {\n      if (value && !validationPatterns.strongPassword.test(value)) {\n        return 'Password must contain at least 8 characters with uppercase, lowercase, number, and special character';\n      }\n      return null;\n    }\n  },\n  customerName: {\n    required: true,\n    minLength: 2,\n    maxLength: 100,\n    custom: (value: string) => {\n      if (value && value.trim().length < 2) {\n        return 'Name must be at least 2 characters';\n      }\n      return null;\n    }\n  },\n  address: {\n    required: true,\n    minLength: 10,\n    maxLength: 255,\n    custom: (value: string) => {\n      if (value && value.trim().length < 10) {\n        return 'Please enter a complete address';\n      }\n      return null;\n    }\n  },\n  description: {\n    required: true,\n    minLength: 10,\n    maxLength: 1000,\n    custom: (value: string) => {\n      if (value && value.trim().length < 10) {\n        return 'Description must be at least 10 characters';\n      }\n      return null;\n    }\n  }\n};\n\n// Utility functions for specific validations\nexport const validateEmailFormat = (email: string): boolean => {\n  return validationPatterns.email.test(email);\n};\n\nexport const validatePhoneFormat = (phone: string): boolean => {\n  return validationPatterns.phoneUS.test(phone);\n};\n\nexport const validateCurrencyFormat = (amount: string): boolean => {\n  return validationPatterns.currency.test(amount);\n};\n\nexport const formatPhoneNumber = (phone: string): string => {\n  const digits = phone.replace(/\\D/g, '');\n  if (digits.length === 10) {\n    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n  }\n  if (digits.length === 11 && digits[0] === '1') {\n    return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n  }\n  return phone;\n};\n\nexport const formatCurrency = (amount: number | string): string => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(numAmount);\n};\n\n// Real-time validation hook\nexport const useFormValidation = (initialData: Record<string, any>, validationRules: Record<string, ValidationRule>) => {\n  const [data, setData] = React.useState(initialData);\n  const [errors, setErrors] = React.useState<Record<string, string>>({});\n  const [touched, setTouched] = React.useState<Record<string, boolean>>({});\n\n  const validateSingleField = (field: string, value: any) => {\n    const rule = validationRules[field];\n    if (!rule) return null;\n    return validateField(value, rule);\n  };\n\n  const handleChange = (field: string, value: any) => {\n    setData(prev => ({ ...prev, [field]: value }));\n    \n    // Real-time validation\n    if (touched[field]) {\n      const error = validateSingleField(field, value);\n      setErrors(prev => {\n        if (error) {\n          return { ...prev, [field]: error };\n        } else {\n          const newErrors = { ...prev };\n          delete newErrors[field];\n          return newErrors;\n        }\n      });\n    }\n  };\n\n  const handleBlur = (field: string) => {\n    setTouched(prev => ({ ...prev, [field]: true }));\n    const error = validateSingleField(field, data[field]);\n    if (error) {\n      setErrors(prev => ({ ...prev, [field]: error }));\n    }\n  };\n\n  const validateAll = (): boolean => {\n    const result = validateForm(data, validationRules);\n    setErrors(result.errors);\n    setTouched(Object.keys(validationRules).reduce((acc, key) => ({ ...acc, [key]: true }), {}));\n    return result.isValid;\n  };\n\n  const reset = () => {\n    setData(initialData);\n    setErrors({});\n    setTouched({});\n  };\n\n  return {\n    data,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    validateAll,\n    reset,\n    isValid: Object.keys(errors).length === 0\n  };\n};","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["JobList","navigate","useNavigate","jobs","setJobs","useState","loading","setLoading","error","setError","submitting","setSubmitting","openDialog","setOpenDialog","editingJob","setEditingJob","searchTerm","setSearchTerm","statusFilter","setStatusFilter","priorityFilter","setPriorityFilter","customers","setCustomers","serviceTypes","setServiceTypes","technicians","setTechnicians","formData","setFormData","customer_id","property_address","service_type_id","status","priority","scheduled_date","Date","assigned_technician_id","description","estimated_duration","total_amount","notes","formErrors","setFormErrors","loadJobs","async","response","jobApi","getAll","data","results","err","console","useEffect","customersResponse","customerApi","id","user","first_name","last_name","full_name","name","loadReferenceData","getStatusColor","getPriorityColor","filteredJobs","filter","job","customerName","customer_name","serviceType","service_type","title","matchesSearch","job_number","toLowerCase","includes","matchesStatus","matchesPriority","handleCreateJob","handleEditJob","_customers$find","_serviceTypes$find","customerId","find","c","toString","serviceTypeId","s","technicianId","_technicians$find","assigned_technicians","length","t","scheduled_start","created_at","actual_cost","estimated_cost","handleFormChange","field","value","prev","_objectSpread","newErrors","_jsxs","Box","display","flexDirection","justifyContent","alignItems","minHeight","children","_jsx","CircularProgress","size","sx","mb","Typography","variant","color","component","Button","startIcon","AddIcon","onClick","Alert","severity","Grid","container","spacing","item","xs","sm","md","Card","CardContent","j","TextField","fullWidth","label","onChange","e","target","InputProps","startAdornment","SearchIcon","mr","select","MenuItem","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","fontWeight","Chip","replace","textTransform","toLocaleDateString","toLocaleTimeString","hour","minute","join","toFixed","gap","IconButton","ViewIcon","EditIcon","window","confirm","delete","jobId","handleDeleteJob","DeleteIcon","textAlign","py","Dialog","open","onClose","maxWidth","DialogTitle","DialogContent","mt","FormControl","InputLabel","Select","customer","FormHelperText","helperText","type","toISOString","slice","dateValue","InputLabelProps","shrink","tech","inputProps","min","step","Divider","my","multiline","rows","DialogActions","_serviceTypes$find2","validateJobForm","validationRules","required","commonValidationRules","address","duration","currency","result","validateForm","errors","isValid","jobData","parseInt","st","assigned_to","update","create","disabled","createSvgIcon","d","api","axios","baseURL","process","headers","timeout","interceptors","request","use","config","_document$querySelect","metadata","startTime","performance","now","token","localStorage","getItem","Authorization","concat","csrfToken","document","querySelector","getAttribute","errorLogger","handleError","action","userMessage","Promise","reject","_config$metadata","_response$config$meth","_response$config$meth2","warn","method","toUpperCase","url","Math","round","Error","_error$config","_error$config$method","_error$config2","_error$response","_error$response2","getErrorMessage","authService","newToken","refreshToken","logout","retryAfter","delay","resolve","setTimeout","then","catch","message","params","get","getById","post","put","getProperties","addProperty","property","getContacts","addContact","contact","getReviews","addReview","review","propertyApi","updateStatus","patch","assignTechnicians","technician_ids","technicianApi","getAvailable","inventoryApi","getItems","getItemById","createItem","updateItem","deleteItem","adjustStock","quantity","reason","getCategories","createCategory","category","getSuppliers","createSupplier","supplier","getStockMovements","getPurchaseOrders","createPurchaseOrder","po","updatePurchaseOrder","analyticsApi","getBusinessOverview","getFinancialSummary","getOperationalMetrics","getCustomerInsights","getInventoryInsights","validateField","rules","trim","minLength","maxLength","pattern","test","max","custom","fieldRules","Object","entries","keys","validationPatterns","email","phone","phoneUS","postalCode","zipCode","alphanumeric","jobNumber","invoiceNumber","strongPassword","emailRule","phoneRule","currencyRule","undefined","formatPhoneNumber","digits"],"sourceRoot":""}