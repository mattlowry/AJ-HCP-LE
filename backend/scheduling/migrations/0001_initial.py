# Generated by Django 4.2.7 on 2025-05-29 04:01

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('customers', '0002_property_latitude_property_longitude'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('appointment_type', models.CharField(choices=[('meeting', 'Meeting'), ('training', 'Training'), ('maintenance', 'Equipment Maintenance'), ('personal', 'Personal Time'), ('travel', 'Travel Time'), ('break', 'Break'), ('lunch', 'Lunch')], max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('scheduled_date', models.DateField()),
                ('scheduled_start_time', models.TimeField()),
                ('scheduled_end_time', models.TimeField()),
                ('location_address', models.CharField(blank=True, max_length=500)),
                ('location_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('location_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_appointments', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='customers.customer')),
                ('customer_property', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='customers.property')),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='jobs.technician')),
            ],
            options={
                'ordering': ['scheduled_date', 'scheduled_start_time'],
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('default_start_time', models.TimeField(default=datetime.time(8, 0))),
                ('default_end_time', models.TimeField(default=datetime.time(17, 0))),
                ('default_duration', models.DurationField(default=datetime.timedelta(seconds=3600))),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('monday_start', models.TimeField(blank=True, null=True)),
                ('monday_end', models.TimeField(blank=True, null=True)),
                ('tuesday_start', models.TimeField(blank=True, null=True)),
                ('tuesday_end', models.TimeField(blank=True, null=True)),
                ('wednesday_start', models.TimeField(blank=True, null=True)),
                ('wednesday_end', models.TimeField(blank=True, null=True)),
                ('thursday_start', models.TimeField(blank=True, null=True)),
                ('thursday_end', models.TimeField(blank=True, null=True)),
                ('friday_start', models.TimeField(blank=True, null=True)),
                ('friday_end', models.TimeField(blank=True, null=True)),
                ('saturday_start', models.TimeField(blank=True, null=True)),
                ('saturday_end', models.TimeField(blank=True, null=True)),
                ('sunday_start', models.TimeField(blank=True, null=True)),
                ('sunday_end', models.TimeField(blank=True, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_templates', to='jobs.technician')),
            ],
            options={
                'ordering': ['technician', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleOptimization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('optimization_date', models.DateTimeField(auto_now_add=True)),
                ('target_date', models.DateField()),
                ('optimization_type', models.CharField(choices=[('route', 'Route Optimization'), ('time', 'Time Optimization'), ('skill', 'Skill-based Optimization'), ('priority', 'Priority-based Optimization')], max_length=50)),
                ('jobs_optimized', models.PositiveIntegerField(default=0)),
                ('total_travel_time_minutes', models.PositiveIntegerField(default=0)),
                ('total_travel_distance_miles', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('optimization_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('optimization_notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimizations', to='jobs.technician')),
            ],
            options={
                'ordering': ['-optimization_date'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleConflict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflict_type', models.CharField(choices=[('job_overlap', 'Job Time Overlap'), ('availability', 'Technician Unavailable'), ('travel_time', 'Insufficient Travel Time'), ('skill_mismatch', 'Skill Requirements Not Met'), ('equipment', 'Equipment Conflict'), ('customer_preference', 'Customer Time Preference')], max_length=30)),
                ('description', models.TextField()),
                ('resolution_status', models.CharField(choices=[('unresolved', 'Unresolved'), ('resolved', 'Resolved'), ('ignored', 'Ignored'), ('escalated', 'Escalated')], default='unresolved', max_length=20)),
                ('resolution_notes', models.TextField(blank=True)),
                ('conflict_date', models.DateField()),
                ('conflict_start_time', models.TimeField()),
                ('conflict_end_time', models.TimeField()),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conflicts', to='scheduling.appointment')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_conflicts', to='jobs.job')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_conflicts', to='jobs.technician')),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='TechnicianAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('availability_type', models.CharField(choices=[('available', 'Available'), ('busy', 'Busy'), ('off', 'Off Duty'), ('vacation', 'Vacation'), ('sick', 'Sick Leave'), ('training', 'Training')], default='available', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability', to='jobs.technician')),
            ],
            options={
                'ordering': ['date', 'start_time'],
                'unique_together': {('technician', 'date', 'start_time')},
            },
        ),
    ]
